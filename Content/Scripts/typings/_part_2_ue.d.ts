declare class SkeletalMeshEditorSettings extends UObject { 
	AnimPreviewFloorColor: Color;
	AnimPreviewSkyColor: Color;
	AnimPreviewSkyBrightness: number;
	AnimPreviewLightBrightness: number;
	AnimPreviewLightingDirection: Rotator;
	AnimPreviewDirectionalColor: Color;
	static Load(ResourceName: string): SkeletalMeshEditorSettings;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshEditorSettings;
	static GetDefaultObject(): SkeletalMeshEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshEditorSettings;
	static C(Other: UObject | any): SkeletalMeshEditorSettings;
}

declare class SkeletalMeshExporterFBX extends ExporterFBX { 
	static Load(ResourceName: string): SkeletalMeshExporterFBX;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshExporterFBX;
	static GetDefaultObject(): SkeletalMeshExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshExporterFBX;
	static C(Other: UObject | any): SkeletalMeshExporterFBX;
}

declare class SkeletalMeshThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): SkeletalMeshThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshThumbnailRenderer;
	static GetDefaultObject(): SkeletalMeshThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshThumbnailRenderer;
	static C(Other: UObject | any): SkeletalMeshThumbnailRenderer;
}

declare class SkeletalMeshToolMenuContext extends UObject { 
	static Load(ResourceName: string): SkeletalMeshToolMenuContext;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshToolMenuContext;
	static GetDefaultObject(): SkeletalMeshToolMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshToolMenuContext;
	static C(Other: UObject | any): SkeletalMeshToolMenuContext;
}

declare class SkeletonFactory extends Factory { 
	TargetSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): SkeletonFactory;
	static Find(Outer: UObject, ResourceName: string): SkeletonFactory;
	static GetDefaultObject(): SkeletonFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletonFactory;
	static C(Other: UObject | any): SkeletonFactory;
}

declare class SlateBrushAssetFactory extends Factory { 
	InitialTexture: Texture2D;
	static Load(ResourceName: string): SlateBrushAssetFactory;
	static Find(Outer: UObject, ResourceName: string): SlateBrushAssetFactory;
	static GetDefaultObject(): SlateBrushAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBrushAssetFactory;
	static C(Other: UObject | any): SlateBrushAssetFactory;
}

declare class SlateBrushThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): SlateBrushThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SlateBrushThumbnailRenderer;
	static GetDefaultObject(): SlateBrushThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBrushThumbnailRenderer;
	static C(Other: UObject | any): SlateBrushThumbnailRenderer;
}

declare class SlateWidgetStyleAssetFactory extends Factory { 
	StyleType: UnrealEngineClass;
	static Load(ResourceName: string): SlateWidgetStyleAssetFactory;
	static Find(Outer: UObject, ResourceName: string): SlateWidgetStyleAssetFactory;
	static GetDefaultObject(): SlateWidgetStyleAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateWidgetStyleAssetFactory;
	static C(Other: UObject | any): SlateWidgetStyleAssetFactory;
}

declare class SoundExporterOGG extends Exporter { 
	static Load(ResourceName: string): SoundExporterOGG;
	static Find(Outer: UObject, ResourceName: string): SoundExporterOGG;
	static GetDefaultObject(): SoundExporterOGG;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundExporterOGG;
	static C(Other: UObject | any): SoundExporterOGG;
}

declare class SoundExporterWAV extends Exporter { 
	static Load(ResourceName: string): SoundExporterWAV;
	static Find(Outer: UObject, ResourceName: string): SoundExporterWAV;
	static GetDefaultObject(): SoundExporterWAV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundExporterWAV;
	static C(Other: UObject | any): SoundExporterWAV;
}

declare class SoundSurroundExporterWAV extends Exporter { 
	static Load(ResourceName: string): SoundSurroundExporterWAV;
	static Find(Outer: UObject, ResourceName: string): SoundSurroundExporterWAV;
	static GetDefaultObject(): SoundSurroundExporterWAV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSurroundExporterWAV;
	static C(Other: UObject | any): SoundSurroundExporterWAV;
}

declare class SoundWaveThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): SoundWaveThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SoundWaveThumbnailRenderer;
	static GetDefaultObject(): SoundWaveThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundWaveThumbnailRenderer;
	static C(Other: UObject | any): SoundWaveThumbnailRenderer;
}

declare class SpiralStairBuilder extends EditorBrushBuilder { 
	InnerRadius: number;
	StepWidth: number;
	StepHeight: number;
	StepThickness: number;
	NumStepsPer360: number;
	NumSteps: number;
	GroupName: string;
	SlopedCeiling: boolean;
	SlopedFloor: boolean;
	CounterClockwise: boolean;
	static Load(ResourceName: string): SpiralStairBuilder;
	static Find(Outer: UObject, ResourceName: string): SpiralStairBuilder;
	static GetDefaultObject(): SpiralStairBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpiralStairBuilder;
	static C(Other: UObject | any): SpiralStairBuilder;
}

declare class StabilizeLocalizationKeysCommandlet extends Commandlet { 
	static Load(ResourceName: string): StabilizeLocalizationKeysCommandlet;
	static Find(Outer: UObject, ResourceName: string): StabilizeLocalizationKeysCommandlet;
	static GetDefaultObject(): StabilizeLocalizationKeysCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StabilizeLocalizationKeysCommandlet;
	static C(Other: UObject | any): StabilizeLocalizationKeysCommandlet;
}

declare class StaticMeshExporterFBX extends ExporterFBX { 
	static Load(ResourceName: string): StaticMeshExporterFBX;
	static Find(Outer: UObject, ResourceName: string): StaticMeshExporterFBX;
	static GetDefaultObject(): StaticMeshExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshExporterFBX;
	static C(Other: UObject | any): StaticMeshExporterFBX;
}

declare class StaticMeshExporterOBJ extends Exporter { 
	static Load(ResourceName: string): StaticMeshExporterOBJ;
	static Find(Outer: UObject, ResourceName: string): StaticMeshExporterOBJ;
	static GetDefaultObject(): StaticMeshExporterOBJ;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshExporterOBJ;
	static C(Other: UObject | any): StaticMeshExporterOBJ;
}

declare class StaticMeshThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): StaticMeshThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): StaticMeshThumbnailRenderer;
	static GetDefaultObject(): StaticMeshThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshThumbnailRenderer;
	static C(Other: UObject | any): StaticMeshThumbnailRenderer;
}

declare class StringTableFactory extends Factory { 
	static Load(ResourceName: string): StringTableFactory;
	static Find(Outer: UObject, ResourceName: string): StringTableFactory;
	static GetDefaultObject(): StringTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StringTableFactory;
	static C(Other: UObject | any): StringTableFactory;
}

declare class StructureFactory extends Factory { 
	static Load(ResourceName: string): StructureFactory;
	static Find(Outer: UObject, ResourceName: string): StructureFactory;
	static GetDefaultObject(): StructureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StructureFactory;
	static C(Other: UObject | any): StructureFactory;
}

declare type EStructViewerDeveloperType = 'SVDT_None' | 'SVDT_CurrentUser' | 'SVDT_All' | 'SVDT_Max';
declare var EStructViewerDeveloperType : { SVDT_None:'SVDT_None',SVDT_CurrentUser:'SVDT_CurrentUser',SVDT_All:'SVDT_All',SVDT_Max:'SVDT_Max', };
declare class StructViewerSettings extends UObject { 
	DisplayInternalStructs: boolean;
	DeveloperFolderType: EStructViewerDeveloperType;
	static Load(ResourceName: string): StructViewerSettings;
	static Find(Outer: UObject, ResourceName: string): StructViewerSettings;
	static GetDefaultObject(): StructViewerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StructViewerSettings;
	static C(Other: UObject | any): StructViewerSettings;
}

declare class SubsurfaceProfileFactory extends Factory { 
	static Load(ResourceName: string): SubsurfaceProfileFactory;
	static Find(Outer: UObject, ResourceName: string): SubsurfaceProfileFactory;
	static GetDefaultObject(): SubsurfaceProfileFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsurfaceProfileFactory;
	static C(Other: UObject | any): SubsurfaceProfileFactory;
}

declare class SubsurfaceProfileRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): SubsurfaceProfileRenderer;
	static Find(Outer: UObject, ResourceName: string): SubsurfaceProfileRenderer;
	static GetDefaultObject(): SubsurfaceProfileRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsurfaceProfileRenderer;
	static C(Other: UObject | any): SubsurfaceProfileRenderer;
}

declare class SubUVAnimationFactory extends Factory { 
	InitialTexture: Texture2D;
	static Load(ResourceName: string): SubUVAnimationFactory;
	static Find(Outer: UObject, ResourceName: string): SubUVAnimationFactory;
	static GetDefaultObject(): SubUVAnimationFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubUVAnimationFactory;
	static C(Other: UObject | any): SubUVAnimationFactory;
}

declare class SwapSoundForDialogueInCuesCommandlet extends Commandlet { 
	static Load(ResourceName: string): SwapSoundForDialogueInCuesCommandlet;
	static Find(Outer: UObject, ResourceName: string): SwapSoundForDialogueInCuesCommandlet;
	static GetDefaultObject(): SwapSoundForDialogueInCuesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SwapSoundForDialogueInCuesCommandlet;
	static C(Other: UObject | any): SwapSoundForDialogueInCuesCommandlet;
}

declare class TemplateMapMetadata extends UObject { 
	static Load(ResourceName: string): TemplateMapMetadata;
	static Find(Outer: UObject, ResourceName: string): TemplateMapMetadata;
	static GetDefaultObject(): TemplateMapMetadata;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TemplateMapMetadata;
	static C(Other: UObject | any): TemplateMapMetadata;
}

declare class TetrahedronBuilder extends EditorBrushBuilder { 
	Radius: number;
	SphereExtrapolation: number;
	GroupName: string;
	static Load(ResourceName: string): TetrahedronBuilder;
	static Find(Outer: UObject, ResourceName: string): TetrahedronBuilder;
	static GetDefaultObject(): TetrahedronBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TetrahedronBuilder;
	static C(Other: UObject | any): TetrahedronBuilder;
}

declare type ETexAlign = 'TEXALIGN_None' | 'TEXALIGN_Default' | 'TEXALIGN_Box' | 'TEXALIGN_Planar' | 'TEXALIGN_Fit' | 'TEXALIGN_PlanarAuto' | 'TEXALIGN_PlanarWall' | 'TEXALIGN_PlanarFloor' | 'TEXALIGN_MAX';
declare var ETexAlign : { TEXALIGN_None:'TEXALIGN_None',TEXALIGN_Default:'TEXALIGN_Default',TEXALIGN_Box:'TEXALIGN_Box',TEXALIGN_Planar:'TEXALIGN_Planar',TEXALIGN_Fit:'TEXALIGN_Fit',TEXALIGN_PlanarAuto:'TEXALIGN_PlanarAuto',TEXALIGN_PlanarWall:'TEXALIGN_PlanarWall',TEXALIGN_PlanarFloor:'TEXALIGN_PlanarFloor',TEXALIGN_MAX:'TEXALIGN_MAX', };
declare class TexAligner extends UObject { 
	DefTexAlign: ETexAlign;
	TAxis: number;
	UTile: number;
	VTile: number;
	Desc: string;
	static Load(ResourceName: string): TexAligner;
	static Find(Outer: UObject, ResourceName: string): TexAligner;
	static GetDefaultObject(): TexAligner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAligner;
	static C(Other: UObject | any): TexAligner;
}

declare class TexAlignerBox extends TexAligner { 
	static Load(ResourceName: string): TexAlignerBox;
	static Find(Outer: UObject, ResourceName: string): TexAlignerBox;
	static GetDefaultObject(): TexAlignerBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerBox;
	static C(Other: UObject | any): TexAlignerBox;
}

declare class TexAlignerDefault extends TexAligner { 
	static Load(ResourceName: string): TexAlignerDefault;
	static Find(Outer: UObject, ResourceName: string): TexAlignerDefault;
	static GetDefaultObject(): TexAlignerDefault;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerDefault;
	static C(Other: UObject | any): TexAlignerDefault;
}

declare class TexAlignerFit extends TexAligner { 
	static Load(ResourceName: string): TexAlignerFit;
	static Find(Outer: UObject, ResourceName: string): TexAlignerFit;
	static GetDefaultObject(): TexAlignerFit;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerFit;
	static C(Other: UObject | any): TexAlignerFit;
}

declare class TexAlignerPlanar extends TexAligner { 
	static Load(ResourceName: string): TexAlignerPlanar;
	static Find(Outer: UObject, ResourceName: string): TexAlignerPlanar;
	static GetDefaultObject(): TexAlignerPlanar;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerPlanar;
	static C(Other: UObject | any): TexAlignerPlanar;
}

declare class TextAssetCommandlet extends Commandlet { 
	static Load(ResourceName: string): TextAssetCommandlet;
	static Find(Outer: UObject, ResourceName: string): TextAssetCommandlet;
	static GetDefaultObject(): TextAssetCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextAssetCommandlet;
	static C(Other: UObject | any): TextAssetCommandlet;
}

declare class TextBufferExporterTXT extends Exporter { 
	static Load(ResourceName: string): TextBufferExporterTXT;
	static Find(Outer: UObject, ResourceName: string): TextBufferExporterTXT;
	static GetDefaultObject(): TextBufferExporterTXT;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextBufferExporterTXT;
	static C(Other: UObject | any): TextBufferExporterTXT;
}

declare class Texture2DArrayFactory extends Factory { 
	InitialTextures: Texture2D[];
	static Load(ResourceName: string): Texture2DArrayFactory;
	static Find(Outer: UObject, ResourceName: string): Texture2DArrayFactory;
	static GetDefaultObject(): Texture2DArrayFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2DArrayFactory;
	static C(Other: UObject | any): Texture2DArrayFactory;
}

declare class Texture2DArrayThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): Texture2DArrayThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): Texture2DArrayThumbnailRenderer;
	static GetDefaultObject(): Texture2DArrayThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2DArrayThumbnailRenderer;
	static C(Other: UObject | any): Texture2DArrayThumbnailRenderer;
}

declare class Texture2DFactoryNew extends Factory { 
	Width: number;
	Height: number;
	static Load(ResourceName: string): Texture2DFactoryNew;
	static Find(Outer: UObject, ResourceName: string): Texture2DFactoryNew;
	static GetDefaultObject(): Texture2DFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2DFactoryNew;
	static C(Other: UObject | any): Texture2DFactoryNew;
}

declare class TextureCubeExporterHDR extends Exporter { 
	static Load(ResourceName: string): TextureCubeExporterHDR;
	static Find(Outer: UObject, ResourceName: string): TextureCubeExporterHDR;
	static GetDefaultObject(): TextureCubeExporterHDR;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCubeExporterHDR;
	static C(Other: UObject | any): TextureCubeExporterHDR;
}

declare class TextureCubeThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): TextureCubeThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): TextureCubeThumbnailRenderer;
	static GetDefaultObject(): TextureCubeThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCubeThumbnailRenderer;
	static C(Other: UObject | any): TextureCubeThumbnailRenderer;
}

declare class TextureExporterBMP extends Exporter { 
	static Load(ResourceName: string): TextureExporterBMP;
	static Find(Outer: UObject, ResourceName: string): TextureExporterBMP;
	static GetDefaultObject(): TextureExporterBMP;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterBMP;
	static C(Other: UObject | any): TextureExporterBMP;
}

declare class VirtualTextureBuilderExporterBMP extends TextureExporterBMP { 
	static Load(ResourceName: string): VirtualTextureBuilderExporterBMP;
	static Find(Outer: UObject, ResourceName: string): VirtualTextureBuilderExporterBMP;
	static GetDefaultObject(): VirtualTextureBuilderExporterBMP;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VirtualTextureBuilderExporterBMP;
	static C(Other: UObject | any): VirtualTextureBuilderExporterBMP;
}

declare class TextureExporterHDR extends Exporter { 
	static Load(ResourceName: string): TextureExporterHDR;
	static Find(Outer: UObject, ResourceName: string): TextureExporterHDR;
	static GetDefaultObject(): TextureExporterHDR;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterHDR;
	static C(Other: UObject | any): TextureExporterHDR;
}

declare class TextureExporterPCX extends Exporter { 
	static Load(ResourceName: string): TextureExporterPCX;
	static Find(Outer: UObject, ResourceName: string): TextureExporterPCX;
	static GetDefaultObject(): TextureExporterPCX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterPCX;
	static C(Other: UObject | any): TextureExporterPCX;
}

declare class TextureExporterTGA extends Exporter { 
	static Load(ResourceName: string): TextureExporterTGA;
	static Find(Outer: UObject, ResourceName: string): TextureExporterTGA;
	static GetDefaultObject(): TextureExporterTGA;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterTGA;
	static C(Other: UObject | any): TextureExporterTGA;
}

declare class TextureImportSettings extends DeveloperSettings { 
	AutoVTSize: number;
	static Load(ResourceName: string): TextureImportSettings;
	static Find(Outer: UObject, ResourceName: string): TextureImportSettings;
	static GetDefaultObject(): TextureImportSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureImportSettings;
	static C(Other: UObject | any): TextureImportSettings;
}

declare class TextureRenderTarget2DArrayFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Slices: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTarget2DArrayFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTarget2DArrayFactoryNew;
	static GetDefaultObject(): TextureRenderTarget2DArrayFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTarget2DArrayFactoryNew;
	static C(Other: UObject | any): TextureRenderTarget2DArrayFactoryNew;
}

declare class TextureRenderTargetCubeFactoryNew extends Factory { 
	Width: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTargetCubeFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetCubeFactoryNew;
	static GetDefaultObject(): TextureRenderTargetCubeFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetCubeFactoryNew;
	static C(Other: UObject | any): TextureRenderTargetCubeFactoryNew;
}

declare class TextureRenderTargetFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTargetFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetFactoryNew;
	static GetDefaultObject(): TextureRenderTargetFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetFactoryNew;
	static C(Other: UObject | any): TextureRenderTargetFactoryNew;
}

declare class TextureRenderTargetVolumeFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Depth: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTargetVolumeFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetVolumeFactoryNew;
	static GetDefaultObject(): TextureRenderTargetVolumeFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetVolumeFactoryNew;
	static C(Other: UObject | any): TextureRenderTargetVolumeFactoryNew;
}

declare class SkeletalMeshActor extends Actor { 
	bShouldDoAnimNotifies: boolean;
	bWakeOnLevelStart: boolean;
	SkeletalMeshComponent: SkeletalMeshComponent;
	ReplicatedMesh: SkeletalMesh;
	ReplicatedPhysAsset: PhysicsAsset;
	ReplicatedMaterial0: MaterialInterface;
	ReplicatedMaterial1: MaterialInterface;
	static GetDefaultObject(): SkeletalMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshActor;
	OnRep_ReplicatedPhysAsset(): void;
	OnRep_ReplicatedMesh(): void;
	OnRep_ReplicatedMaterial1(): void;
	OnRep_ReplicatedMaterial0(): void;
	static C(Other: UObject | any): SkeletalMeshActor;
}

declare class AnimationThumbnailSkeletalMeshActor extends SkeletalMeshActor { 
	static GetDefaultObject(): AnimationThumbnailSkeletalMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationThumbnailSkeletalMeshActor;
	static C(Other: UObject | any): AnimationThumbnailSkeletalMeshActor;
}

declare class ThumbnailRenderingInfo { 
	ClassNeedingThumbnailName: string;
	ClassNeedingThumbnail: UnrealEngineClass;
	RendererClassName: string;
	Renderer: ThumbnailRenderer;
	clone() : ThumbnailRenderingInfo;
	static C(Other: UObject | any): ThumbnailRenderingInfo;
}

declare class ThumbnailManager extends UObject { 
	RenderableThumbnailTypes: ThumbnailRenderingInfo[];
	NotSupported: ThumbnailRenderingInfo;
	EditorCube: StaticMesh;
	EditorSphere: StaticMesh;
	EditorCylinder: StaticMesh;
	EditorPlane: StaticMesh;
	EditorSkySphere: StaticMesh;
	FloorPlaneMaterial: Material;
	AmbientCubemap: TextureCube;
	CheckerboardTexture: Texture2D;
	ThumbnailManagerClassName: string;
	static Load(ResourceName: string): ThumbnailManager;
	static Find(Outer: UObject, ResourceName: string): ThumbnailManager;
	static GetDefaultObject(): ThumbnailManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ThumbnailManager;
	static C(Other: UObject | any): ThumbnailManager;
}

declare class TouchInterfaceFactory extends Factory { 
	static Load(ResourceName: string): TouchInterfaceFactory;
	static Find(Outer: UObject, ResourceName: string): TouchInterfaceFactory;
	static GetDefaultObject(): TouchInterfaceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TouchInterfaceFactory;
	static C(Other: UObject | any): TouchInterfaceFactory;
}

declare class TransBuffer extends Transactor { 
	static Load(ResourceName: string): TransBuffer;
	static Find(Outer: UObject, ResourceName: string): TransBuffer;
	static GetDefaultObject(): TransBuffer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TransBuffer;
	static C(Other: UObject | any): TransBuffer;
}

declare class FontImportOptions extends UObject { 
	Data: FontImportOptionsData;
	static Load(ResourceName: string): FontImportOptions;
	static Find(Outer: UObject, ResourceName: string): FontImportOptions;
	static GetDefaultObject(): FontImportOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontImportOptions;
	static C(Other: UObject | any): FontImportOptions;
}

declare class TrueTypeFontFactory extends TextureFactory { 
	ImportOptions: FontImportOptions;
	bPropertiesConfigured: boolean;
	bFontSelected: boolean;
	static Load(ResourceName: string): TrueTypeFontFactory;
	static Find(Outer: UObject, ResourceName: string): TrueTypeFontFactory;
	static GetDefaultObject(): TrueTypeFontFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TrueTypeFontFactory;
	static C(Other: UObject | any): TrueTypeFontFactory;
}

declare class EditorCommandCategory { 
	Parent: string;
	Name: string;
	clone() : EditorCommandCategory;
	static C(Other: UObject | any): EditorCommandCategory;
}

declare class EditorCommand { 
	Parent: string;
	CommandName: string;
	ExecCommand: string;
	Description: string;
	clone() : EditorCommand;
	static C(Other: UObject | any): EditorCommand;
}

declare class EditorKeyBinding { 
	bCtrlDown: boolean;
	bAltDown: boolean;
	bShiftDown: boolean;
	Key: Key;
	CommandName: string;
	clone() : EditorKeyBinding;
	static C(Other: UObject | any): EditorKeyBinding;
}

declare class UnrealEdKeyBindings extends UObject { 
	KeyBindings: EditorKeyBinding[];
	static Load(ResourceName: string): UnrealEdKeyBindings;
	static Find(Outer: UObject, ResourceName: string): UnrealEdKeyBindings;
	static GetDefaultObject(): UnrealEdKeyBindings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdKeyBindings;
	static C(Other: UObject | any): UnrealEdKeyBindings;
}

declare class ClassPickerDefaults { 
	ClassName: string;
	AssetClass: string;
	clone() : ClassPickerDefaults;
	static C(Other: UObject | any): ClassPickerDefaults;
}

declare class UnrealEdOptions extends UObject { 
	EditorCategories: EditorCommandCategory[];
	EditorCommands: EditorCommand[];
	EditorKeyBindings: UnrealEdKeyBindings;
	bExpandClassPickerClassList: boolean;
	NewAssetDefaultClasses: ClassPickerDefaults[];
	static Load(ResourceName: string): UnrealEdOptions;
	static Find(Outer: UObject, ResourceName: string): UnrealEdOptions;
	static GetDefaultObject(): UnrealEdOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdOptions;
	static C(Other: UObject | any): UnrealEdOptions;
}

declare type AnimationCompressionFormat = 'ACF_None' | 'ACF_Float96NoW' | 'ACF_Fixed48NoW' | 'ACF_IntervalFixed32NoW' | 'ACF_Fixed32NoW' | 'ACF_Float32NoW' | 'ACF_Identity' | 'ACF_MAX';
declare var AnimationCompressionFormat : { ACF_None:'ACF_None',ACF_Float96NoW:'ACF_Float96NoW',ACF_Fixed48NoW:'ACF_Fixed48NoW',ACF_IntervalFixed32NoW:'ACF_IntervalFixed32NoW',ACF_Fixed32NoW:'ACF_Fixed32NoW',ACF_Float32NoW:'ACF_Float32NoW',ACF_Identity:'ACF_Identity',ACF_MAX:'ACF_MAX', };
declare class AnimCompress extends AnimBoneCompressionCodec { 
	bNeedsSkeleton: boolean;
	TranslationCompressionFormat: AnimationCompressionFormat;
	RotationCompressionFormat: AnimationCompressionFormat;
	ScaleCompressionFormat: AnimationCompressionFormat;
	static Load(ResourceName: string): AnimCompress;
	static Find(Outer: UObject, ResourceName: string): AnimCompress;
	static GetDefaultObject(): AnimCompress;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress;
	static C(Other: UObject | any): AnimCompress;
}

declare class TemplateMapInfo { 
	ThumbnailTexture: Texture2D;
	Map: string;
	clone() : TemplateMapInfo;
	static C(Other: UObject | any): TemplateMapInfo;
}

declare class UnrealEdEngine extends EditorEngine { 
	EditorOptionsInst: UnrealEdOptions;
	AutoReimportManager: AutoReimportManager;
	MaterialCopyPasteBuffer: Material;
	MatineeCopyPasteBuffer: UObject[];
	SoundCueCopyPasteBuffer: SoundCue;
	AnimationCompressionAlgorithms: AnimCompress[];
	PackagesToBeFullyLoadedAtStartup: string[];
	CurrentLODParentActor: Actor;
	bNeedWarningForPkgEngineVer: boolean;
	SortedSpriteCategories: string[];
	TemplateMapInfos: TemplateMapInfo[];
	CookServer: CookOnTheFlyServer;
	static Load(ResourceName: string): UnrealEdEngine;
	static Find(Outer: UObject, ResourceName: string): UnrealEdEngine;
	static GetDefaultObject(): UnrealEdEngine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdEngine;
	static C(Other: UObject | any): UnrealEdEngine;
}

declare class UnrealEdTypes extends UObject { 
	static Load(ResourceName: string): UnrealEdTypes;
	static Find(Outer: UObject, ResourceName: string): UnrealEdTypes;
	static GetDefaultObject(): UnrealEdTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdTypes;
	static C(Other: UObject | any): UnrealEdTypes;
}

declare class UnrealPakCommandlet extends Commandlet { 
	static Load(ResourceName: string): UnrealPakCommandlet;
	static Find(Outer: UObject, ResourceName: string): UnrealPakCommandlet;
	static GetDefaultObject(): UnrealPakCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealPakCommandlet;
	static C(Other: UObject | any): UnrealPakCommandlet;
}

declare class UpdateGameProjectCommandlet extends Commandlet { 
	static Load(ResourceName: string): UpdateGameProjectCommandlet;
	static Find(Outer: UObject, ResourceName: string): UpdateGameProjectCommandlet;
	static GetDefaultObject(): UpdateGameProjectCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UpdateGameProjectCommandlet;
	static C(Other: UObject | any): UpdateGameProjectCommandlet;
}

declare class StructVariableDescription { 
	VarName: string;
	VarGuid: Guid;
	FriendlyName: string;
	DefaultValue: string;
	Category: string;
	SubCategory: string;
	SubCategoryObject: UObject;
	PinValueType: EdGraphTerminalType;
	ContainerType: EPinContainerType;
	bIsArray: boolean;
	bIsSet: boolean;
	bIsMap: boolean;
	bInvalidMember: boolean;
	bDontEditOnInstance: boolean;
	bEnableSaveGame: boolean;
	bEnableMultiLineText: boolean;
	bEnable3dWidget: boolean;
	CurrentDefaultValue: string;
	Tooltip: string;
	clone() : StructVariableDescription;
	static C(Other: UObject | any): StructVariableDescription;
}

declare class UserDefinedStructEditorData extends UObject { 
	UniqueNameId: any;
	VariablesDescriptions: StructVariableDescription[];
	Tooltip: string;
	static Load(ResourceName: string): UserDefinedStructEditorData;
	static Find(Outer: UObject, ResourceName: string): UserDefinedStructEditorData;
	static GetDefaultObject(): UserDefinedStructEditorData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedStructEditorData;
	static C(Other: UObject | any): UserDefinedStructEditorData;
}

declare class VectorFieldExporter extends Exporter { 
	static Load(ResourceName: string): VectorFieldExporter;
	static Find(Outer: UObject, ResourceName: string): VectorFieldExporter;
	static GetDefaultObject(): VectorFieldExporter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldExporter;
	static C(Other: UObject | any): VectorFieldExporter;
}

declare class VolumeTextureFactory extends Factory { 
	InitialTexture: Texture2D;
	static Load(ResourceName: string): VolumeTextureFactory;
	static Find(Outer: UObject, ResourceName: string): VolumeTextureFactory;
	static GetDefaultObject(): VolumeTextureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumeTextureFactory;
	static C(Other: UObject | any): VolumeTextureFactory;
}

declare class VolumeTextureThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	MaterialInstance: MaterialInstanceConstant;
	static Load(ResourceName: string): VolumeTextureThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): VolumeTextureThumbnailRenderer;
	static GetDefaultObject(): VolumeTextureThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumeTextureThumbnailRenderer;
	static C(Other: UObject | any): VolumeTextureThumbnailRenderer;
}

declare class VolumetricBuilder extends EditorBrushBuilder { 
	Z: number;
	Radius: number;
	NumSheets: number;
	GroupName: string;
	static Load(ResourceName: string): VolumetricBuilder;
	static Find(Outer: UObject, ResourceName: string): VolumetricBuilder;
	static GetDefaultObject(): VolumetricBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumetricBuilder;
	static C(Other: UObject | any): VolumetricBuilder;
}

declare class WorldFactory extends Factory { 
	static Load(ResourceName: string): WorldFactory;
	static Find(Outer: UObject, ResourceName: string): WorldFactory;
	static GetDefaultObject(): WorldFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldFactory;
	static C(Other: UObject | any): WorldFactory;
}

declare type EOrthoThumbnailDirection = 'Top' | 'Bottom' | 'Left' | 'Right' | 'Front' | 'Back' | 'EOrthoThumbnailDirection_MAX';
declare var EOrthoThumbnailDirection : { Top:'Top',Bottom:'Bottom',Left:'Left',Right:'Right',Front:'Front',Back:'Back',EOrthoThumbnailDirection_MAX:'EOrthoThumbnailDirection_MAX', };
declare class WorldThumbnailInfo extends SceneThumbnailInfo { 
	CameraMode: ECameraProjectionMode;
	OrthoDirection: EOrthoThumbnailDirection;
	static Load(ResourceName: string): WorldThumbnailInfo;
	static Find(Outer: UObject, ResourceName: string): WorldThumbnailInfo;
	static GetDefaultObject(): WorldThumbnailInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldThumbnailInfo;
	static C(Other: UObject | any): WorldThumbnailInfo;
}

declare class WorldThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	GlobalOrbitPitchOffset: number;
	GlobalOrbitYawOffset: number;
	bUseUnlitScene: boolean;
	bAllowWorldThumbnails: boolean;
	static Load(ResourceName: string): WorldThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): WorldThumbnailRenderer;
	static GetDefaultObject(): WorldThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldThumbnailRenderer;
	static C(Other: UObject | any): WorldThumbnailRenderer;
}

declare class WrangleContentCommandlet extends Commandlet { 
	static Load(ResourceName: string): WrangleContentCommandlet;
	static Find(Outer: UObject, ResourceName: string): WrangleContentCommandlet;
	static GetDefaultObject(): WrangleContentCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WrangleContentCommandlet;
	static C(Other: UObject | any): WrangleContentCommandlet;
}

declare class InstancedStaticMeshInstanceData { 
	Transform: Matrix;
	clone() : InstancedStaticMeshInstanceData;
	static C(Other: UObject | any): InstancedStaticMeshInstanceData;
}

declare class InstancedStaticMeshMappingInfo { 
	clone() : InstancedStaticMeshMappingInfo;
	static C(Other: UObject | any): InstancedStaticMeshMappingInfo;
}

declare class InstancedStaticMeshComponent extends StaticMeshComponent { 
	PerInstanceSMData: InstancedStaticMeshInstanceData[];
	NumCustomDataFloats: number;
	PerInstanceSMCustomData: number[];
	InstancingRandomSeed: number;
	InstanceStartCullDistance: number;
	InstanceEndCullDistance: number;
	InstanceReorderTable: number[];
	NumPendingLightmaps: number;
	CachedMappings: InstancedStaticMeshMappingInfo[];
	static Load(ResourceName: string): InstancedStaticMeshComponent;
	static Find(Outer: UObject, ResourceName: string): InstancedStaticMeshComponent;
	static GetDefaultObject(): InstancedStaticMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InstancedStaticMeshComponent;
	UpdateInstanceTransform(InstanceIndex: number,NewInstanceTransform: Transform,bWorldSpace: boolean,bMarkRenderStateDirty: boolean,bTeleport: boolean): boolean;
	SetCustomDataValue(InstanceIndex: number,CustomDataIndex: number,CustomDataValue: number,bMarkRenderStateDirty: boolean): boolean;
	SetCullDistances(StartCullDistance: number,EndCullDistance: number): void;
	RemoveInstance(InstanceIndex: number): boolean;
	GetInstanceTransform(InstanceIndex: number,OutInstanceTransform?: Transform,bWorldSpace?: boolean): {OutInstanceTransform: Transform, $: boolean};
	GetInstancesOverlappingSphere(Center: Vector,Radius: number,bSphereInWorldSpace: boolean): number[];
	GetInstancesOverlappingBox(Box: Box,bBoxInWorldSpace: boolean): number[];
	GetInstanceCount(): number;
	ClearInstances(): void;
	BatchUpdateInstancesTransforms(StartInstanceIndex: number,NewInstancesTransforms: Transform[],bWorldSpace: boolean,bMarkRenderStateDirty: boolean,bTeleport: boolean): boolean;
	BatchUpdateInstancesTransform(StartInstanceIndex: number,NumInstances: number,NewInstancesTransform: Transform,bWorldSpace: boolean,bMarkRenderStateDirty: boolean,bTeleport: boolean): boolean;
	AddInstanceWorldSpace(WorldTransform: Transform): number;
	AddInstances(InstanceTransforms: Transform[],bShouldReturnIndices: boolean): number[];
	AddInstance(InstanceTransform: Transform): number;
	static C(Other: UObject | any): InstancedStaticMeshComponent;
}

declare class HierarchicalInstancedStaticMeshComponent extends InstancedStaticMeshComponent { 
	SortedInstances: number[];
	NumBuiltInstances: number;
	BuiltInstanceBounds: Box;
	UnbuiltInstanceBounds: Box;
	UnbuiltInstanceBoundsList: Box[];
	bEnableDensityScaling: boolean;
	OcclusionLayerNumNodes: number;
	CacheMeshExtendedBounds: BoxSphereBounds;
	bDisableCollision: boolean;
	InstanceCountToRender: number;
	static Load(ResourceName: string): HierarchicalInstancedStaticMeshComponent;
	static Find(Outer: UObject, ResourceName: string): HierarchicalInstancedStaticMeshComponent;
	static GetDefaultObject(): HierarchicalInstancedStaticMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HierarchicalInstancedStaticMeshComponent;
	RemoveInstances(InstancesToRemove: number[]): boolean;
	static C(Other: UObject | any): HierarchicalInstancedStaticMeshComponent;
}

declare class FoliageInstancedStaticMeshComponent extends HierarchicalInstancedStaticMeshComponent { 
	OnInstanceTakePointDamage: UnrealEngineMulticastDelegate<(InstanceIndex: number, Damage: number, InstigatedBy: Controller, HitLocation: Vector, ShotFromDirection: Vector, DamageType: DamageType, DamageCauser: Actor) => void>;
	OnInstanceTakeRadialDamage: UnrealEngineMulticastDelegate<(Instances: number[], Damages: number[], InstigatedBy: Controller, Origin: Vector, MaxRadius: number, DamageType: DamageType, DamageCauser: Actor) => void>;
	FoliageHiddenEditorViews: any;
	GenerationGuid: Guid;
	static Load(ResourceName: string): FoliageInstancedStaticMeshComponent;
	static Find(Outer: UObject, ResourceName: string): FoliageInstancedStaticMeshComponent;
	static GetDefaultObject(): FoliageInstancedStaticMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageInstancedStaticMeshComponent;
	static C(Other: UObject | any): FoliageInstancedStaticMeshComponent;
}

declare class FoliageStatistics extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): FoliageStatistics;
	static Find(Outer: UObject, ResourceName: string): FoliageStatistics;
	static GetDefaultObject(): FoliageStatistics;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageStatistics;
	static FoliageOverlappingSphereCount(WorldContextObject: UObject,StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
	static FoliageOverlappingBoxCount(WorldContextObject: UObject,StaticMesh: StaticMesh,Box: Box): number;
	static C(Other: UObject | any): FoliageStatistics;
}

declare type EFoliageScaling = 'Uniform' | 'Free' | 'LockXY' | 'LockXZ' | 'LockYZ' | 'EFoliageScaling_MAX';
declare var EFoliageScaling : { Uniform:'Uniform',Free:'Free',LockXY:'LockXY',LockXZ:'LockXZ',LockYZ:'LockYZ',EFoliageScaling_MAX:'EFoliageScaling_MAX', };
declare class FoliageVertexColorChannelMask { 
	UseMask: boolean;
	MaskThreshold: number;
	InvertMask: boolean;
	clone() : FoliageVertexColorChannelMask;
	static C(Other: UObject | any): FoliageVertexColorChannelMask;
}

declare type FoliageVertexColorMask = 'FOLIAGEVERTEXCOLORMASK_Disabled' | 'FOLIAGEVERTEXCOLORMASK_Red' | 'FOLIAGEVERTEXCOLORMASK_Green' | 'FOLIAGEVERTEXCOLORMASK_Blue' | 'FOLIAGEVERTEXCOLORMASK_Alpha' | 'FOLIAGEVERTEXCOLORMASK_MAX';
declare var FoliageVertexColorMask : { FOLIAGEVERTEXCOLORMASK_Disabled:'FOLIAGEVERTEXCOLORMASK_Disabled',FOLIAGEVERTEXCOLORMASK_Red:'FOLIAGEVERTEXCOLORMASK_Red',FOLIAGEVERTEXCOLORMASK_Green:'FOLIAGEVERTEXCOLORMASK_Green',FOLIAGEVERTEXCOLORMASK_Blue:'FOLIAGEVERTEXCOLORMASK_Blue',FOLIAGEVERTEXCOLORMASK_Alpha:'FOLIAGEVERTEXCOLORMASK_Alpha',FOLIAGEVERTEXCOLORMASK_MAX:'FOLIAGEVERTEXCOLORMASK_MAX', };
declare class FoliageType extends UObject { 
	UpdateGuid: Guid;
	Density: number;
	DensityAdjustmentFactor: number;
	Radius: number;
	bSingleInstanceModeOverrideRadius: boolean;
	SingleInstanceModeRadius: number;
	Scaling: EFoliageScaling;
	ScaleX: FloatInterval;
	ScaleY: FloatInterval;
	ScaleZ: FloatInterval;
	VertexColorMaskByChannel: FoliageVertexColorChannelMask;
	VertexColorMask: FoliageVertexColorMask;
	VertexColorMaskThreshold: number;
	VertexColorMaskInvert: boolean;
	ZOffset: FloatInterval;
	AlignToNormal: boolean;
	AlignMaxAngle: number;
	RandomYaw: boolean;
	RandomPitchAngle: number;
	GroundSlopeAngle: FloatInterval;
	Height: FloatInterval;
	LandscapeLayers: string[];
	MinimumLayerWeight: number;
	ExclusionLandscapeLayers: string[];
	MinimumExclusionLayerWeight: number;
	LandscapeLayer: string;
	CollisionWithWorld: boolean;
	CollisionScale: Vector;
	MeshBounds: BoxSphereBounds;
	LowBoundOriginRadius: Vector;
	Mobility: EComponentMobility;
	CullDistance: Int32Interval;
	bEnableStaticLighting: boolean;
	CastShadow: boolean;
	bAffectDynamicIndirectLighting: boolean;
	bAffectDistanceFieldLighting: boolean;
	bCastDynamicShadow: boolean;
	bCastStaticShadow: boolean;
	bCastShadowAsTwoSided: boolean;
	bReceivesDecals: boolean;
	bOverrideLightMapRes: boolean;
	OverriddenLightMapRes: number;
	LightmapType: ELightmapType;
	bUseAsOccluder: boolean;
	bVisibleInRayTracing: boolean;
	bEvaluateWorldPositionOffset: boolean;
	BodyInstance: BodyInstance;
	CustomNavigableGeometry: EHasCustomNavigableGeometry;
	LightingChannels: LightingChannels;
	bRenderCustomDepth: boolean;
	CustomDepthStencilWriteMask: ERendererStencilMask;
	CustomDepthStencilValue: number;
	TranslucencySortPriority: number;
	HiddenEditorViews: any;
	IsSelected: boolean;
	CollisionRadius: number;
	ShadeRadius: number;
	NumSteps: number;
	InitialSeedDensity: number;
	AverageSpreadDistance: number;
	SpreadVariance: number;
	SeedsPerStep: number;
	DistributionSeed: number;
	MaxInitialSeedOffset: number;
	bCanGrowInShade: boolean;
	bSpawnsInShade: boolean;
	MaxInitialAge: number;
	MaxAge: number;
	OverlapPriority: number;
	ProceduralScale: FloatInterval;
	ScaleCurve: RuntimeFloatCurve;
	ChangeCount: number;
	ReapplyDensity: boolean;
	ReapplyRadius: boolean;
	ReapplyAlignToNormal: boolean;
	ReapplyRandomYaw: boolean;
	ReapplyScaling: boolean;
	ReapplyScaleX: boolean;
	ReapplyScaleY: boolean;
	ReapplyScaleZ: boolean;
	ReapplyRandomPitchAngle: boolean;
	ReapplyGroundSlope: boolean;
	ReapplyHeight: boolean;
	ReapplyLandscapeLayers: boolean;
	ReapplyZOffset: boolean;
	ReapplyCollisionWithWorld: boolean;
	ReapplyVertexColorMask: boolean;
	bEnableDensityScaling: boolean;
	bEnableDiscardOnLoad: boolean;
	RuntimeVirtualTextures: RuntimeVirtualTexture[];
	VirtualTextureCullMips: number;
	VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
	ScaleMinX: number;
	ScaleMinY: number;
	ScaleMinZ: number;
	ScaleMaxX: number;
	ScaleMaxY: number;
	ScaleMaxZ: number;
	HeightMin: number;
	HeightMax: number;
	ZOffsetMin: number;
	ZOffsetMax: number;
	StartCullDistance: number;
	EndCullDistance: number;
	UniformScale: boolean;
	LockScaleX: boolean;
	LockScaleY: boolean;
	LockScaleZ: boolean;
	GroundSlope: number;
	MinGroundSlope: number;
	MinScale: number;
	MaxScale: number;
	static Load(ResourceName: string): FoliageType;
	static Find(Outer: UObject, ResourceName: string): FoliageType;
	static GetDefaultObject(): FoliageType;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageType;
	static C(Other: UObject | any): FoliageType;
}

declare class FoliageType_Actor extends FoliageType { 
	ActorClass: UnrealEngineClass;
	bShouldAttachToBaseComponent: boolean;
	static Load(ResourceName: string): FoliageType_Actor;
	static Find(Outer: UObject, ResourceName: string): FoliageType_Actor;
	static GetDefaultObject(): FoliageType_Actor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageType_Actor;
	static C(Other: UObject | any): FoliageType_Actor;
}

declare class FoliageType_InstancedStaticMesh extends FoliageType { 
	Mesh: StaticMesh;
	OverrideMaterials: MaterialInterface[];
	ComponentClass: UnrealEngineClass;
	static Load(ResourceName: string): FoliageType_InstancedStaticMesh;
	static Find(Outer: UObject, ResourceName: string): FoliageType_InstancedStaticMesh;
	static GetDefaultObject(): FoliageType_InstancedStaticMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageType_InstancedStaticMesh;
	static C(Other: UObject | any): FoliageType_InstancedStaticMesh;
}

declare class InstancedFoliageActor extends Actor { 
	static GetDefaultObject(): InstancedFoliageActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InstancedFoliageActor;
	static C(Other: UObject | any): InstancedFoliageActor;
}

declare type ENavDataGatheringMode = 'Default' | 'Instant' | 'Lazy' | 'ENavDataGatheringMode_MAX';
declare var ENavDataGatheringMode : { Default:'Default',Instant:'Instant',Lazy:'Lazy',ENavDataGatheringMode_MAX:'ENavDataGatheringMode_MAX', };
declare class StaticMeshActor extends Actor { 
	StaticMeshComponent: StaticMeshComponent;
	bStaticMeshReplicateMovement: boolean;
	NavigationGeometryGatheringMode: ENavDataGatheringMode;
	static GetDefaultObject(): StaticMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshActor;
	SetMobility(InMobility: EComponentMobility): void;
	static C(Other: UObject | any): StaticMeshActor;
}

declare class InteractiveFoliageActor extends StaticMeshActor { 
	CapsuleComponent: CapsuleComponent;
	TouchingActorEntryPosition: Vector;
	FoliageVelocity: Vector;
	FoliageForce: Vector;
	FoliagePosition: Vector;
	FoliageDamageImpulseScale: number;
	FoliageTouchImpulseScale: number;
	FoliageStiffness: number;
	FoliageStiffnessQuadratic: number;
	FoliageDamping: number;
	MaxDamageImpulse: number;
	MaxTouchImpulse: number;
	MaxForce: number;
	Mass: number;
	static GetDefaultObject(): InteractiveFoliageActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InteractiveFoliageActor;
	CapsuleTouched(OverlappedComp: PrimitiveComponent,Other: Actor,OtherComp: PrimitiveComponent,OtherBodyIndex: number,bFromSweep: boolean,OverlapInfo: HitResult): void;
	static C(Other: UObject | any): InteractiveFoliageActor;
}

declare class InteractiveFoliageComponent extends StaticMeshComponent { 
	static Load(ResourceName: string): InteractiveFoliageComponent;
	static Find(Outer: UObject, ResourceName: string): InteractiveFoliageComponent;
	static GetDefaultObject(): InteractiveFoliageComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InteractiveFoliageComponent;
	static C(Other: UObject | any): InteractiveFoliageComponent;
}

declare class FoliageTypeObject { 
	FoliageTypeObject: UObject;
	TypeInstance: FoliageType;
	bIsAsset: boolean;
	Type: UnrealEngineClass;
	clone() : FoliageTypeObject;
	static C(Other: UObject | any): FoliageTypeObject;
}

declare class ProceduralFoliageSpawner extends UObject { 
	RandomSeed: number;
	TileSize: number;
	NumUniqueTiles: number;
	MinimumQuadTreeSize: number;
	FoliageTypes: FoliageTypeObject[];
	static Load(ResourceName: string): ProceduralFoliageSpawner;
	static Find(Outer: UObject, ResourceName: string): ProceduralFoliageSpawner;
	static GetDefaultObject(): ProceduralFoliageSpawner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralFoliageSpawner;
	Simulate(NumSteps: number): void;
	static C(Other: UObject | any): ProceduralFoliageSpawner;
}

declare class ProceduralFoliageComponent extends ActorComponent { 
	FoliageSpawner: ProceduralFoliageSpawner;
	TileOverlap: number;
	bAllowLandscape: boolean;
	bAllowBSP: boolean;
	bAllowStaticMesh: boolean;
	bAllowTranslucent: boolean;
	bAllowFoliage: boolean;
	bShowDebugTiles: boolean;
	SpawningVolume: Volume;
	ProceduralGuid: Guid;
	static Load(ResourceName: string): ProceduralFoliageComponent;
	static Find(Outer: UObject, ResourceName: string): ProceduralFoliageComponent;
	static GetDefaultObject(): ProceduralFoliageComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralFoliageComponent;
	static C(Other: UObject | any): ProceduralFoliageComponent;
}

declare class ProceduralFoliageVolume extends Volume { 
	ProceduralComponent: ProceduralFoliageComponent;
	static GetDefaultObject(): ProceduralFoliageVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralFoliageVolume;
	static C(Other: UObject | any): ProceduralFoliageVolume;
}

declare class ProceduralFoliageBlockingVolume extends Volume { 
	ProceduralFoliageVolume: ProceduralFoliageVolume;
	static GetDefaultObject(): ProceduralFoliageBlockingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralFoliageBlockingVolume;
	static C(Other: UObject | any): ProceduralFoliageBlockingVolume;
}

declare class ProceduralFoliageInstance { 
	Rotation: Quat;
	Location: Vector;
	Age: number;
	Normal: Vector;
	Scale: number;
	Type: FoliageType;
	clone() : ProceduralFoliageInstance;
	static C(Other: UObject | any): ProceduralFoliageInstance;
}

declare class ProceduralFoliageTile extends UObject { 
	FoliageSpawner: ProceduralFoliageSpawner;
	InstancesArray: ProceduralFoliageInstance[];
	static Load(ResourceName: string): ProceduralFoliageTile;
	static Find(Outer: UObject, ResourceName: string): ProceduralFoliageTile;
	static GetDefaultObject(): ProceduralFoliageTile;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralFoliageTile;
	static C(Other: UObject | any): ProceduralFoliageTile;
}

declare class ImageWriteBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): ImageWriteBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): ImageWriteBlueprintLibrary;
	static GetDefaultObject(): ImageWriteBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageWriteBlueprintLibrary;
	static ExportToDisk(Texture: Texture,Filename: string,Options: ImageWriteOptions): void;
	static C(Other: UObject | any): ImageWriteBlueprintLibrary;
}

declare class ControlPointMeshComponent extends StaticMeshComponent { 
	bSelected: boolean;
	VirtualTextureMainPassMaxDrawDistance: number;
	static Load(ResourceName: string): ControlPointMeshComponent;
	static Find(Outer: UObject, ResourceName: string): ControlPointMeshComponent;
	static GetDefaultObject(): ControlPointMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ControlPointMeshComponent;
	static C(Other: UObject | any): ControlPointMeshComponent;
}

declare class ControlPointMeshActor extends Actor { 
	ControlPointMeshComponent: ControlPointMeshComponent;
	static GetDefaultObject(): ControlPointMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ControlPointMeshActor;
	static C(Other: UObject | any): ControlPointMeshActor;
}

declare class LandscapeSplineSegmentConnection { 
	ControlPoint: LandscapeSplineControlPoint;
	TangentLen: number;
	SocketName: string;
	clone() : LandscapeSplineSegmentConnection;
	static C(Other: UObject | any): LandscapeSplineSegmentConnection;
}

declare type LandscapeSplineMeshOrientation = 'LSMO_XUp' | 'LSMO_YUp' | 'LSMO_MAX';
declare var LandscapeSplineMeshOrientation : { LSMO_XUp:'LSMO_XUp',LSMO_YUp:'LSMO_YUp',LSMO_MAX:'LSMO_MAX', };
declare class LandscapeSplineMeshEntry { 
	Mesh: StaticMesh;
	MaterialOverrides: MaterialInterface[];
	bCenterH: boolean;
	CenterAdjust: Vector2D;
	bScaleToWidth: boolean;
	Scale: Vector;
	Orientation: LandscapeSplineMeshOrientation;
	ForwardAxis: ESplineMeshAxis;
	UpAxis: ESplineMeshAxis;
	clone() : LandscapeSplineMeshEntry;
	static C(Other: UObject | any): LandscapeSplineMeshEntry;
}

declare class LandscapeSplineInterpPoint { 
	Center: Vector;
	Left: Vector;
	Right: Vector;
	FalloffLeft: Vector;
	FalloffRight: Vector;
	LayerLeft: Vector;
	LayerRight: Vector;
	LayerFalloffLeft: Vector;
	LayerFalloffRight: Vector;
	StartEndFalloff: number;
	clone() : LandscapeSplineInterpPoint;
	static C(Other: UObject | any): LandscapeSplineInterpPoint;
}

declare class LandscapeSplineSegment extends UObject { 
	Connections: LandscapeSplineSegmentConnection;
	LayerName: string;
	bRaiseTerrain: boolean;
	bLowerTerrain: boolean;
	SplineMeshes: LandscapeSplineMeshEntry[];
	bEnableCollision: boolean;
	CollisionProfileName: string;
	bCastShadow: boolean;
	bHiddenInGame: boolean;
	bPlaceSplineMeshesInStreamingLevels: boolean;
	RandomSeed: number;
	LDMaxDrawDistance: number;
	TranslucencySortPriority: number;
	bRenderCustomDepth: boolean;
	CustomDepthStencilWriteMask: ERendererStencilMask;
	CustomDepthStencilValue: number;
	RuntimeVirtualTextures: RuntimeVirtualTexture[];
	VirtualTextureLodBias: number;
	VirtualTextureCullMips: number;
	VirtualTextureMainPassMaxDrawDistance: number;
	VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
	BodyInstance: BodyInstance;
	bSelected: boolean;
	bNavDirty: boolean;
	SplineInfo: InterpCurveVector;
	Points: LandscapeSplineInterpPoint[];
	Bounds: Box;
	LocalMeshComponents: SplineMeshComponent[];
	ForeignWorlds: World[];
	ModificationKey: Guid;
	static Load(ResourceName: string): LandscapeSplineSegment;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplineSegment;
	static GetDefaultObject(): LandscapeSplineSegment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplineSegment;
	static C(Other: UObject | any): LandscapeSplineSegment;
}

declare class LandscapeSplineConnection { 
	Segment: LandscapeSplineSegment;
	End: boolean;
	clone() : LandscapeSplineConnection;
	static C(Other: UObject | any): LandscapeSplineConnection;
}

declare class LandscapeSplineControlPoint extends UObject { 
	Location: Vector;
	Rotation: Rotator;
	Width: number;
	LayerWidthRatio: number;
	SideFalloff: number;
	LeftSideFalloffFactor: number;
	RightSideFalloffFactor: number;
	LeftSideLayerFalloffFactor: number;
	RightSideLayerFalloffFactor: number;
	EndFalloff: number;
	SegmentMeshOffset: number;
	LayerName: string;
	bRaiseTerrain: boolean;
	bLowerTerrain: boolean;
	Mesh: StaticMesh;
	MaterialOverrides: MaterialInterface[];
	MeshScale: Vector;
	bEnableCollision: boolean;
	CollisionProfileName: string;
	bCastShadow: boolean;
	bHiddenInGame: boolean;
	bPlaceSplineMeshesInStreamingLevels: boolean;
	LDMaxDrawDistance: number;
	TranslucencySortPriority: number;
	bRenderCustomDepth: boolean;
	CustomDepthStencilWriteMask: ERendererStencilMask;
	CustomDepthStencilValue: number;
	RuntimeVirtualTextures: RuntimeVirtualTexture[];
	VirtualTextureLodBias: number;
	VirtualTextureCullMips: number;
	VirtualTextureMainPassMaxDrawDistance: number;
	VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
	BodyInstance: BodyInstance;
	bSelected: boolean;
	bNavDirty: boolean;
	ConnectedSegments: LandscapeSplineConnection[];
	Points: LandscapeSplineInterpPoint[];
	Bounds: Box;
	LocalMeshComponent: ControlPointMeshComponent;
	ForeignWorld: World;
	ModificationKey: Guid;
	static Load(ResourceName: string): LandscapeSplineControlPoint;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplineControlPoint;
	static GetDefaultObject(): LandscapeSplineControlPoint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplineControlPoint;
	static C(Other: UObject | any): LandscapeSplineControlPoint;
}

declare class LandscapeSplinesComponent extends PrimitiveComponent { 
	SplineResolution: number;
	SplineColor: Color;
	ControlPointSprite: Texture2D;
	SplineEditorMesh: StaticMesh;
	bShowSplineEditorMesh: boolean;
	ControlPoints: LandscapeSplineControlPoint[];
	Segments: LandscapeSplineSegment[];
	ForeignWorldSplineDataMap: any;
	CookedForeignMeshComponents: MeshComponent[];
	static Load(ResourceName: string): LandscapeSplinesComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplinesComponent;
	static GetDefaultObject(): LandscapeSplinesComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplinesComponent;
	GetSplineMeshComponents(): SplineMeshComponent[];
	static C(Other: UObject | any): LandscapeSplinesComponent;
}

declare type ELandscapeLODFalloff = 'Linear' | 'SquareRoot' | 'ELandscapeLODFalloff_MAX';
declare var ELandscapeLODFalloff : { Linear:'Linear',SquareRoot:'SquareRoot',ELandscapeLODFalloff_MAX:'ELandscapeLODFalloff_MAX', };
declare type ELandscapeLayerDisplayMode = 'Default' | 'Alphabetical' | 'UserSpecific' | 'ELandscapeLayerDisplayMode_MAX';
declare var ELandscapeLayerDisplayMode : { Default:'Default',Alphabetical:'Alphabetical',UserSpecific:'UserSpecific',ELandscapeLayerDisplayMode_MAX:'ELandscapeLayerDisplayMode_MAX', };
declare class LandscapeProxyMaterialOverride { 
	LODIndex: PerPlatformInt;
	Material: MaterialInterface;
	clone() : LandscapeProxyMaterialOverride;
	static C(Other: UObject | any): LandscapeProxyMaterialOverride;
}

declare class LandscapeComponentMaterialOverride { 
	LODIndex: PerPlatformInt;
	Material: MaterialInterface;
	clone() : LandscapeComponentMaterialOverride;
	static C(Other: UObject | any): LandscapeComponentMaterialOverride;
}

declare class LandscapeWeightmapUsage extends UObject { 
	ChannelUsage: LandscapeComponent;
	LayerGuid: Guid;
	static Load(ResourceName: string): LandscapeWeightmapUsage;
	static Find(Outer: UObject, ResourceName: string): LandscapeWeightmapUsage;
	static GetDefaultObject(): LandscapeWeightmapUsage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeWeightmapUsage;
	static C(Other: UObject | any): LandscapeWeightmapUsage;
}

declare type ESplineModulationColorMask = 'Red' | 'Green' | 'Blue' | 'Alpha' | 'ESplineModulationColorMask_MAX';
declare var ESplineModulationColorMask : { Red:'Red',Green:'Green',Blue:'Blue',Alpha:'Alpha',ESplineModulationColorMask_MAX:'ESplineModulationColorMask_MAX', };
declare class LandscapeLayerInfoObject extends UObject { 
	LayerName: string;
	PhysMaterial: PhysicalMaterial;
	Hardness: number;
	MinimumCollisionRelevanceWeight: number;
	bNoWeightBlend: boolean;
	SplineFalloffModulationTexture: Texture2D;
	SplineFalloffModulationColorMask: ESplineModulationColorMask;
	SplineFalloffModulationTiling: number;
	SplineFalloffModulationBias: number;
	SplineFalloffModulationScale: number;
	IsReferencedFromLoadedData: boolean;
	LayerUsageDebugColor: LinearColor;
	static Load(ResourceName: string): LandscapeLayerInfoObject;
	static Find(Outer: UObject, ResourceName: string): LandscapeLayerInfoObject;
	static GetDefaultObject(): LandscapeLayerInfoObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeLayerInfoObject;
	static C(Other: UObject | any): LandscapeLayerInfoObject;
}

declare class WeightmapLayerAllocationInfo { 
	LayerInfo: LandscapeLayerInfoObject;
	WeightmapTextureIndex: number;
	WeightmapTextureChannel: number;
	clone() : WeightmapLayerAllocationInfo;
	static C(Other: UObject | any): WeightmapLayerAllocationInfo;
}

declare class LandscapeLODStreamingProxy extends StreamableRenderAsset { 
	static Load(ResourceName: string): LandscapeLODStreamingProxy;
	static Find(Outer: UObject, ResourceName: string): LandscapeLODStreamingProxy;
	static GetDefaultObject(): LandscapeLODStreamingProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeLODStreamingProxy;
	static C(Other: UObject | any): LandscapeLODStreamingProxy;
}

declare class LandscapeEditToolRenderData { 
	ToolMaterial: MaterialInterface;
	GizmoMaterial: MaterialInterface;
	SelectedType: number;
	DebugChannelR: number;
	DebugChannelG: number;
	DebugChannelB: number;
	DataTexture: Texture2D;
	LayerContributionTexture: Texture2D;
	DirtyTexture: Texture2D;
	clone() : LandscapeEditToolRenderData;
	static C(Other: UObject | any): LandscapeEditToolRenderData;
}

declare class LandscapeComponent extends PrimitiveComponent { 
	SectionBaseX: number;
	SectionBaseY: number;
	ComponentSizeQuads: number;
	SubsectionSizeQuads: number;
	NumSubsections: number;
	OverrideMaterial: MaterialInterface;
	OverrideHoleMaterial: MaterialInterface;
	OverrideMaterials: LandscapeComponentMaterialOverride[];
	MaterialInstance: MaterialInstanceConstant;
	MaterialInstances: MaterialInstanceConstant[];
	MaterialInstancesDynamic: MaterialInstanceDynamic[];
	LODIndexToMaterialIndex: any[];
	MaterialIndexToDisabledTessellationMaterial: any[];
	XYOffsetmapTexture: Texture2D;
	WeightmapScaleBias: Vector4;
	WeightmapSubsectionOffset: number;
	HeightmapScaleBias: Vector4;
	CachedLocalBox: Box;
	CollisionComponent: any;
	LightingGuid: Guid;
	LayersData: any;
	WeightmapTexturesUsage: LandscapeWeightmapUsage[];
	LayerUpdateFlagPerMode: any;
	bPendingCollisionDataUpdate: boolean;
	bPendingLayerCollisionDataUpdate: boolean;
	HeightmapTexture: Texture2D;
	WeightmapLayerAllocations: WeightmapLayerAllocationInfo[];
	WeightmapTextures: Texture2D[];
	LODStreamingProxy: LandscapeLODStreamingProxy;
	MapBuildDataId: Guid;
	IrrelevantLights: Guid[];
	CollisionMipLevel: number;
	SimpleCollisionMipLevel: number;
	NegativeZBoundsExtension: number;
	PositiveZBoundsExtension: number;
	StaticLightingResolution: number;
	ForcedLOD: number;
	LODBias: number;
	StateId: Guid;
	BakedTextureMaterialGuid: Guid;
	GIBakedBaseColorTexture: Texture2D;
	LightingLODBias: number;
	LayerWhitelist: LandscapeLayerInfoObject[];
	EditToolRenderData: LandscapeEditToolRenderData;
	MobileDataSourceHash: Guid;
	MaterialPerLOD: any;
	SplineHash: any;
	PhysicalMaterialHash: any;
	MobileBlendableLayerMask: number;
	MobileMaterialInterface: MaterialInterface;
	MobileMaterialInterfaces: MaterialInterface[];
	MobileWeightmapTextures: Texture2D[];
	MobileCombinationMaterialInstances: MaterialInstanceConstant[];
	MobileCombinationMaterialInstance: MaterialInstanceConstant;
	static Load(ResourceName: string): LandscapeComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeComponent;
	static GetDefaultObject(): LandscapeComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeComponent;
	GetMaterialInstanceDynamic(InIndex: number): MaterialInstanceDynamic;
	EditorGetPaintLayerWeightByNameAtLocation(InLocation: Vector,InPaintLayerName: string): number;
	EditorGetPaintLayerWeightAtLocation(InLocation: Vector,PaintLayer: LandscapeLayerInfoObject): number;
	static C(Other: UObject | any): LandscapeComponent;
}

declare class LandscapeHeightfieldCollisionComponent extends PrimitiveComponent { 
	ComponentLayerInfos: LandscapeLayerInfoObject[];
	SectionBaseX: number;
	SectionBaseY: number;
	CollisionSizeQuads: number;
	CollisionScale: number;
	SimpleCollisionSizeQuads: number;
	CollisionQuadFlags: number[];
	HeightfieldGuid: Guid;
	CachedLocalBox: Box;
	RenderComponent: any;
	PhysicalMaterialRenderObjects: PhysicalMaterial[];
	CookedPhysicalMaterials: PhysicalMaterial[];
	static Load(ResourceName: string): LandscapeHeightfieldCollisionComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeHeightfieldCollisionComponent;
	static GetDefaultObject(): LandscapeHeightfieldCollisionComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeHeightfieldCollisionComponent;
	GetRenderComponent(): LandscapeComponent;
	static C(Other: UObject | any): LandscapeHeightfieldCollisionComponent;
}

declare class LandscapeEditorLayerSettings { 
	LayerInfoObj: LandscapeLayerInfoObject;
	ReimportLayerFilePath: string;
	clone() : LandscapeEditorLayerSettings;
	static C(Other: UObject | any): LandscapeEditorLayerSettings;
}

declare class LandscapeProxy extends Actor { 
	SplineComponent: LandscapeSplinesComponent;
	LandscapeGuid: Guid;
	LandscapeSectionOffset: IntPoint;
	MaxLODLevel: number;
	LODDistanceFactor: number;
	LODFalloff: ELandscapeLODFalloff;
	ComponentScreenSizeToUseSubSections: number;
	LOD0ScreenSize: number;
	LOD0DistributionSetting: number;
	LODDistributionSetting: number;
	TessellationComponentScreenSize: number;
	UseTessellationComponentScreenSizeFalloff: boolean;
	TessellationComponentScreenSizeFalloff: number;
	OccluderGeometryLOD: number;
	ExportLOD: number;
	TargetDisplayOrderList: string[];
	TargetDisplayOrder: ELandscapeLayerDisplayMode;
	StaticLightingLOD: number;
	DefaultPhysMaterial: PhysicalMaterial;
	StreamingDistanceMultiplier: number;
	LandscapeMaterial: MaterialInterface;
	LandscapeHoleMaterial: MaterialInterface;
	LandscapeMaterialsOverride: LandscapeProxyMaterialOverride[];
	PreEditLandscapeMaterial: MaterialInterface;
	PreEditLandscapeHoleMaterial: MaterialInterface;
	PreEditLandscapeMaterialsOverride: LandscapeProxyMaterialOverride[];
	bIsPerformingInteractiveActionOnLandscapeMaterialOverride: boolean;
	bMeshHoles: boolean;
	MeshHolesMaxLod: number;
	RuntimeVirtualTextures: RuntimeVirtualTexture[];
	VirtualTextureNumLods: number;
	VirtualTextureLodBias: number;
	VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
	NegativeZBoundsExtension: number;
	PositiveZBoundsExtension: number;
	LandscapeComponents: LandscapeComponent[];
	CollisionComponents: LandscapeHeightfieldCollisionComponent[];
	FoliageComponents: HierarchicalInstancedStaticMeshComponent[];
	bHasLandscapeGrass: boolean;
	StaticLightingResolution: number;
	CastShadow: boolean;
	bCastDynamicShadow: boolean;
	bCastStaticShadow: boolean;
	bCastFarShadow: boolean;
	bCastHiddenShadow: boolean;
	bCastShadowAsTwoSided: boolean;
	bAffectDistanceFieldLighting: boolean;
	LightingChannels: LightingChannels;
	bUseMaterialPositionOffsetInStaticLighting: boolean;
	bRenderCustomDepth: boolean;
	CustomDepthStencilWriteMask: ERendererStencilMask;
	CustomDepthStencilValue: number;
	LDMaxDrawDistance: number;
	bIsMovingToLevel: boolean;
	LightmassSettings: LightmassPrimitiveSettings;
	CollisionMipLevel: number;
	SimpleCollisionMipLevel: number;
	CollisionThickness: number;
	BodyInstance: BodyInstance;
	bGenerateOverlapEvents: boolean;
	bBakeMaterialPositionOffsetIntoCollision: boolean;
	EditorCachedLayerInfos: LandscapeLayerInfoObject[];
	ReimportHeightmapFilePath: string;
	ReimportDestinationLayerGuid: Guid;
	EditorLayerSettings: LandscapeEditorLayerSettings[];
	ComponentSizeQuads: number;
	SubsectionSizeQuads: number;
	NumSubsections: number;
	bUsedForNavigation: boolean;
	bFillCollisionUnderLandscapeForNavmesh: boolean;
	bUseDynamicMaterialInstance: boolean;
	NavigationGeometryGatheringMode: ENavDataGatheringMode;
	MaxPaintedLayersPerComponent: number;
	bUseLandscapeForCullingInvisibleHLODVertices: boolean;
	bHasLayersContent: boolean;
	WeightmapUsageMap: any;
	static GetDefaultObject(): LandscapeProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeProxy;
	SetLandscapeMaterialVectorParameterValue(ParameterName: string,Value: LinearColor): void;
	SetLandscapeMaterialTextureParameterValue(ParameterName: string,Value: Texture): void;
	SetLandscapeMaterialScalarParameterValue(ParameterName: string,Value: number): void;
	LandscapeImportWeightmapFromRenderTarget(InRenderTarget: TextureRenderTarget2D,InLayerName: string): boolean;
	LandscapeImportHeightmapFromRenderTarget(InRenderTarget: TextureRenderTarget2D,InImportHeightFromRGChannel: boolean): boolean;
	LandscapeExportWeightmapToRenderTarget(InRenderTarget: TextureRenderTarget2D,InLayerName: string): boolean;
	LandscapeExportHeightmapToRenderTarget(InRenderTarget: TextureRenderTarget2D,InExportHeightIntoRGChannel: boolean,InExportLandscapeProxies: boolean): boolean;
	EditorSetLandscapeMaterial(NewLandscapeMaterial: MaterialInterface): void;
	EditorApplySpline(InSplineComponent: SplineComponent,StartWidth: number,EndWidth: number,StartSideFalloff: number,EndSideFalloff: number,StartRoll: number,EndRoll: number,NumSubdivisions: number,bRaiseHeights: boolean,bLowerHeights: boolean,PaintLayer: LandscapeLayerInfoObject,EditLayerName: string): void;
	ChangeUseTessellationComponentScreenSizeFalloff(InComponentScreenSizeToUseSubSections: boolean): void;
	ChangeTessellationComponentScreenSizeFalloff(InUseTessellationComponentScreenSizeFalloff: number): void;
	ChangeTessellationComponentScreenSize(InTessellationComponentScreenSize: number): void;
	ChangeLODDistanceFactor(InLODDistanceFactor: number): void;
	ChangeComponentScreenSizeToUseSubSections(InComponentScreenSizeToUseSubSections: number): void;
	static C(Other: UObject | any): LandscapeProxy;
}

declare type ELandscapeBlendMode = 'LSBM_AdditiveBlend' | 'LSBM_AlphaBlend' | 'LSBM_MAX';
declare var ELandscapeBlendMode : { LSBM_AdditiveBlend:'LSBM_AdditiveBlend',LSBM_AlphaBlend:'LSBM_AlphaBlend',LSBM_MAX:'LSBM_MAX', };
declare class LandscapeBlueprintBrushBase extends Actor { 
	OwningLandscape: Landscape;
	AffectHeightmap: boolean;
	AffectWeightmap: boolean;
	AffectedWeightmapLayers: string[];
	bIsVisible: boolean;
	static GetDefaultObject(): LandscapeBlueprintBrushBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeBlueprintBrushBase;
	RequestLandscapeUpdate(): void;
	Render(InIsHeightmap: boolean,InCombinedResult: TextureRenderTarget2D,InWeightmapLayerName: string): TextureRenderTarget2D;
	Initialize(InLandscapeTransform: Transform,InLandscapeSize: IntPoint,InLandscapeRenderTargetSize: IntPoint): void;
	GetBlueprintRenderDependencies(OutStreamableAssets?: UObject[]): {OutStreamableAssets: UObject[]};
	static C(Other: UObject | any): LandscapeBlueprintBrushBase;
}

declare class LandscapeLayerBrush { 
	BlueprintBrush: LandscapeBlueprintBrushBase;
	clone() : LandscapeLayerBrush;
	static C(Other: UObject | any): LandscapeLayerBrush;
}

declare class LandscapeLayer { 
	Guid: Guid;
	Name: string;
	bVisible: boolean;
	bLocked: boolean;
	HeightmapAlpha: number;
	WeightmapAlpha: number;
	BlendMode: ELandscapeBlendMode;
	Brushes: LandscapeLayerBrush[];
	WeightmapLayerAllocationBlend: any;
	clone() : LandscapeLayer;
	static C(Other: UObject | any): LandscapeLayer;
}

declare class LandscapeInfoLayerSettings { 
	LayerInfoObj: LandscapeLayerInfoObject;
	LayerName: string;
	ThumbnailMIC: MaterialInstanceConstant;
	Owner: LandscapeProxy;
	DebugColorChannel: number;
	bValid: boolean;
	clone() : LandscapeInfoLayerSettings;
	static C(Other: UObject | any): LandscapeInfoLayerSettings;
}

declare class LandscapeStreamingProxy extends LandscapeProxy { 
	LandscapeActor: any;
	static GetDefaultObject(): LandscapeStreamingProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeStreamingProxy;
	static C(Other: UObject | any): LandscapeStreamingProxy;
}

declare type ELandscapeLayerPaintingRestriction = 'None' | 'UseMaxLayers' | 'ExistingOnly' | 'UseComponentWhitelist' | 'ELandscapeLayerPaintingRestriction_MAX';
declare var ELandscapeLayerPaintingRestriction : { None:'None',UseMaxLayers:'UseMaxLayers',ExistingOnly:'ExistingOnly',UseComponentWhitelist:'UseComponentWhitelist',ELandscapeLayerPaintingRestriction_MAX:'ELandscapeLayerPaintingRestriction_MAX', };
declare class LandscapeInfo extends UObject { 
	LandscapeActor: any;
	LandscapeGuid: Guid;
	ComponentSizeQuads: number;
	SubsectionSizeQuads: number;
	ComponentNumSubsections: number;
	DrawScale: Vector;
	Layers: LandscapeInfoLayerSettings[];
	Proxies: LandscapeStreamingProxy[];
	static Load(ResourceName: string): LandscapeInfo;
	static Find(Outer: UObject, ResourceName: string): LandscapeInfo;
	static GetDefaultObject(): LandscapeInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeInfo;
	static C(Other: UObject | any): LandscapeInfo;
	GetAlphamapDataToMemory(LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	GetHeightmapDataToMemory(MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	GetLandscapeExtent(MinX?: number,MinY?: number,MaxX?: number,MaxY?: number): {MinX: number, MinY: number, MaxX: number, MaxY: number, $: boolean};
	GetLayerInfoByName(LayerName: string,Owner: LandscapeProxy): LandscapeLayerInfoObject;
	SetAlphamapDataFromMemory(LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number,PaintingRestriction: ELandscapeLayerPaintingRestriction): void;
	SetHeightmapDataFromMemory(MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetAlphamapDataToMemory(LandscapeInfo: LandscapeInfo,LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetHeightmapDataToMemory(LandscapeInfo: LandscapeInfo,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetLandscapeExtent(LandscapeInfo: LandscapeInfo,MinX?: number,MinY?: number,MaxX?: number,MaxY?: number): {MinX: number, MinY: number, MaxX: number, MaxY: number, $: boolean};
	static GetLayerInfoByName(LandscapeInfo: LandscapeInfo,LayerName: string,Owner: LandscapeProxy): LandscapeLayerInfoObject;
	static SetAlphamapDataFromMemory(LandscapeInfo: LandscapeInfo,LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number,PaintingRestriction: ELandscapeLayerPaintingRestriction): void;
	static SetHeightmapDataFromMemory(LandscapeInfo: LandscapeInfo,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
}

declare class Landscape extends LandscapeProxy { 
	bCanHaveLayersContent: boolean;
	LandscapeSplinesTargetLayerGuid: Guid;
	LandscapeLayers: LandscapeLayer[];
	HeightmapRTList: TextureRenderTarget2D[];
	WeightmapRTList: TextureRenderTarget2D[];
	LandscapeSplinesAffectedComponents: any;
	bLandscapeLayersAreInitialized: boolean;
	WasCompilingShaders: boolean;
	LayerContentUpdateModes: any;
	bSplineLayerUpdateRequested: boolean;
	static GetDefaultObject(): Landscape;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Landscape;
	static C(Other: UObject | any): Landscape;
	GetLandscapeInfo(bSpawnNewActor: boolean): LandscapeInfo;
	static GetLandscapeInfo(Landscape: Landscape,bSpawnNewActor: boolean): LandscapeInfo;
}

declare class LandscapeGizmoActor extends Actor { 
	Width: number;
	Height: number;
	LengthZ: number;
	MarginZ: number;
	MinRelativeZ: number;
	RelativeScaleZ: number;
	TargetLandscapeInfo: LandscapeInfo;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): LandscapeGizmoActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGizmoActor;
	static C(Other: UObject | any): LandscapeGizmoActor;
}

declare type ELandscapeGizmoType = 'LGT_None' | 'LGT_Height' | 'LGT_Weight' | 'LGT_MAX';
declare var ELandscapeGizmoType : { LGT_None:'LGT_None',LGT_Height:'LGT_Height',LGT_Weight:'LGT_Weight',LGT_MAX:'LGT_MAX', };
declare class LandscapeGizmoActiveActor extends LandscapeGizmoActor { 
	DataType: ELandscapeGizmoType;
	GizmoTexture: Texture2D;
	TextureScale: Vector2D;
	SampledHeight: Vector[];
	SampledNormal: Vector[];
	SampleSizeX: number;
	SampleSizeY: number;
	CachedWidth: number;
	CachedHeight: number;
	CachedScaleXY: number;
	FrustumVerts: Vector;
	GizmoMaterial: Material;
	GizmoDataMaterial: MaterialInstance;
	GizmoMeshMaterial: Material;
	LayerInfos: LandscapeLayerInfoObject[];
	bSnapToLandscapeGrid: boolean;
	UnsnappedRotation: Rotator;
	static GetDefaultObject(): LandscapeGizmoActiveActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGizmoActiveActor;
	static C(Other: UObject | any): LandscapeGizmoActiveActor;
}

declare class LandscapeGizmoRenderComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): LandscapeGizmoRenderComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeGizmoRenderComponent;
	static GetDefaultObject(): LandscapeGizmoRenderComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGizmoRenderComponent;
	static C(Other: UObject | any): LandscapeGizmoRenderComponent;
}

declare class LandscapeInfoMap extends UObject { 
	static Load(ResourceName: string): LandscapeInfoMap;
	static Find(Outer: UObject, ResourceName: string): LandscapeInfoMap;
	static GetDefaultObject(): LandscapeInfoMap;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeInfoMap;
	static C(Other: UObject | any): LandscapeInfoMap;
}

declare class LandscapeMaterialTextureStreamingInfo { 
	TextureName: string;
	TexelFactor: number;
	clone() : LandscapeMaterialTextureStreamingInfo;
	static C(Other: UObject | any): LandscapeMaterialTextureStreamingInfo;
}

declare class LandscapeMaterialInstanceConstant extends MaterialInstanceConstant { 
	TextureStreamingInfo: LandscapeMaterialTextureStreamingInfo[];
	bIsLayerThumbnail: boolean;
	bDisableTessellation: boolean;
	bMobile: boolean;
	bEditorToolUsage: boolean;
	static Load(ResourceName: string): LandscapeMaterialInstanceConstant;
	static Find(Outer: UObject, ResourceName: string): LandscapeMaterialInstanceConstant;
	static GetDefaultObject(): LandscapeMaterialInstanceConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMaterialInstanceConstant;
	static C(Other: UObject | any): LandscapeMaterialInstanceConstant;
}

declare class LandscapeMeshCollisionComponent extends LandscapeHeightfieldCollisionComponent { 
	MeshGuid: Guid;
	static Load(ResourceName: string): LandscapeMeshCollisionComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeMeshCollisionComponent;
	static GetDefaultObject(): LandscapeMeshCollisionComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMeshCollisionComponent;
	static C(Other: UObject | any): LandscapeMeshCollisionComponent;
}

declare class LandscapeMeshProxyComponent extends StaticMeshComponent { 
	LandscapeGuid: Guid;
	ProxyComponentBases: IntPoint[];
	ProxyLOD: any;
	static Load(ResourceName: string): LandscapeMeshProxyComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeMeshProxyComponent;
	static GetDefaultObject(): LandscapeMeshProxyComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMeshProxyComponent;
	static C(Other: UObject | any): LandscapeMeshProxyComponent;
}

declare class LandscapeMeshProxyActor extends Actor { 
	LandscapeMeshProxyComponent: LandscapeMeshProxyComponent;
	static GetDefaultObject(): LandscapeMeshProxyActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMeshProxyActor;
	static C(Other: UObject | any): LandscapeMeshProxyActor;
}

declare class LandscapeSettings extends DeveloperSettings { 
	MaxNumberOfLayers: number;
	static Load(ResourceName: string): LandscapeSettings;
	static Find(Outer: UObject, ResourceName: string): LandscapeSettings;
	static GetDefaultObject(): LandscapeSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSettings;
	static C(Other: UObject | any): LandscapeSettings;
}

declare class LandscapeSubsystem extends TickableWorldSubsystem { 
	static Load(ResourceName: string): LandscapeSubsystem;
	static Find(Outer: UObject, ResourceName: string): LandscapeSubsystem;
	static GetDefaultObject(): LandscapeSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSubsystem;
	static C(Other: UObject | any): LandscapeSubsystem;
}

declare class MaterialExpressionCustomOutput extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionCustomOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCustomOutput;
	static GetDefaultObject(): MaterialExpressionCustomOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCustomOutput;
	static C(Other: UObject | any): MaterialExpressionCustomOutput;
}

declare class GrassInput { 
	Name: string;
	GrassType: LandscapeGrassType;
	Input: ExpressionInput;
	clone() : GrassInput;
	static C(Other: UObject | any): GrassInput;
}

declare class MaterialExpressionLandscapeGrassOutput extends MaterialExpressionCustomOutput { 
	GrassTypes: GrassInput[];
	static Load(ResourceName: string): MaterialExpressionLandscapeGrassOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeGrassOutput;
	static GetDefaultObject(): MaterialExpressionLandscapeGrassOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeGrassOutput;
	static C(Other: UObject | any): MaterialExpressionLandscapeGrassOutput;
}

declare type ELandscapeLayerBlendType = 'LB_WeightBlend' | 'LB_AlphaBlend' | 'LB_HeightBlend' | 'LB_MAX';
declare var ELandscapeLayerBlendType : { LB_WeightBlend:'LB_WeightBlend',LB_AlphaBlend:'LB_AlphaBlend',LB_HeightBlend:'LB_HeightBlend',LB_MAX:'LB_MAX', };
declare class LayerBlendInput { 
	LayerName: string;
	BlendType: ELandscapeLayerBlendType;
	LayerInput: ExpressionInput;
	HeightInput: ExpressionInput;
	PreviewWeight: number;
	ConstLayerInput: Vector;
	ConstHeightInput: number;
	clone() : LayerBlendInput;
	static C(Other: UObject | any): LayerBlendInput;
}

declare class MaterialExpressionLandscapeLayerBlend extends MaterialExpression { 
	Layers: LayerBlendInput[];
	ExpressionGUID: Guid;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerBlend;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerBlend;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerBlend;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerBlend;
	static C(Other: UObject | any): MaterialExpressionLandscapeLayerBlend;
}

declare type ETerrainCoordMappingType = 'TCMT_Auto' | 'TCMT_XY' | 'TCMT_XZ' | 'TCMT_YZ' | 'TCMT_MAX';
declare var ETerrainCoordMappingType : { TCMT_Auto:'TCMT_Auto',TCMT_XY:'TCMT_XY',TCMT_XZ:'TCMT_XZ',TCMT_YZ:'TCMT_YZ',TCMT_MAX:'TCMT_MAX', };
declare type ELandscapeCustomizedCoordType = 'LCCT_None' | 'LCCT_CustomUV0' | 'LCCT_CustomUV1' | 'LCCT_CustomUV2' | 'LCCT_WeightMapUV' | 'LCCT_MAX';
declare var ELandscapeCustomizedCoordType : { LCCT_None:'LCCT_None',LCCT_CustomUV0:'LCCT_CustomUV0',LCCT_CustomUV1:'LCCT_CustomUV1',LCCT_CustomUV2:'LCCT_CustomUV2',LCCT_WeightMapUV:'LCCT_WeightMapUV',LCCT_MAX:'LCCT_MAX', };
declare class MaterialExpressionLandscapeLayerCoords extends MaterialExpression { 
	MappingType: ETerrainCoordMappingType;
	CustomUVType: ELandscapeCustomizedCoordType;
	MappingScale: number;
	MappingRotation: number;
	MappingPanU: number;
	MappingPanV: number;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerCoords;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerCoords;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerCoords;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerCoords;
	static C(Other: UObject | any): MaterialExpressionLandscapeLayerCoords;
}

declare class MaterialExpressionLandscapeLayerSample extends MaterialExpression { 
	ParameterName: string;
	PreviewWeight: number;
	ExpressionGUID: Guid;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerSample;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerSample;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerSample;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerSample;
	static C(Other: UObject | any): MaterialExpressionLandscapeLayerSample;
}

declare class MaterialExpressionLandscapeLayerSwitch extends MaterialExpression { 
	LayerUsed: ExpressionInput;
	LayerNotUsed: ExpressionInput;
	ParameterName: string;
	PreviewUsed: boolean;
	ExpressionGUID: Guid;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerSwitch;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerSwitch;
	static C(Other: UObject | any): MaterialExpressionLandscapeLayerSwitch;
}

declare class MaterialExpressionLandscapeLayerWeight extends MaterialExpression { 
	Base: ExpressionInput;
	Layer: ExpressionInput;
	ParameterName: string;
	PreviewWeight: number;
	ConstBase: Vector;
	ExpressionGUID: Guid;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerWeight;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerWeight;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerWeight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerWeight;
	static C(Other: UObject | any): MaterialExpressionLandscapeLayerWeight;
}

declare class PhysicalMaterialInput { 
	PhysicalMaterial: PhysicalMaterial;
	Input: ExpressionInput;
	clone() : PhysicalMaterialInput;
	static C(Other: UObject | any): PhysicalMaterialInput;
}

declare class MaterialExpressionLandscapePhysicalMaterialOutput extends MaterialExpressionCustomOutput { 
	Inputs: PhysicalMaterialInput[];
	static Load(ResourceName: string): MaterialExpressionLandscapePhysicalMaterialOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapePhysicalMaterialOutput;
	static GetDefaultObject(): MaterialExpressionLandscapePhysicalMaterialOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapePhysicalMaterialOutput;
	static C(Other: UObject | any): MaterialExpressionLandscapePhysicalMaterialOutput;
}

declare class MaterialExpressionLandscapeVisibilityMask extends MaterialExpression { 
	ExpressionGUID: Guid;
	static Load(ResourceName: string): MaterialExpressionLandscapeVisibilityMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeVisibilityMask;
	static GetDefaultObject(): MaterialExpressionLandscapeVisibilityMask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeVisibilityMask;
	static C(Other: UObject | any): MaterialExpressionLandscapeVisibilityMask;
}

declare class ActorChannel extends Channel { 
	Actor: Actor;
	CreateSubObjects: UObject[];
	static Load(ResourceName: string): ActorChannel;
	static Find(Outer: UObject, ResourceName: string): ActorChannel;
	static GetDefaultObject(): ActorChannel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorChannel;
	static C(Other: UObject | any): ActorChannel;
}

declare type EBlendSpaceAxis = 'BSA_None' | 'BSA_X' | 'BSA_Y' | 'BSA_Max';
declare var EBlendSpaceAxis : { BSA_None:'BSA_None',BSA_X:'BSA_X',BSA_Y:'BSA_Y',BSA_Max:'BSA_Max', };
declare class BlendSpace extends BlendSpaceBase { 
	AxisToScaleAnimation: EBlendSpaceAxis;
	static Load(ResourceName: string): BlendSpace;
	static Find(Outer: UObject, ResourceName: string): BlendSpace;
	static GetDefaultObject(): BlendSpace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpace;
	static C(Other: UObject | any): BlendSpace;
}

declare class AimOffsetBlendSpace extends BlendSpace { 
	static Load(ResourceName: string): AimOffsetBlendSpace;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpace;
	static GetDefaultObject(): AimOffsetBlendSpace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpace;
	static C(Other: UObject | any): AimOffsetBlendSpace;
}

declare class BlendSpace1D extends BlendSpaceBase { 
	bDisplayEditorVertically: boolean;
	bScaleAnimation: boolean;
	static Load(ResourceName: string): BlendSpace1D;
	static Find(Outer: UObject, ResourceName: string): BlendSpace1D;
	static GetDefaultObject(): BlendSpace1D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpace1D;
	static C(Other: UObject | any): BlendSpace1D;
}

declare class AimOffsetBlendSpace1D extends BlendSpace1D { 
	static Load(ResourceName: string): AimOffsetBlendSpace1D;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpace1D;
	static GetDefaultObject(): AimOffsetBlendSpace1D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpace1D;
	static C(Other: UObject | any): AimOffsetBlendSpace1D;
}

declare class AmbientSound extends Actor { 
	AudioComponent: AudioComponent;
	static GetDefaultObject(): AmbientSound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AmbientSound;
	Stop(): void;
	Play(StartTime: number): void;
	FadeOut(FadeOutDuration: number,FadeVolumeLevel: number): void;
	FadeIn(FadeInDuration: number,FadeVolumeLevel: number): void;
	AdjustVolume(AdjustVolumeDuration: number,AdjustVolumeLevel: number): void;
	static C(Other: UObject | any): AmbientSound;
}

declare class CustomAttributeSetting { 
	Name: string;
	Meaning: string;
	clone() : CustomAttributeSetting;
	static C(Other: UObject | any): CustomAttributeSetting;
}

declare type ECustomAttributeBlendType = 'Override' | 'Blend' | 'ECustomAttributeBlendType_MAX';
declare var ECustomAttributeBlendType : { Override:'Override',Blend:'Blend',ECustomAttributeBlendType_MAX:'ECustomAttributeBlendType_MAX', };
declare class AnimationSettings extends DeveloperSettings { 
	CompressCommandletVersion: number;
	KeyEndEffectorsMatchNameArray: string[];
	ForceRecompression: boolean;
	bForceBelowThreshold: boolean;
	bFirstRecompressUsingCurrentOrDefault: boolean;
	bRaiseMaxErrorToExisting: boolean;
	bEnablePerformanceLog: boolean;
	bStripAnimationDataOnDedicatedServer: boolean;
	bTickAnimationOnSkeletalMeshInit: boolean;
	BoneCustomAttributesNames: CustomAttributeSetting[];
	BoneNamesWithCustomAttributes: string[];
	AttributeBlendModes: any;
	DefaultAttributeBlendMode: ECustomAttributeBlendType;
	static Load(ResourceName: string): AnimationSettings;
	static Find(Outer: UObject, ResourceName: string): AnimationSettings;
	static GetDefaultObject(): AnimationSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationSettings;
	static C(Other: UObject | any): AnimationSettings;
}

declare class BakedStateExitTransition { 
	CanTakeDelegateIndex: number;
	CustomResultNodeIndex: number;
	TransitionIndex: number;
	bDesiredTransitionReturnValue: boolean;
	bAutomaticRemainingTimeRule: boolean;
	PoseEvaluatorLinks: number[];
	clone() : BakedStateExitTransition;
	static C(Other: UObject | any): BakedStateExitTransition;
}

declare class BakedAnimationState { 
	StateName: string;
	Transitions: BakedStateExitTransition[];
	StateRootNodeIndex: number;
	StartNotify: number;
	EndNotify: number;
	FullyBlendedNotify: number;
	bIsAConduit: boolean;
	EntryRuleNodeIndex: number;
	PlayerNodeIndices: number[];
	LayerNodeIndices: number[];
	bAlwaysResetOnEntry: boolean;
	clone() : BakedAnimationState;
	static C(Other: UObject | any): BakedAnimationState;
}

declare class AnimationStateBase { 
	StateName: string;
	clone() : AnimationStateBase;
	static C(Other: UObject | any): AnimationStateBase;
}

declare class AnimationTransitionBetweenStates extends AnimationStateBase { 
	PreviousState: number;
	NextState: number;
	CrossfadeDuration: number;
	StartNotify: number;
	EndNotify: number;
	InterruptNotify: number;
	BlendMode: EAlphaBlendOption;
	CustomCurve: CurveFloat;
	BlendProfile: BlendProfile;
	LogicType: ETransitionLogicType;
	clone() : AnimationTransitionBetweenStates;
	static C(Other: UObject | any): AnimationTransitionBetweenStates;
}

declare class BakedAnimationStateMachine { 
	MachineName: string;
	InitialState: number;
	States: BakedAnimationState[];
	Transitions: AnimationTransitionBetweenStates[];
	clone() : BakedAnimationStateMachine;
	static C(Other: UObject | any): BakedAnimationStateMachine;
}

declare type EPostCopyOperation = 'None' | 'LogicalNegateBool' | 'EPostCopyOperation_MAX';
declare var EPostCopyOperation : { None:'None',LogicalNegateBool:'LogicalNegateBool',EPostCopyOperation_MAX:'EPostCopyOperation_MAX', };
declare class ExposedValueCopyRecord { 
	CopyIndex: number;
	PostCopyOperation: EPostCopyOperation;
	clone() : ExposedValueCopyRecord;
	static C(Other: UObject | any): ExposedValueCopyRecord;
}

declare class ExposedValueHandler { 
	BoundFunction: string;
	CopyRecords: ExposedValueCopyRecord[];
	UFunction: UFunction;
	ValueHandlerNodeProperty: any;
	clone() : ExposedValueHandler;
	static C(Other: UObject | any): ExposedValueHandler;
}

declare class PropertyAccessSegment { 
	Name: string;
	struct: Struct;
	Property: any;
	UFunction: UFunction;
	ArrayIndex: number;
	Flags: any;
	clone() : PropertyAccessSegment;
	static C(Other: UObject | any): PropertyAccessSegment;
}

declare class PropertyAccessPath { 
	PathSegmentStartIndex: number;
	PathSegmentCount: number;
	bHasEvents: boolean;
	clone() : PropertyAccessPath;
	static C(Other: UObject | any): PropertyAccessPath;
}

declare type EPropertyAccessCopyType = 'None' | 'Plain' | 'Complex' | 'Bool' | 'Struct' | 'Object' | 'Name' | 'Array' | 'PromoteBoolToByte' | 'PromoteBoolToInt32' | 'PromoteBoolToInt64' | 'PromoteBoolToFloat' | 'PromoteByteToInt32' | 'PromoteByteToInt64' | 'PromoteByteToFloat' | 'PromoteInt32ToInt64' | 'PromoteInt32ToFloat' | 'EPropertyAccessCopyType_MAX';
declare var EPropertyAccessCopyType : { None:'None',Plain:'Plain',Complex:'Complex',Bool:'Bool',Struct:'Struct',Object:'Object',Name:'Name',Array:'Array',PromoteBoolToByte:'PromoteBoolToByte',PromoteBoolToInt32:'PromoteBoolToInt32',PromoteBoolToInt64:'PromoteBoolToInt64',PromoteBoolToFloat:'PromoteBoolToFloat',PromoteByteToInt32:'PromoteByteToInt32',PromoteByteToInt64:'PromoteByteToInt64',PromoteByteToFloat:'PromoteByteToFloat',PromoteInt32ToInt64:'PromoteInt32ToInt64',PromoteInt32ToFloat:'PromoteInt32ToFloat',EPropertyAccessCopyType_MAX:'EPropertyAccessCopyType_MAX', };
declare class PropertyAccessCopy { 
	AccessIndex: number;
	DestAccessStartIndex: number;
	DestAccessEndIndex: number;
	Type: EPropertyAccessCopyType;
	clone() : PropertyAccessCopy;
	static C(Other: UObject | any): PropertyAccessCopy;
}

declare class PropertyAccessCopyBatch { 
	Copies: PropertyAccessCopy[];
	clone() : PropertyAccessCopyBatch;
	static C(Other: UObject | any): PropertyAccessCopyBatch;
}

declare class PropertyAccessIndirectionChain { 
	Property: any;
	IndirectionStartIndex: number;
	IndirectionEndIndex: number;
	EventId: number;
	clone() : PropertyAccessIndirectionChain;
	static C(Other: UObject | any): PropertyAccessIndirectionChain;
}

declare type EPropertyAccessObjectType = 'None' | 'Object' | 'WeakObject' | 'SoftObject' | 'EPropertyAccessObjectType_MAX';
declare var EPropertyAccessObjectType : { None:'None',Object:'Object',WeakObject:'WeakObject',SoftObject:'SoftObject',EPropertyAccessObjectType_MAX:'EPropertyAccessObjectType_MAX', };
declare type EPropertyAccessIndirectionType = 'Offset' | 'Object' | 'Array' | 'ScriptFunction' | 'NativeFunction' | 'EPropertyAccessIndirectionType_MAX';
declare var EPropertyAccessIndirectionType : { Offset:'Offset',Object:'Object',Array:'Array',ScriptFunction:'ScriptFunction',NativeFunction:'NativeFunction',EPropertyAccessIndirectionType_MAX:'EPropertyAccessIndirectionType_MAX', };
declare class PropertyAccessIndirection { 
	ArrayProperty: any;
	UFunction: UFunction;
	ReturnBufferSize: number;
	ReturnBufferAlignment: number;
	ArrayIndex: number;
	Offset: any;
	ObjectType: EPropertyAccessObjectType;
	Type: EPropertyAccessIndirectionType;
	clone() : PropertyAccessIndirection;
	static C(Other: UObject | any): PropertyAccessIndirection;
}

declare class PropertyAccessLibrary { 
	PathSegments: PropertyAccessSegment[];
	SrcPaths: PropertyAccessPath[];
	DestPaths: PropertyAccessPath[];
	CopyBatches: PropertyAccessCopyBatch;
	SrcAccesses: PropertyAccessIndirectionChain[];
	DestAccesses: PropertyAccessIndirectionChain[];
	Indirections: PropertyAccessIndirection[];
	EventAccessIndices: number[];
	clone() : PropertyAccessLibrary;
	static C(Other: UObject | any): PropertyAccessLibrary;
}

declare class AnimBlueprintGeneratedClass extends BlueprintGeneratedClass { 
	BakedStateMachines: BakedAnimationStateMachine[];
	TargetSkeleton: Skeleton;
	AnimNotifies: AnimNotifyEvent[];
	OrderedSavedPoseIndicesMap: any;
	SyncGroupNames: string[];
	EvaluateGraphExposedInputs: ExposedValueHandler[];
	GraphAssetPlayerInformation: any;
	GraphBlendOptions: any;
	PropertyAccessLibrary: PropertyAccessLibrary;
	static Load(ResourceName: string): AnimBlueprintGeneratedClass;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintGeneratedClass;
	static GetDefaultObject(): AnimBlueprintGeneratedClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintGeneratedClass;
	static C(Other: UObject | any): AnimBlueprintGeneratedClass;
}

declare class AnimBlueprintFunction { 
	Name: string;
	Group: string;
	OutputPoseNodeIndex: number;
	InputPoseNames: string[];
	InputPoseNodeIndices: number[];
	bImplemented: boolean;
	clone() : AnimBlueprintFunction;
	static C(Other: UObject | any): AnimBlueprintFunction;
}

declare class AnimBlueprintFunctionData { 
	OutputPoseNodeProperty: any;
	InputPoseNodeProperties: any[];
	InputProperties: any[];
	clone() : AnimBlueprintFunctionData;
	static C(Other: UObject | any): AnimBlueprintFunctionData;
}

declare class AnimClassData extends UObject { 
	BakedStateMachines: BakedAnimationStateMachine[];
	TargetSkeleton: Skeleton;
	AnimNotifies: AnimNotifyEvent[];
	OrderedSavedPoseIndicesMap: any;
	AnimBlueprintFunctions: AnimBlueprintFunction[];
	AnimBlueprintFunctionData: AnimBlueprintFunctionData[];
	AnimNodeProperties: any[];
	LinkedAnimGraphNodeProperties: any[];
	LinkedAnimLayerNodeProperties: any[];
	PreUpdateNodeProperties: any[];
	DynamicResetNodeProperties: any[];
	StateMachineNodeProperties: any[];
	InitializationNodeProperties: any[];
	GraphNameAssetPlayers: any;
	SyncGroupNames: string[];
	EvaluateGraphExposedInputs: ExposedValueHandler[];
	GraphBlendOptions: any;
	PropertyAccessLibrary: PropertyAccessLibrary;
	static Load(ResourceName: string): AnimClassData;
	static Find(Outer: UObject, ResourceName: string): AnimClassData;
	static GetDefaultObject(): AnimClassData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimClassData;
	static C(Other: UObject | any): AnimClassData;
}

declare class AnimClassInterface extends Interface { 
	static Load(ResourceName: string): AnimClassInterface;
	static Find(Outer: UObject, ResourceName: string): AnimClassInterface;
	static GetDefaultObject(): AnimClassInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimClassInterface;
	static C(Other: UObject | any): AnimClassInterface;
}

declare class AnimComposite extends AnimCompositeBase { 
	AnimationTrack: AnimTrack;
	PreviewBasePose: AnimSequence;
	static Load(ResourceName: string): AnimComposite;
	static Find(Outer: UObject, ResourceName: string): AnimComposite;
	static GetDefaultObject(): AnimComposite;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimComposite;
	static C(Other: UObject | any): AnimComposite;
}

declare class AnimCompress_BitwiseCompressOnly extends AnimCompress { 
	static Load(ResourceName: string): AnimCompress_BitwiseCompressOnly;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_BitwiseCompressOnly;
	static GetDefaultObject(): AnimCompress_BitwiseCompressOnly;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_BitwiseCompressOnly;
	static C(Other: UObject | any): AnimCompress_BitwiseCompressOnly;
}

declare class AnimCompress_LeastDestructive extends AnimCompress_BitwiseCompressOnly { 
	static Load(ResourceName: string): AnimCompress_LeastDestructive;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_LeastDestructive;
	static GetDefaultObject(): AnimCompress_LeastDestructive;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_LeastDestructive;
	static C(Other: UObject | any): AnimCompress_LeastDestructive;
}

declare class AnimCompress_RemoveLinearKeys extends AnimCompress { 
	MaxPosDiff: number;
	MaxAngleDiff: number;
	MaxScaleDiff: number;
	MaxEffectorDiff: number;
	MinEffectorDiff: number;
	EffectorDiffSocket: number;
	ParentKeyScale: number;
	bRetarget: boolean;
	bActuallyFilterLinearKeys: boolean;
	static Load(ResourceName: string): AnimCompress_RemoveLinearKeys;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_RemoveLinearKeys;
	static GetDefaultObject(): AnimCompress_RemoveLinearKeys;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_RemoveLinearKeys;
	static C(Other: UObject | any): AnimCompress_RemoveLinearKeys;
}

declare class AnimCompress_PerTrackCompression extends AnimCompress_RemoveLinearKeys { 
	MaxZeroingThreshold: number;
	MaxPosDiffBitwise: number;
	MaxAngleDiffBitwise: number;
	MaxScaleDiffBitwise: number;
	AllowedRotationFormats: AnimationCompressionFormat[];
	AllowedTranslationFormats: AnimationCompressionFormat[];
	AllowedScaleFormats: AnimationCompressionFormat[];
	bResampleAnimation: boolean;
	ResampledFramerate: number;
	MinKeysForResampling: number;
	bUseAdaptiveError: boolean;
	bUseOverrideForEndEffectors: boolean;
	TrackHeightBias: number;
	ParentingDivisor: number;
	ParentingDivisorExponent: number;
	bUseAdaptiveError2: boolean;
	RotationErrorSourceRatio: number;
	TranslationErrorSourceRatio: number;
	ScaleErrorSourceRatio: number;
	MaxErrorPerTrackRatio: number;
	PerturbationProbeSize: number;
	static Load(ResourceName: string): AnimCompress_PerTrackCompression;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_PerTrackCompression;
	static GetDefaultObject(): AnimCompress_PerTrackCompression;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_PerTrackCompression;
	static C(Other: UObject | any): AnimCompress_PerTrackCompression;
}

declare class AnimCompress_RemoveEverySecondKey extends AnimCompress { 
	MinKeys: number;
	bStartAtSecondKey: boolean;
	static Load(ResourceName: string): AnimCompress_RemoveEverySecondKey;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_RemoveEverySecondKey;
	static GetDefaultObject(): AnimCompress_RemoveEverySecondKey;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_RemoveEverySecondKey;
	static C(Other: UObject | any): AnimCompress_RemoveEverySecondKey;
}

declare class AnimCompress_RemoveTrivialKeys extends AnimCompress { 
	MaxPosDiff: number;
	MaxAngleDiff: number;
	MaxScaleDiff: number;
	static Load(ResourceName: string): AnimCompress_RemoveTrivialKeys;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_RemoveTrivialKeys;
	static GetDefaultObject(): AnimCompress_RemoveTrivialKeys;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_RemoveTrivialKeys;
	static C(Other: UObject | any): AnimCompress_RemoveTrivialKeys;
}

declare class AnimCurveCompressionCodec_CompressedRichCurve extends AnimCurveCompressionCodec { 
	MaxCurveError: number;
	UseAnimSequenceSampleRate: boolean;
	ErrorSampleRate: number;
	static Load(ResourceName: string): AnimCurveCompressionCodec_CompressedRichCurve;
	static Find(Outer: UObject, ResourceName: string): AnimCurveCompressionCodec_CompressedRichCurve;
	static GetDefaultObject(): AnimCurveCompressionCodec_CompressedRichCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCurveCompressionCodec_CompressedRichCurve;
	static C(Other: UObject | any): AnimCurveCompressionCodec_CompressedRichCurve;
}

declare class AnimCurveCompressionCodec_UniformIndexable extends AnimCurveCompressionCodec { 
	static Load(ResourceName: string): AnimCurveCompressionCodec_UniformIndexable;
	static Find(Outer: UObject, ResourceName: string): AnimCurveCompressionCodec_UniformIndexable;
	static GetDefaultObject(): AnimCurveCompressionCodec_UniformIndexable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCurveCompressionCodec_UniformIndexable;
	static C(Other: UObject | any): AnimCurveCompressionCodec_UniformIndexable;
}

declare class AnimCurveCompressionCodec_UniformlySampled extends AnimCurveCompressionCodec { 
	UseAnimSequenceSampleRate: boolean;
	SampleRate: number;
	static Load(ResourceName: string): AnimCurveCompressionCodec_UniformlySampled;
	static Find(Outer: UObject, ResourceName: string): AnimCurveCompressionCodec_UniformlySampled;
	static GetDefaultObject(): AnimCurveCompressionCodec_UniformlySampled;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCurveCompressionCodec_UniformlySampled;
	static C(Other: UObject | any): AnimCurveCompressionCodec_UniformlySampled;
}

declare class AnimNotify_PauseClothingSimulation extends AnimNotify { 
	static Load(ResourceName: string): AnimNotify_PauseClothingSimulation;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_PauseClothingSimulation;
	static GetDefaultObject(): AnimNotify_PauseClothingSimulation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_PauseClothingSimulation;
	static C(Other: UObject | any): AnimNotify_PauseClothingSimulation;
}

declare class AnimNotify_PlayParticleEffect extends AnimNotify { 
	PSTemplate: ParticleSystem;
	LocationOffset: Vector;
	RotationOffset: Rotator;
	Scale: Vector;
	Attached: boolean;
	SocketName: string;
	static Load(ResourceName: string): AnimNotify_PlayParticleEffect;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_PlayParticleEffect;
	static GetDefaultObject(): AnimNotify_PlayParticleEffect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_PlayParticleEffect;
	static C(Other: UObject | any): AnimNotify_PlayParticleEffect;
}

declare class AnimNotify_PlaySound extends AnimNotify { 
	Sound: SoundBase;
	VolumeMultiplier: number;
	PitchMultiplier: number;
	bFollow: boolean;
	bPreviewIgnoreAttenuation: boolean;
	AttachName: string;
	static Load(ResourceName: string): AnimNotify_PlaySound;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_PlaySound;
	static GetDefaultObject(): AnimNotify_PlaySound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_PlaySound;
	static C(Other: UObject | any): AnimNotify_PlaySound;
}

declare class AnimNotify_ResetClothingSimulation extends AnimNotify { 
	static Load(ResourceName: string): AnimNotify_ResetClothingSimulation;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_ResetClothingSimulation;
	static GetDefaultObject(): AnimNotify_ResetClothingSimulation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_ResetClothingSimulation;
	static C(Other: UObject | any): AnimNotify_ResetClothingSimulation;
}

declare class AnimNotify_ResetDynamics extends AnimNotify { 
	static Load(ResourceName: string): AnimNotify_ResetDynamics;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_ResetDynamics;
	static GetDefaultObject(): AnimNotify_ResetDynamics;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_ResetDynamics;
	static C(Other: UObject | any): AnimNotify_ResetDynamics;
}

declare class AnimNotify_ResumeClothingSimulation extends AnimNotify { 
	static Load(ResourceName: string): AnimNotify_ResumeClothingSimulation;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_ResumeClothingSimulation;
	static GetDefaultObject(): AnimNotify_ResumeClothingSimulation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_ResumeClothingSimulation;
	static C(Other: UObject | any): AnimNotify_ResumeClothingSimulation;
}

declare class AnimNotifyState_DisableRootMotion extends AnimNotifyState { 
	static Load(ResourceName: string): AnimNotifyState_DisableRootMotion;
	static Find(Outer: UObject, ResourceName: string): AnimNotifyState_DisableRootMotion;
	static GetDefaultObject(): AnimNotifyState_DisableRootMotion;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotifyState_DisableRootMotion;
	static C(Other: UObject | any): AnimNotifyState_DisableRootMotion;
}

declare class AnimNotifyState_TimedParticleEffect extends AnimNotifyState { 
	PSTemplate: ParticleSystem;
	SocketName: string;
	LocationOffset: Vector;
	RotationOffset: Rotator;
	bDestroyAtEnd: boolean;
	PreviousPSTemplates: ParticleSystem[];
	PreviousSocketNames: string[];
	static Load(ResourceName: string): AnimNotifyState_TimedParticleEffect;
	static Find(Outer: UObject, ResourceName: string): AnimNotifyState_TimedParticleEffect;
	static GetDefaultObject(): AnimNotifyState_TimedParticleEffect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotifyState_TimedParticleEffect;
	static C(Other: UObject | any): AnimNotifyState_TimedParticleEffect;
}

declare class AnimNotifyState_Trail extends AnimNotifyState { 
	PSTemplate: ParticleSystem;
	FirstSocketName: string;
	SecondSocketName: string;
	WidthScaleMode: ETrailWidthMode;
	WidthScaleCurve: string;
	bRecycleSpawnedSystems: boolean;
	bRenderGeometry: boolean;
	bRenderSpawnPoints: boolean;
	bRenderTangents: boolean;
	bRenderTessellation: boolean;
	static Load(ResourceName: string): AnimNotifyState_Trail;
	static Find(Outer: UObject, ResourceName: string): AnimNotifyState_Trail;
	static GetDefaultObject(): AnimNotifyState_Trail;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotifyState_Trail;
	OverridePSTemplate(MeshComp: SkeletalMeshComponent,Animation: AnimSequenceBase): ParticleSystem;
	static C(Other: UObject | any): AnimNotifyState_Trail;
}

declare class AnimSetMeshLinkup { 
	BoneToTrackTable: number[];
	clone() : AnimSetMeshLinkup;
	static C(Other: UObject | any): AnimSetMeshLinkup;
}

declare class AnimSet extends UObject { 
	bAnimRotationOnly: boolean;
	TrackBoneNames: string[];
	Sequences: AnimSequence[];
	LinkupCache: AnimSetMeshLinkup[];
	BoneUseAnimTranslation: number[];
	ForceUseMeshTranslation: number[];
	UseTranslationBoneNames: string[];
	ForceMeshTranslationBoneNames: string[];
	PreviewSkelMeshName: string;
	BestRatioSkelMeshName: string;
	static Load(ResourceName: string): AnimSet;
	static Find(Outer: UObject, ResourceName: string): AnimSet;
	static GetDefaultObject(): AnimSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSet;
	static C(Other: UObject | any): AnimSet;
}

declare class AnimStateMachineTypes extends UObject { 
	static Load(ResourceName: string): AnimStateMachineTypes;
	static Find(Outer: UObject, ResourceName: string): AnimStateMachineTypes;
	static GetDefaultObject(): AnimStateMachineTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateMachineTypes;
	static C(Other: UObject | any): AnimStateMachineTypes;
}

declare class RawAnimSequenceTrack { 
	PosKeys: Vector[];
	RotKeys: Quat[];
	ScaleKeys: Vector[];
	clone() : RawAnimSequenceTrack;
	static C(Other: UObject | any): RawAnimSequenceTrack;
}

declare class AnimStreamable extends AnimSequenceBase { 
	NumFrames: number;
	Interpolation: EAnimInterpolationType;
	RetargetSource: string;
	SourceSequence: AnimSequence;
	RawDataGuid: Guid;
	RawAnimationData: RawAnimSequenceTrack[];
	TrackToSkeletonMapTable: TrackToSkeletonMap[];
	AnimationTrackNames: string[];
	BoneCompressionSettings: AnimBoneCompressionSettings;
	CurveCompressionSettings: AnimCurveCompressionSettings;
	bEnableRootMotion: boolean;
	RootMotionRootLock: ERootMotionRootLock;
	bForceRootLock: boolean;
	bUseNormalizedRootMotionScale: boolean;
	static Load(ResourceName: string): AnimStreamable;
	static Find(Outer: UObject, ResourceName: string): AnimStreamable;
	static GetDefaultObject(): AnimStreamable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStreamable;
	static C(Other: UObject | any): AnimStreamable;
}

declare type ETemperatureSeverityType = 'Unknown' | 'Good' | 'Bad' | 'Serious' | 'Critical' | 'NumSeverities' | 'ETemperatureSeverityType_MAX';
declare var ETemperatureSeverityType : { Unknown:'Unknown',Good:'Good',Bad:'Bad',Serious:'Serious',Critical:'Critical',NumSeverities:'NumSeverities',ETemperatureSeverityType_MAX:'ETemperatureSeverityType_MAX', };
declare class ApplicationLifecycleComponent extends ActorComponent { 
	ApplicationWillDeactivateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasReactivatedDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillEnterBackgroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasEnteredForegroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillTerminateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationShouldUnloadResourcesDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationReceivedStartupArgumentsDelegate: UnrealEngineMulticastDelegate<(StartupArguments: string[]) => void>;
	OnTemperatureChangeDelegate: UnrealEngineMulticastDelegate<(Severity: ETemperatureSeverityType) => void>;
	OnLowPowerModeDelegate: UnrealEngineMulticastDelegate<(bInLowPowerMode: boolean) => void>;
	static Load(ResourceName: string): ApplicationLifecycleComponent;
	static Find(Outer: UObject, ResourceName: string): ApplicationLifecycleComponent;
	static GetDefaultObject(): ApplicationLifecycleComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ApplicationLifecycleComponent;
	static C(Other: UObject | any): ApplicationLifecycleComponent;
}

declare type EPrimaryAssetCookRule = 'Unknown' | 'NeverCook' | 'DevelopmentCook' | 'DevelopmentAlwaysCook' | 'AlwaysCook' | 'EPrimaryAssetCookRule_MAX';
declare var EPrimaryAssetCookRule : { Unknown:'Unknown',NeverCook:'NeverCook',DevelopmentCook:'DevelopmentCook',DevelopmentAlwaysCook:'DevelopmentAlwaysCook',AlwaysCook:'AlwaysCook',EPrimaryAssetCookRule_MAX:'EPrimaryAssetCookRule_MAX', };
declare class PrimaryAssetRules { 
	Priority: number;
	ChunkID: number;
	bApplyRecursively: boolean;
	CookRule: EPrimaryAssetCookRule;
	clone() : PrimaryAssetRules;
	static C(Other: UObject | any): PrimaryAssetRules;
}

declare class PrimaryAssetTypeInfo { 
	PrimaryAssetType: string;
	AssetBaseClass: Class;
	AssetBaseClassLoaded: UnrealEngineClass;
	bHasBlueprintClasses: boolean;
	bIsEditorOnly: boolean;
	Directories: DirectoryPath[];
	SpecificAssets: SoftObjectPath[];
	Rules: PrimaryAssetRules;
	AssetScanPaths: string[];
	bIsDynamicAsset: boolean;
	NumberOfAssets: number;
	clone() : PrimaryAssetTypeInfo;
	static C(Other: UObject | any): PrimaryAssetTypeInfo;
}

declare class PrimaryAssetRulesOverride { 
	PrimaryAssetId: PrimaryAssetId;
	Rules: PrimaryAssetRules;
	clone() : PrimaryAssetRulesOverride;
	static C(Other: UObject | any): PrimaryAssetRulesOverride;
}

declare class PrimaryAssetRulesCustomOverride { 
	PrimaryAssetType: PrimaryAssetType;
	FilterDirectory: DirectoryPath;
	FilterString: string;
	Rules: PrimaryAssetRules;
	clone() : PrimaryAssetRulesCustomOverride;
	static C(Other: UObject | any): PrimaryAssetRulesCustomOverride;
}

declare class AssetManagerRedirect { 
	Old: string;
	New: string;
	clone() : AssetManagerRedirect;
	static C(Other: UObject | any): AssetManagerRedirect;
}

declare class AssetManagerSettings extends DeveloperSettings { 
	PrimaryAssetTypesToScan: PrimaryAssetTypeInfo[];
	DirectoriesToExclude: DirectoryPath[];
	PrimaryAssetRules: PrimaryAssetRulesOverride[];
	CustomPrimaryAssetRules: PrimaryAssetRulesCustomOverride[];
	bOnlyCookProductionAssets: boolean;
	bShouldManagerDetermineTypeAndName: boolean;
	bShouldGuessTypeAndNameInEditor: boolean;
	bShouldAcquireMissingChunksOnLoad: boolean;
	PrimaryAssetIdRedirects: AssetManagerRedirect[];
	PrimaryAssetTypeRedirects: AssetManagerRedirect[];
	AssetPathRedirects: AssetManagerRedirect[];
	MetaDataTagsForAssetRegistry: any;
	static Load(ResourceName: string): AssetManagerSettings;
	static Find(Outer: UObject, ResourceName: string): AssetManagerSettings;
	static GetDefaultObject(): AssetManagerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetManagerSettings;
	static C(Other: UObject | any): AssetManagerSettings;
}

declare class AsyncActionHandleSaveGame extends BlueprintAsyncActionBase { 
	Completed: UnrealEngineMulticastDelegate<(SaveGame: SaveGame, bSuccess: boolean) => void>;
	SaveGameObject: SaveGame;
	static Load(ResourceName: string): AsyncActionHandleSaveGame;
	static Find(Outer: UObject, ResourceName: string): AsyncActionHandleSaveGame;
	static GetDefaultObject(): AsyncActionHandleSaveGame;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionHandleSaveGame;
	static AsyncSaveGameToSlot(WorldContextObject: UObject,SaveGameObject: SaveGame,SlotName: string,UserIndex: number): AsyncActionHandleSaveGame;
	static AsyncLoadGameFromSlot(WorldContextObject: UObject,SlotName: string,UserIndex: number): AsyncActionHandleSaveGame;
	static C(Other: UObject | any): AsyncActionHandleSaveGame;
}

declare class AsyncActionLoadPrimaryAssetBase extends BlueprintAsyncActionBase { 
	static Load(ResourceName: string): AsyncActionLoadPrimaryAssetBase;
	static Find(Outer: UObject, ResourceName: string): AsyncActionLoadPrimaryAssetBase;
	static GetDefaultObject(): AsyncActionLoadPrimaryAssetBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionLoadPrimaryAssetBase;
	static C(Other: UObject | any): AsyncActionLoadPrimaryAssetBase;
}

declare class AsyncActionLoadPrimaryAsset extends AsyncActionLoadPrimaryAssetBase { 
	Completed: UnrealEngineMulticastDelegate<(Loaded: UObject) => void>;
	static Load(ResourceName: string): AsyncActionLoadPrimaryAsset;
	static Find(Outer: UObject, ResourceName: string): AsyncActionLoadPrimaryAsset;
	static GetDefaultObject(): AsyncActionLoadPrimaryAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionLoadPrimaryAsset;
	static AsyncLoadPrimaryAsset(WorldContextObject: UObject,PrimaryAsset: PrimaryAssetId,LoadBundles: string[]): AsyncActionLoadPrimaryAsset;
	static C(Other: UObject | any): AsyncActionLoadPrimaryAsset;
}

declare class AsyncActionLoadPrimaryAssetClass extends AsyncActionLoadPrimaryAssetBase { 
	Completed: UnrealEngineMulticastDelegate<(Loaded: UnrealEngineClass) => void>;
	static Load(ResourceName: string): AsyncActionLoadPrimaryAssetClass;
	static Find(Outer: UObject, ResourceName: string): AsyncActionLoadPrimaryAssetClass;
	static GetDefaultObject(): AsyncActionLoadPrimaryAssetClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionLoadPrimaryAssetClass;
	static AsyncLoadPrimaryAssetClass(WorldContextObject: UObject,PrimaryAsset: PrimaryAssetId,LoadBundles: string[]): AsyncActionLoadPrimaryAssetClass;
	static C(Other: UObject | any): AsyncActionLoadPrimaryAssetClass;
}

declare class AsyncActionLoadPrimaryAssetList extends AsyncActionLoadPrimaryAssetBase { 
	Completed: UnrealEngineMulticastDelegate<(Loaded: UObject[]) => void>;
	static Load(ResourceName: string): AsyncActionLoadPrimaryAssetList;
	static Find(Outer: UObject, ResourceName: string): AsyncActionLoadPrimaryAssetList;
	static GetDefaultObject(): AsyncActionLoadPrimaryAssetList;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionLoadPrimaryAssetList;
	static AsyncLoadPrimaryAssetList(WorldContextObject: UObject,PrimaryAssetList: PrimaryAssetId[],LoadBundles: string[]): AsyncActionLoadPrimaryAssetList;
	static C(Other: UObject | any): AsyncActionLoadPrimaryAssetList;
}

declare class AsyncActionLoadPrimaryAssetClassList extends AsyncActionLoadPrimaryAssetBase { 
	Completed: UnrealEngineMulticastDelegate<(Loaded: UnrealEngineClass[]) => void>;
	static Load(ResourceName: string): AsyncActionLoadPrimaryAssetClassList;
	static Find(Outer: UObject, ResourceName: string): AsyncActionLoadPrimaryAssetClassList;
	static GetDefaultObject(): AsyncActionLoadPrimaryAssetClassList;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionLoadPrimaryAssetClassList;
	static AsyncLoadPrimaryAssetClassList(WorldContextObject: UObject,PrimaryAssetList: PrimaryAssetId[],LoadBundles: string[]): AsyncActionLoadPrimaryAssetClassList;
	static C(Other: UObject | any): AsyncActionLoadPrimaryAssetClassList;
}

declare class AsyncActionChangePrimaryAssetBundles extends AsyncActionLoadPrimaryAssetBase { 
	Completed: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): AsyncActionChangePrimaryAssetBundles;
	static Find(Outer: UObject, ResourceName: string): AsyncActionChangePrimaryAssetBundles;
	static GetDefaultObject(): AsyncActionChangePrimaryAssetBundles;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionChangePrimaryAssetBundles;
	static AsyncChangeBundleStateForPrimaryAssetList(WorldContextObject: UObject,PrimaryAssetList: PrimaryAssetId[],AddBundles: string[],RemoveBundles: string[]): AsyncActionChangePrimaryAssetBundles;
	static AsyncChangeBundleStateForMatchingPrimaryAssets(WorldContextObject: UObject,NewBundles: string[],OldBundles: string[]): AsyncActionChangePrimaryAssetBundles;
	static C(Other: UObject | any): AsyncActionChangePrimaryAssetBundles;
}

declare class AtmospherePrecomputeParameters { 
	DensityHeight: number;
	DecayHeight: number;
	MaxScatteringOrder: number;
	TransmittanceTexWidth: number;
	TransmittanceTexHeight: number;
	IrradianceTexWidth: number;
	IrradianceTexHeight: number;
	InscatterAltitudeSampleNum: number;
	InscatterMuNum: number;
	InscatterMuSNum: number;
	InscatterNuNum: number;
	clone() : AtmospherePrecomputeParameters;
	static C(Other: UObject | any): AtmospherePrecomputeParameters;
}

declare class AtmosphericFogComponent extends SceneComponent { 
	SunMultiplier: number;
	FogMultiplier: number;
	DensityMultiplier: number;
	DensityOffset: number;
	DistanceScale: number;
	AltitudeScale: number;
	DistanceOffset: number;
	GroundOffset: number;
	StartDistance: number;
	SunDiscScale: number;
	DefaultBrightness: number;
	DefaultLightColor: Color;
	bDisableSunDisk: boolean;
	bAtmosphereAffectsSunIlluminance: boolean;
	bDisableGroundScattering: boolean;
	PrecomputeParams: AtmospherePrecomputeParameters;
	TransmittanceTexture: Texture2D;
	IrradianceTexture: Texture2D;
	static Load(ResourceName: string): AtmosphericFogComponent;
	static Find(Outer: UObject, ResourceName: string): AtmosphericFogComponent;
	static GetDefaultObject(): AtmosphericFogComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AtmosphericFogComponent;
	StartPrecompute(): void;
	SetSunMultiplier(NewSunMultiplier: number): void;
	SetStartDistance(NewStartDistance: number): void;
	SetPrecomputeParams(DensityHeight: number,MaxScatteringOrder: number,InscatterAltitudeSampleNum: number): void;
	SetFogMultiplier(NewFogMultiplier: number): void;
	SetDistanceScale(NewDistanceScale: number): void;
	SetDistanceOffset(NewDistanceOffset: number): void;
	SetDensityOffset(NewDensityOffset: number): void;
	SetDensityMultiplier(NewDensityMultiplier: number): void;
	SetDefaultLightColor(NewLightColor: LinearColor): void;
	SetDefaultBrightness(NewBrightness: number): void;
	SetAltitudeScale(NewAltitudeScale: number): void;
	DisableSunDisk(NewSunDisk: boolean): void;
	DisableGroundScattering(NewGroundScattering: boolean): void;
	static C(Other: UObject | any): AtmosphericFogComponent;
}

declare class AtmosphericFog extends Info { 
	AtmosphericFogComponent: AtmosphericFogComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): AtmosphericFog;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AtmosphericFog;
	static C(Other: UObject | any): AtmosphericFog;
}

declare type EVoiceSampleRate = 'Low16000Hz' | 'Normal24000Hz' | 'EVoiceSampleRate_MAX';
declare var EVoiceSampleRate : { Low16000Hz:'Low16000Hz',Normal24000Hz:'Normal24000Hz',EVoiceSampleRate_MAX:'EVoiceSampleRate_MAX', };
declare class AudioQualitySettings { 
	DisplayName: string;
	MaxChannels: number;
	clone() : AudioQualitySettings;
	static C(Other: UObject | any): AudioQualitySettings;
}

declare type EPanningMethod = 'Linear' | 'EqualPower' | 'EPanningMethod_MAX';
declare var EPanningMethod : { Linear:'Linear',EqualPower:'EqualPower',EPanningMethod_MAX:'EPanningMethod_MAX', };
declare type EMonoChannelUpmixMethod = 'Linear' | 'EqualPower' | 'FullVolume' | 'EMonoChannelUpmixMethod_MAX';
declare var EMonoChannelUpmixMethod : { Linear:'Linear',EqualPower:'EqualPower',FullVolume:'FullVolume',EMonoChannelUpmixMethod_MAX:'EMonoChannelUpmixMethod_MAX', };
declare class SoundDebugEntry { 
	DebugName: string;
	Sound: SoftObjectPath;
	clone() : SoundDebugEntry;
	static C(Other: UObject | any): SoundDebugEntry;
}

declare class DefaultAudioBusSettings { 
	AudioBus: SoftObjectPath;
	clone() : DefaultAudioBusSettings;
	static C(Other: UObject | any): DefaultAudioBusSettings;
}

declare class AudioSettings extends DeveloperSettings { 
	DefaultSoundClassName: SoftObjectPath;
	DefaultMediaSoundClassName: SoftObjectPath;
	DefaultSoundConcurrencyName: SoftObjectPath;
	DefaultBaseSoundMix: SoftObjectPath;
	VoiPSoundClass: SoftObjectPath;
	MasterSubmix: SoftObjectPath;
	BaseDefaultSubmix: SoftObjectPath;
	ReverbSubmix: SoftObjectPath;
	EQSubmix: SoftObjectPath;
	VoiPSampleRate: EVoiceSampleRate;
	DefaultReverbSendLevel: number;
	MaximumConcurrentStreams: number;
	GlobalMinPitchScale: number;
	GlobalMaxPitchScale: number;
	QualityLevels: AudioQualitySettings[];
	bAllowPlayWhenSilent: boolean;
	bDisableMasterEQ: boolean;
	bAllowCenterChannel3DPanning: boolean;
	NumStoppingSources: any;
	PanningMethod: EPanningMethod;
	MonoChannelUpmixMethod: EMonoChannelUpmixMethod;
	DialogueFilenameFormat: string;
	DebugSounds: SoundDebugEntry[];
	DefaultAudioBuses: DefaultAudioBusSettings[];
	DefaultSoundClass: SoundClass;
	DefaultMediaSoundClass: SoundClass;
	DefaultSoundConcurrency: SoundConcurrency;
	static Load(ResourceName: string): AudioSettings;
	static Find(Outer: UObject, ResourceName: string): AudioSettings;
	static GetDefaultObject(): AudioSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioSettings;
	static C(Other: UObject | any): AudioSettings;
}

declare type EAudioVolumeLocationState = 'InsideTheVolume' | 'OutsideTheVolume' | 'EAudioVolumeLocationState_MAX';
declare var EAudioVolumeLocationState : { InsideTheVolume:'InsideTheVolume',OutsideTheVolume:'OutsideTheVolume',EAudioVolumeLocationState_MAX:'EAudioVolumeLocationState_MAX', };
declare class AudioVolumeSubmixSendSettings { 
	ListenerLocationState: EAudioVolumeLocationState;
	SourceLocationState: EAudioVolumeLocationState;
	SubmixSends: SoundSubmixSendInfo[];
	clone() : AudioVolumeSubmixSendSettings;
	static C(Other: UObject | any): AudioVolumeSubmixSendSettings;
}

declare class AudioVolumeSubmixOverrideSettings { 
	Submix: SoundSubmix;
	SubmixEffectChain: SoundEffectSubmixPreset[];
	CrossfadeTime: number;
	clone() : AudioVolumeSubmixOverrideSettings;
	static C(Other: UObject | any): AudioVolumeSubmixOverrideSettings;
}

declare class AudioVolume extends Volume { 
	Priority: number;
	bEnabled: boolean;
	Settings: ReverbSettings;
	AmbientZoneSettings: InteriorSettings;
	SubmixSendSettings: AudioVolumeSubmixSendSettings[];
	SubmixOverrideSettings: AudioVolumeSubmixOverrideSettings[];
	static GetDefaultObject(): AudioVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioVolume;
	SetSubmixSendSettings(NewSubmixSendSettings: AudioVolumeSubmixSendSettings[]): void;
	SetSubmixOverrideSettings(NewSubmixOverrideSettings: AudioVolumeSubmixOverrideSettings[]): void;
	SetReverbSettings(NewReverbSettings: ReverbSettings): void;
	SetPriority(NewPriority: number): void;
	SetInteriorSettings(NewInteriorSettings: InteriorSettings): void;
	SetEnabled(bNewEnabled: boolean): void;
	OnRep_bEnabled(): void;
	static C(Other: UObject | any): AudioVolume;
}

declare class AutoDestroySubsystem extends TickableWorldSubsystem { 
	ActorsToPoll: Actor[];
	static Load(ResourceName: string): AutoDestroySubsystem;
	static Find(Outer: UObject, ResourceName: string): AutoDestroySubsystem;
	static GetDefaultObject(): AutoDestroySubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutoDestroySubsystem;
	OnActorEndPlay(Actor: Actor,EndPlayReason: EEndPlayReason): void;
	static C(Other: UObject | any): AutoDestroySubsystem;
}

declare class EditorMapPerformanceTestDefinition { 
	PerformanceTestmap: SoftObjectPath;
	TestTimer: number;
	clone() : EditorMapPerformanceTestDefinition;
	static C(Other: UObject | any): EditorMapPerformanceTestDefinition;
}

declare class ImportFactorySettingValues { 
	SettingName: string;
	Value: string;
	clone() : ImportFactorySettingValues;
	static C(Other: UObject | any): ImportFactorySettingValues;
}

declare class EditorImportWorkflowDefinition { 
	ImportFilePath: FilePath;
	FactorySettings: ImportFactorySettingValues[];
	clone() : EditorImportWorkflowDefinition;
	static C(Other: UObject | any): EditorImportWorkflowDefinition;
}

declare class BuildPromotionImportWorkflowSettings { 
	Diffuse: EditorImportWorkflowDefinition;
	Normal: EditorImportWorkflowDefinition;
	StaticMesh: EditorImportWorkflowDefinition;
	ReimportStaticMesh: EditorImportWorkflowDefinition;
	BlendShapeMesh: EditorImportWorkflowDefinition;
	MorphMesh: EditorImportWorkflowDefinition;
	SkeletalMesh: EditorImportWorkflowDefinition;
	Animation: EditorImportWorkflowDefinition;
	Sound: EditorImportWorkflowDefinition;
	SurroundSound: EditorImportWorkflowDefinition;
	OtherAssetsToImport: EditorImportWorkflowDefinition[];
	clone() : BuildPromotionImportWorkflowSettings;
	static C(Other: UObject | any): BuildPromotionImportWorkflowSettings;
}

declare class BuildPromotionOpenAssetSettings { 
	BlueprintAsset: FilePath;
	MaterialAsset: FilePath;
	ParticleSystemAsset: FilePath;
	SkeletalMeshAsset: FilePath;
	StaticMeshAsset: FilePath;
	TextureAsset: FilePath;
	clone() : BuildPromotionOpenAssetSettings;
	static C(Other: UObject | any): BuildPromotionOpenAssetSettings;
}

declare class BuildPromotionNewProjectSettings { 
	NewProjectFolderOverride: DirectoryPath;
	NewProjectNameOverride: string;
	clone() : BuildPromotionNewProjectSettings;
	static C(Other: UObject | any): BuildPromotionNewProjectSettings;
}

declare class BuildPromotionTestSettings { 
	DefaultStaticMeshAsset: FilePath;
	ImportWorkflow: BuildPromotionImportWorkflowSettings;
	OpenAssets: BuildPromotionOpenAssetSettings;
	NewProjectSettings: BuildPromotionNewProjectSettings;
	SourceControlMaterial: FilePath;
	clone() : BuildPromotionTestSettings;
	static C(Other: UObject | any): BuildPromotionTestSettings;
}

declare class MaterialEditorPromotionSettings { 
	DefaultMaterialAsset: FilePath;
	DefaultDiffuseTexture: FilePath;
	DefaultNormalTexture: FilePath;
	clone() : MaterialEditorPromotionSettings;
	static C(Other: UObject | any): MaterialEditorPromotionSettings;
}

declare class ParticleEditorPromotionSettings { 
	DefaultParticleAsset: FilePath;
	clone() : ParticleEditorPromotionSettings;
	static C(Other: UObject | any): ParticleEditorPromotionSettings;
}

declare class BlueprintEditorPromotionSettings { 
	FirstMeshPath: FilePath;
	SecondMeshPath: FilePath;
	DefaultParticleAsset: FilePath;
	clone() : BlueprintEditorPromotionSettings;
	static C(Other: UObject | any): BlueprintEditorPromotionSettings;
}

declare class ExternalToolDefinition { 
	ToolName: string;
	ExecutablePath: FilePath;
	CommandLineOptions: string;
	WorkingDirectory: DirectoryPath;
	ScriptExtension: string;
	ScriptDirectory: DirectoryPath;
	clone() : ExternalToolDefinition;
	static C(Other: UObject | any): ExternalToolDefinition;
}

declare class EditorImportExportTestDefinition { 
	ImportFilePath: FilePath;
	ExportFileExtension: string;
	bSkipExport: boolean;
	FactorySettings: ImportFactorySettingValues[];
	clone() : EditorImportExportTestDefinition;
	static C(Other: UObject | any): EditorImportExportTestDefinition;
}

declare class LaunchOnTestSettings { 
	LaunchOnTestmap: FilePath;
	DeviceID: string;
	clone() : LaunchOnTestSettings;
	static C(Other: UObject | any): LaunchOnTestSettings;
}

declare class AutomationTestSettings extends UObject { 
	EngineTestModules: string[];
	EditorTestModules: string[];
	AutomationTestmap: SoftObjectPath;
	EditorPerformanceTestMaps: EditorMapPerformanceTestDefinition[];
	AssetsToOpen: SoftObjectPath[];
	MapsToPIETest: string[];
	BuildPromotionTest: BuildPromotionTestSettings;
	MaterialEditorPromotionTest: MaterialEditorPromotionSettings;
	ParticleEditorPromotionTest: ParticleEditorPromotionSettings;
	BlueprintEditorPromotionTest: BlueprintEditorPromotionSettings;
	TestLevelFolders: string[];
	ExternalTools: ExternalToolDefinition[];
	ImportExportTestDefinitions: EditorImportExportTestDefinition[];
	LaunchOnSettings: LaunchOnTestSettings[];
	DefaultScreenshotResolution: IntPoint;
	PIETestDuration: number;
	static Load(ResourceName: string): AutomationTestSettings;
	static Find(Outer: UObject, ResourceName: string): AutomationTestSettings;
	static GetDefaultObject(): AutomationTestSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationTestSettings;
	static C(Other: UObject | any): AutomationTestSettings;
}

declare class BandwidthTestItem { 
	Kilobyte: number[];
	clone() : BandwidthTestItem;
	static C(Other: UObject | any): BandwidthTestItem;
}

declare class BandwidthTestGenerator { 
	ReplicatedBuffers: BandwidthTestItem[];
	clone() : BandwidthTestGenerator;
	static C(Other: UObject | any): BandwidthTestGenerator;
}

declare class BandwidthTestActor extends Actor { 
	BandwidthGenerator: BandwidthTestGenerator;
	static GetDefaultObject(): BandwidthTestActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BandwidthTestActor;
	static C(Other: UObject | any): BandwidthTestActor;
}

declare class BlendableInterface extends Interface { 
	static Load(ResourceName: string): BlendableInterface;
	static Find(Outer: UObject, ResourceName: string): BlendableInterface;
	static GetDefaultObject(): BlendableInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendableInterface;
	static C(Other: UObject | any): BlendableInterface;
}

declare class BlockingVolume extends Volume { 
	static GetDefaultObject(): BlockingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlockingVolume;
	static C(Other: UObject | any): BlockingVolume;
}

declare class BlueprintMapLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BlueprintMapLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintMapLibrary;
	static GetDefaultObject(): BlueprintMapLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintMapLibrary;
	static SetMapPropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
	static Map_Values(TargetMap: any,Values?: number[]): {Values: number[]};
	static Map_Remove(TargetMap: any,Key: number): boolean;
	static Map_Length(TargetMap: any): number;
	static Map_Keys(TargetMap: any,Keys?: number[]): {Keys: number[]};
	static Map_Find(TargetMap: any,Key: number,Value?: number): {Value: number, $: boolean};
	static Map_Contains(TargetMap: any,Key: number): boolean;
	static Map_Clear(TargetMap: any): void;
	static Map_Add(TargetMap: any,Key: number,Value: number): void;
	static C(Other: UObject | any): BlueprintMapLibrary;
}

declare class BlueprintPathsLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BlueprintPathsLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintPathsLibrary;
	static GetDefaultObject(): BlueprintPathsLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPathsLibrary;
	static VideoCaptureDir(): string;
	static ValidatePath(InPath: string,bDidSucceed?: boolean,OutReason?: string): {bDidSucceed: boolean, OutReason: string};
	static Split(InPath: string,PathPart?: string,FilenamePart?: string,ExtensionPart?: string): {PathPart: string, FilenamePart: string, ExtensionPart: string};
	static SourceConfigDir(): string;
	static ShouldSaveToUserDir(): boolean;
	static ShaderWorkingDir(): string;
	static SetProjectFilePath(NewGameProjectFilePath: string): void;
	static SetExtension(InPath: string,InNewExtension: string): string;
	static ScreenShotDir(): string;
	static SandboxesDir(): string;
	static RootDir(): string;
	static RemoveDuplicateSlashes(InPath: string,OutPath?: string): {OutPath: string};
	static ProjectUserDir(): string;
	static ProjectSavedDir(): string;
	static ProjectPluginsDir(): string;
	static ProjectPersistentDownloadDir(): string;
	static ProjectModsDir(): string;
	static ProjectLogDir(): string;
	static ProjectIntermediateDir(): string;
	static ProjectDir(): string;
	static ProjectContentDir(): string;
	static ProjectConfigDir(): string;
	static ProfilingDir(): string;
	static NormalizeFilename(InPath: string,OutPath?: string): {OutPath: string};
	static NormalizeDirectoryName(InPath: string,OutPath?: string): {OutPath: string};
	static MakeValidFileName(inString: string,InReplacementChar: string): string;
	static MakeStandardFilename(InPath: string,OutPath?: string): {OutPath: string};
	static MakePlatformFilename(InPath: string,OutPath?: string): {OutPath: string};
	static MakePathRelativeTo(InPath: string,InRelativeTo: string,OutPath?: string): {OutPath: string, $: boolean};
	static LaunchDir(): string;
	static IsSamePath(PathA: string,PathB: string): boolean;
	static IsRestrictedPath(InPath: string): boolean;
	static IsRelative(InPath: string): boolean;
	static IsProjectFilePathSet(): boolean;
	static IsDrive(InPath: string): boolean;
	static HasProjectPersistentDownloadDir(): boolean;
	static GetToolTipLocalizationPaths(): string[];
	static GetRestrictedFolderNames(): string[];
	static GetRelativePathToRoot(): string;
	static GetPropertyNameLocalizationPaths(): string[];
	static GetProjectFilePath(): string;
	static GetPath(InPath: string): string;
	static GetInvalidFileSystemChars(): string;
	static GetGameLocalizationPaths(): string[];
	static GetExtension(InPath: string,bIncludeDot: boolean): string;
	static GetEngineLocalizationPaths(): string[];
	static GetEditorLocalizationPaths(): string[];
	static GetCleanFilename(InPath: string): string;
	static GetBaseFilename(InPath: string,bRemovePath: boolean): string;
	static GeneratedConfigDir(): string;
	static GameUserDeveloperDir(): string;
	static GameSourceDir(): string;
	static GameDevelopersDir(): string;
	static GameAgnosticSavedDir(): string;
	static FileExists(InPath: string): boolean;
	static FeaturePackDir(): string;
	static EnterprisePluginsDir(): string;
	static EnterpriseFeaturePackDir(): string;
	static EnterpriseDir(): string;
	static EngineVersionAgnosticUserDir(): string;
	static EngineUserDir(): string;
	static EngineSourceDir(): string;
	static EngineSavedDir(): string;
	static EnginePluginsDir(): string;
	static EngineIntermediateDir(): string;
	static EngineDir(): string;
	static EngineContentDir(): string;
	static EngineConfigDir(): string;
	static DirectoryExists(InPath: string): boolean;
	static DiffDir(): string;
	static CreateTempFilename(Path: string,Prefix: string,Extension: string): string;
	static ConvertToSandboxPath(InPath: string,InSandboxName: string): string;
	static ConvertRelativePathToFull(InPath: string,InBasePath: string): string;
	static ConvertFromSandboxPath(InPath: string,InSandboxName: string): string;
	static Combine(InPaths: string[]): string;
	static CollapseRelativeDirectories(InPath: string,OutPath?: string): {OutPath: string, $: boolean};
	static CloudDir(): string;
	static ChangeExtension(InPath: string,InNewExtension: string): string;
	static BugItDir(): string;
	static AutomationTransientDir(): string;
	static AutomationLogDir(): string;
	static AutomationDir(): string;
	static C(Other: UObject | any): BlueprintPathsLibrary;
}

declare type EApplicationState = 'Unknown' | 'Inactive' | 'Background' | 'Active' | 'EApplicationState_MAX';
declare var EApplicationState : { Unknown:'Unknown',Inactive:'Inactive',Background:'Background',Active:'Active',EApplicationState_MAX:'EApplicationState_MAX', };
declare type EScreenOrientation = 'Unknown' | 'Portrait' | 'PortraitUpsideDown' | 'LandscapeLeft' | 'LandscapeRight' | 'FaceUp' | 'FaceDown' | 'EScreenOrientation_MAX';
declare var EScreenOrientation : { Unknown:'Unknown',Portrait:'Portrait',PortraitUpsideDown:'PortraitUpsideDown',LandscapeLeft:'LandscapeLeft',LandscapeRight:'LandscapeRight',FaceUp:'FaceUp',FaceDown:'FaceDown',EScreenOrientation_MAX:'EScreenOrientation_MAX', };
declare class PlatformGameInstance extends GameInstance { 
	ApplicationWillDeactivateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasReactivatedDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillEnterBackgroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasEnteredForegroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillTerminateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationShouldUnloadResourcesDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationReceivedStartupArgumentsDelegate: UnrealEngineMulticastDelegate<(StartupArguments: string[]) => void>;
	ApplicationRegisteredForRemoteNotificationsDelegate: UnrealEngineMulticastDelegate<(inArray: number[]) => void>;
	ApplicationRegisteredForUserNotificationsDelegate: UnrealEngineMulticastDelegate<(inInt: number) => void>;
	ApplicationFailedToRegisterForRemoteNotificationsDelegate: UnrealEngineMulticastDelegate<(inString: string) => void>;
	ApplicationReceivedRemoteNotificationDelegate: UnrealEngineMulticastDelegate<(inString: string, inAppState: EApplicationState) => void>;
	ApplicationReceivedLocalNotificationDelegate: UnrealEngineMulticastDelegate<(inString: string, inInt: number, inAppState: EApplicationState) => void>;
	ApplicationReceivedScreenOrientationChangedNotificationDelegate: UnrealEngineMulticastDelegate<(inScreenOrientation: EScreenOrientation) => void>;
	static Load(ResourceName: string): PlatformGameInstance;
	static Find(Outer: UObject, ResourceName: string): PlatformGameInstance;
	static GetDefaultObject(): PlatformGameInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformGameInstance;
	static C(Other: UObject | any): PlatformGameInstance;
}

declare class BlueprintPlatformLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BlueprintPlatformLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintPlatformLibrary;
	static GetDefaultObject(): BlueprintPlatformLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPlatformLibrary;
	static ScheduleLocalNotificationFromNow(inSecondsFromNow: number,Title: string,Body: string,Action: string,ActivationEvent: string): number;
	static ScheduleLocalNotificationBadgeFromNow(inSecondsFromNow: number,ActivationEvent: string): void;
	static ScheduleLocalNotificationBadgeAtTime(FireDateTime: DateTime,LocalTime: boolean,ActivationEvent: string): number;
	static ScheduleLocalNotificationAtTime(FireDateTime: DateTime,LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): number;
	static GetLaunchNotification(NotificationLaunchedApp?: boolean,ActivationEvent?: string,FireDate?: number): {NotificationLaunchedApp: boolean, ActivationEvent: string, FireDate: number};
	static GetDeviceOrientation(): EScreenOrientation;
	static ClearAllLocalNotifications(): void;
	static CancelLocalNotificationById(NotificationId: number): void;
	static CancelLocalNotification(ActivationEvent: string): void;
	static C(Other: UObject | any): BlueprintPlatformLibrary;
}

declare class BlueprintSetLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BlueprintSetLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintSetLibrary;
	static GetDefaultObject(): BlueprintSetLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintSetLibrary;
	static SetSetPropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
	static Set_Union(A: any,B: any,Result?: any): {Result: any};
	static Set_ToArray(A: any,Result?: number[]): {Result: number[]};
	static Set_RemoveItems(TargetSet: any,Items: number[]): void;
	static Set_Remove(TargetSet: any,Item: number): boolean;
	static Set_Length(TargetSet: any): number;
	static Set_Intersection(A: any,B: any,Result?: any): {Result: any};
	static Set_Difference(A: any,B: any,Result?: any): {Result: any};
	static Set_Contains(TargetSet: any,ItemToFind: number): boolean;
	static Set_Clear(TargetSet: any): void;
	static Set_AddItems(TargetSet: any,NewItems: number[]): void;
	static Set_Add(TargetSet: any,NewItem: number): void;
	static C(Other: UObject | any): BlueprintSetLibrary;
}

declare class BoneMaskFilter extends UObject { 
	BlendPoses: InputBlendPose[];
	static Load(ResourceName: string): BoneMaskFilter;
	static Find(Outer: UObject, ResourceName: string): BoneMaskFilter;
	static GetDefaultObject(): BoneMaskFilter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoneMaskFilter;
	static C(Other: UObject | any): BoneMaskFilter;
}

declare class BookMark2D extends BookmarkBase { 
	Zoom2D: number;
	Location: IntPoint;
	static Load(ResourceName: string): BookMark2D;
	static Find(Outer: UObject, ResourceName: string): BookMark2D;
	static GetDefaultObject(): BookMark2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BookMark2D;
	static C(Other: UObject | any): BookMark2D;
}

declare class BoundsCopyComponent extends ActorComponent { 
	BoundsSourceActor: Actor;
	bUseCollidingComponentsForSourceBounds: boolean;
	bKeepOwnBoundsScale: boolean;
	bUseCollidingComponentsForOwnBounds: boolean;
	PostTransform: Transform;
	bCopyXBounds: boolean;
	bCopyYBounds: boolean;
	bCopyZBounds: boolean;
	static Load(ResourceName: string): BoundsCopyComponent;
	static Find(Outer: UObject, ResourceName: string): BoundsCopyComponent;
	static GetDefaultObject(): BoundsCopyComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoundsCopyComponent;
	SetTransformToBounds(): void;
	SetRotation(): void;
	static C(Other: UObject | any): BoundsCopyComponent;
}

declare type EReflectionSourceType = 'CapturedScene' | 'SpecifiedCubemap' | 'EReflectionSourceType_MAX';
declare var EReflectionSourceType : { CapturedScene:'CapturedScene',SpecifiedCubemap:'SpecifiedCubemap',EReflectionSourceType_MAX:'EReflectionSourceType_MAX', };
declare type EMobileReflectionCompression = 'Default' | 'On' | 'Off' | 'EMobileReflectionCompression_MAX';
declare var EMobileReflectionCompression : { Default:'Default',On:'On',Off:'Off',EMobileReflectionCompression_MAX:'EMobileReflectionCompression_MAX', };
declare class ReflectionCaptureComponent extends SceneComponent { 
	CaptureOffsetComponent: BillboardComponent;
	ReflectionSourceType: EReflectionSourceType;
	MobileReflectionCompression: EMobileReflectionCompression;
	Cubemap: TextureCube;
	SourceCubemapAngle: number;
	Brightness: number;
	bModifyMaxValueRGBM: boolean;
	MaxValueRGBM: number;
	CaptureOffset: Vector;
	MapBuildDataId: Guid;
	CachedEncodedHDRCubemap: TextureCube;
	static Load(ResourceName: string): ReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): ReflectionCaptureComponent;
	static GetDefaultObject(): ReflectionCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReflectionCaptureComponent;
	static C(Other: UObject | any): ReflectionCaptureComponent;
}

declare class ReflectionCapture extends Actor { 
	CaptureComponent: ReflectionCaptureComponent;
	SpriteComponent: BillboardComponent;
	CaptureOffsetComponent: BillboardComponent;
	static GetDefaultObject(): ReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReflectionCapture;
	static C(Other: UObject | any): ReflectionCapture;
}

declare class BoxReflectionCapture extends ReflectionCapture { 
	static GetDefaultObject(): BoxReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoxReflectionCapture;
	static C(Other: UObject | any): BoxReflectionCapture;
}

declare class BoxReflectionCaptureComponent extends ReflectionCaptureComponent { 
	BoxTransitionDistance: number;
	PreviewInfluenceBox: BoxComponent;
	PreviewCaptureBox: BoxComponent;
	static Load(ResourceName: string): BoxReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): BoxReflectionCaptureComponent;
	static GetDefaultObject(): BoxReflectionCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoxReflectionCaptureComponent;
	static C(Other: UObject | any): BoxReflectionCaptureComponent;
}

declare class BrushShape extends Brush { 
	static GetDefaultObject(): BrushShape;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushShape;
	static C(Other: UObject | any): BrushShape;
}

declare class ButtonStyleAsset extends UObject { 
	ButtonStyle: ButtonStyle;
	static Load(ResourceName: string): ButtonStyleAsset;
	static Find(Outer: UObject, ResourceName: string): ButtonStyleAsset;
	static GetDefaultObject(): ButtonStyleAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ButtonStyleAsset;
	static C(Other: UObject | any): ButtonStyleAsset;
}

declare class CameraBlockingVolume extends Volume { 
	static GetDefaultObject(): CameraBlockingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraBlockingVolume;
	static C(Other: UObject | any): CameraBlockingVolume;
}

declare class CameraShakeSourceActor extends Actor { 
	CameraShakeSourceComponent: CameraShakeSourceComponent;
	static GetDefaultObject(): CameraShakeSourceActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraShakeSourceActor;
	static C(Other: UObject | any): CameraShakeSourceActor;
}

declare class CanvasRenderTarget2D extends TextureRenderTarget2D { 
	OnCanvasRenderTargetUpdate: UnrealEngineMulticastDelegate<(Canvas: Canvas, Width: number, Height: number) => void>;
	World: any;
	bShouldClearRenderTargetOnReceiveUpdate: boolean;
	static Load(ResourceName: string): CanvasRenderTarget2D;
	static Find(Outer: UObject, ResourceName: string): CanvasRenderTarget2D;
	static GetDefaultObject(): CanvasRenderTarget2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CanvasRenderTarget2D;
	UpdateResource(): void;
	ReceiveUpdate(Canvas: Canvas,Width: number,Height: number): void;
	GetSize(Width?: number,Height?: number): {Width: number, Height: number};
	static CreateCanvasRenderTarget2D(WorldContextObject: UObject,CanvasRenderTarget2DClass: UnrealEngineClass,Width: number,Height: number): CanvasRenderTarget2D;
	static C(Other: UObject | any): CanvasRenderTarget2D;
}

declare class CheckBoxStyleAsset extends UObject { 
	CheckBoxStyle: CheckBoxStyle;
	static Load(ResourceName: string): CheckBoxStyleAsset;
	static Find(Outer: UObject, ResourceName: string): CheckBoxStyleAsset;
	static GetDefaultObject(): CheckBoxStyleAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CheckBoxStyleAsset;
	static C(Other: UObject | any): CheckBoxStyleAsset;
}

declare type EPlatformInterfaceDataType = 'PIDT_None' | 'PIDT_Int' | 'PIDT_Float' | 'PIDT_String' | 'PIDT_Object' | 'PIDT_Custom' | 'PIDT_MAX';
declare var EPlatformInterfaceDataType : { PIDT_None:'PIDT_None',PIDT_Int:'PIDT_Int',PIDT_Float:'PIDT_Float',PIDT_String:'PIDT_String',PIDT_Object:'PIDT_Object',PIDT_Custom:'PIDT_Custom',PIDT_MAX:'PIDT_MAX', };
declare class PlatformInterfaceData { 
	DataName: string;
	Type: EPlatformInterfaceDataType;
	IntValue: number;
	FloatValue: number;
	StringValue: string;
	ObjectValue: UObject;
	clone() : PlatformInterfaceData;
	static C(Other: UObject | any): PlatformInterfaceData;
}

declare class PlatformInterfaceDelegateResult { 
	bSuccessful: boolean;
	Data: PlatformInterfaceData;
	clone() : PlatformInterfaceDelegateResult;
	static C(Other: UObject | any): PlatformInterfaceDelegateResult;
}

declare class DelegateArray { 
	Delegates: UnrealEngineDelegate<(Result: PlatformInterfaceDelegateResult) => void>[];
	clone() : DelegateArray;
	static C(Other: UObject | any): DelegateArray;
}

declare class PlatformInterfaceBase extends UObject { 
	AllDelegates: DelegateArray[];
	static Load(ResourceName: string): PlatformInterfaceBase;
	static Find(Outer: UObject, ResourceName: string): PlatformInterfaceBase;
	static GetDefaultObject(): PlatformInterfaceBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformInterfaceBase;
	static C(Other: UObject | any): PlatformInterfaceBase;
}

declare class CloudStorageBase extends PlatformInterfaceBase { 
	LocalCloudFiles: string[];
	bSuppressDelegateCalls: boolean;
	static Load(ResourceName: string): CloudStorageBase;
	static Find(Outer: UObject, ResourceName: string): CloudStorageBase;
	static GetDefaultObject(): CloudStorageBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CloudStorageBase;
	static C(Other: UObject | any): CloudStorageBase;
}

declare class CollisionResponseTemplate { 
	Name: string;
	CollisionEnabled: ECollisionEnabled;
	bCanModify: boolean;
	ObjectTypeName: string;
	CustomResponses: ResponseChannel[];
	HelpMessage: string;
	clone() : CollisionResponseTemplate;
	static C(Other: UObject | any): CollisionResponseTemplate;
}

declare class CustomChannelSetup { 
	Channel: ECollisionChannel;
	DefaultResponse: ECollisionResponse;
	bTraceType: boolean;
	bStaticObject: boolean;
	Name: string;
	clone() : CustomChannelSetup;
	static C(Other: UObject | any): CustomChannelSetup;
}

declare class CustomProfile { 
	Name: string;
	CustomResponses: ResponseChannel[];
	clone() : CustomProfile;
	static C(Other: UObject | any): CustomProfile;
}

declare class Redirector { 
	OldName: string;
	NewName: string;
	clone() : Redirector;
	static C(Other: UObject | any): Redirector;
}

declare class CollisionProfile extends DeveloperSettings { 
	Profiles: CollisionResponseTemplate[];
	DefaultChannelResponses: CustomChannelSetup[];
	EditProfiles: CustomProfile[];
	ProfileRedirects: Redirector[];
	CollisionChannelRedirects: Redirector[];
	static Load(ResourceName: string): CollisionProfile;
	static Find(Outer: UObject, ResourceName: string): CollisionProfile;
	static GetDefaultObject(): CollisionProfile;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CollisionProfile;
	static C(Other: UObject | any): CollisionProfile;
}

declare class BlueprintComponentDelegateBinding { 
	ComponentPropertyName: string;
	DelegatePropertyName: string;
	FunctionNameToBind: string;
	clone() : BlueprintComponentDelegateBinding;
	static C(Other: UObject | any): BlueprintComponentDelegateBinding;
}

declare class ComponentDelegateBinding extends DynamicBlueprintBinding { 
	ComponentDelegateBindings: BlueprintComponentDelegateBinding[];
	static Load(ResourceName: string): ComponentDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): ComponentDelegateBinding;
	static GetDefaultObject(): ComponentDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComponentDelegateBinding;
	static C(Other: UObject | any): ComponentDelegateBinding;
}

declare class ActorComponentInstanceDataTransientOuter extends UObject { 
	static Load(ResourceName: string): ActorComponentInstanceDataTransientOuter;
	static Find(Outer: UObject, ResourceName: string): ActorComponentInstanceDataTransientOuter;
	static GetDefaultObject(): ActorComponentInstanceDataTransientOuter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorComponentInstanceDataTransientOuter;
	static C(Other: UObject | any): ActorComponentInstanceDataTransientOuter;
}

declare class CompositeCurveTable extends CurveTable { 
	ParentTables: CurveTable[];
	OldParentTables: CurveTable[];
	static Load(ResourceName: string): CompositeCurveTable;
	static Find(Outer: UObject, ResourceName: string): CompositeCurveTable;
	static GetDefaultObject(): CompositeCurveTable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompositeCurveTable;
	static C(Other: UObject | any): CompositeCurveTable;
}

declare class CompositeDataTable extends DataTable { 
	ParentTables: DataTable[];
	OldParentTables: DataTable[];
	static Load(ResourceName: string): CompositeDataTable;
	static Find(Outer: UObject, ResourceName: string): CompositeDataTable;
	static GetDefaultObject(): CompositeDataTable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompositeDataTable;
	static C(Other: UObject | any): CompositeDataTable;
}

declare class ControlChannel extends Channel { 
	static Load(ResourceName: string): ControlChannel;
	static Find(Outer: UObject, ResourceName: string): ControlChannel;
	static GetDefaultObject(): ControlChannel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ControlChannel;
	static C(Other: UObject | any): ControlChannel;
}

declare class StreamingSettings extends DeveloperSettings { 
	AsyncLoadingThreadEnabled: boolean;
	WarnIfTimeLimitExceeded: boolean;
	TimeLimitExceededMultiplier: number;
	TimeLimitExceededMinTime: number;
	MinBulkDataSizeForAsyncLoading: number;
	UseBackgroundLevelStreaming: boolean;
	AsyncLoadingUseFullTimeLimit: boolean;
	AsyncLoadingTimeLimit: number;
	PriorityAsyncLoadingExtraTime: number;
	LevelStreamingActorsUpdateTimeLimit: number;
	PriorityLevelStreamingActorsUpdateExtraTime: number;
	LevelStreamingComponentsRegistrationGranularity: number;
	LevelStreamingUnregisterComponentsTimeLimit: number;
	LevelStreamingComponentsUnregistrationGranularity: number;
	FlushStreamingOnExit: boolean;
	EventDrivenLoaderEnabled: boolean;
	static Load(ResourceName: string): StreamingSettings;
	static Find(Outer: UObject, ResourceName: string): StreamingSettings;
	static GetDefaultObject(): StreamingSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StreamingSettings;
	static C(Other: UObject | any): StreamingSettings;
}

declare class GarbageCollectionSettings extends DeveloperSettings { 
	TimeBetweenPurgingPendingKillObjects: number;
	FlushStreamingOnGC: boolean;
	AllowParallelGC: boolean;
	IncrementalBeginDestroyEnabled: boolean;
	MultithreadedDestructionEnabled: boolean;
	CreateGCClusters: boolean;
	AssetClusteringEnabled: boolean;
	ActorClusteringEnabled: boolean;
	BlueprintClusteringEnabled: boolean;
	UseDisregardForGCOnDedicatedServers: boolean;
	MinGCClusterSize: number;
	NumRetriesBeforeForcingGC: number;
	MaxObjectsNotConsideredByGC: number;
	SizeOfPermanentObjectPool: number;
	MaxObjectsInGame: number;
	MaxObjectsInEditor: number;
	static Load(ResourceName: string): GarbageCollectionSettings;
	static Find(Outer: UObject, ResourceName: string): GarbageCollectionSettings;
	static GetDefaultObject(): GarbageCollectionSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GarbageCollectionSettings;
	static C(Other: UObject | any): GarbageCollectionSettings;
}

declare class CullDistanceSizePair { 
	Size: number;
	CullDistance: number;
	clone() : CullDistanceSizePair;
	static C(Other: UObject | any): CullDistanceSizePair;
}

declare class CullDistanceVolume extends Volume { 
	CullDistances: CullDistanceSizePair[];
	bEnabled: boolean;
	static GetDefaultObject(): CullDistanceVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CullDistanceVolume;
	static C(Other: UObject | any): CullDistanceVolume;
}

declare class CurveEdPresetCurve extends UObject { 
	static Load(ResourceName: string): CurveEdPresetCurve;
	static Find(Outer: UObject, ResourceName: string): CurveEdPresetCurve;
	static GetDefaultObject(): CurveEdPresetCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEdPresetCurve;
	static C(Other: UObject | any): CurveEdPresetCurve;
}

declare class NamedCurveValue { 
	Name: string;
	Value: number;
	clone() : NamedCurveValue;
	static C(Other: UObject | any): NamedCurveValue;
}

declare class CurveSourceInterface extends Interface { 
	static Load(ResourceName: string): CurveSourceInterface;
	static Find(Outer: UObject, ResourceName: string): CurveSourceInterface;
	static GetDefaultObject(): CurveSourceInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveSourceInterface;
	GetCurveValue(CurveName: string): number;
	GetCurves(OutValues?: NamedCurveValue[]): {OutValues: NamedCurveValue[]};
	GetBindingName(): string;
	static C(Other: UObject | any): CurveSourceInterface;
}

declare class AssetBundleEntry { 
	BundleName: string;
	BundleAssets: SoftObjectPath[];
	clone() : AssetBundleEntry;
	static C(Other: UObject | any): AssetBundleEntry;
}

declare class AssetBundleData { 
	Bundles: AssetBundleEntry[];
	clone() : AssetBundleData;
	static C(Other: UObject | any): AssetBundleData;
}

declare class PrimaryDataAsset extends DataAsset { 
	AssetBundleData: AssetBundleData;
	static Load(ResourceName: string): PrimaryDataAsset;
	static Find(Outer: UObject, ResourceName: string): PrimaryDataAsset;
	static GetDefaultObject(): PrimaryDataAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrimaryDataAsset;
	static C(Other: UObject | any): PrimaryDataAsset;
}

declare class DataDrivenCVarEngineSubsystem extends EngineSubsystem { 
	OnDataDrivenCVarDelegate: UnrealEngineMulticastDelegate<(CVarName: string) => void>;
	static Load(ResourceName: string): DataDrivenCVarEngineSubsystem;
	static Find(Outer: UObject, ResourceName: string): DataDrivenCVarEngineSubsystem;
	static GetDefaultObject(): DataDrivenCVarEngineSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataDrivenCVarEngineSubsystem;
	static C(Other: UObject | any): DataDrivenCVarEngineSubsystem;
}

declare type FDataDrivenCVarType = 'CVarFloat' | 'CVarInt' | 'CVarBool' | 'FDataDrivenCVarType_MAX';
declare var FDataDrivenCVarType : { CVarFloat:'CVarFloat',CVarInt:'CVarInt',CVarBool:'CVarBool',FDataDrivenCVarType_MAX:'FDataDrivenCVarType_MAX', };
declare class DataDrivenConsoleVariable { 
	Type: FDataDrivenCVarType;
	Name: string;
	Tooltip: string;
	DefaultValueFloat: number;
	DefaultValueInt: number;
	DefaultValueBool: boolean;
	clone() : DataDrivenConsoleVariable;
	static C(Other: UObject | any): DataDrivenConsoleVariable;
}

declare class DataDrivenConsoleVariableSettings extends DeveloperSettings { 
	CVarsArray: DataDrivenConsoleVariable[];
	static Load(ResourceName: string): DataDrivenConsoleVariableSettings;
	static Find(Outer: UObject, ResourceName: string): DataDrivenConsoleVariableSettings;
	static GetDefaultObject(): DataDrivenConsoleVariableSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataDrivenConsoleVariableSettings;
	static C(Other: UObject | any): DataDrivenConsoleVariableSettings;
}

declare class DataTableFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): DataTableFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): DataTableFunctionLibrary;
	static GetDefaultObject(): DataTableFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataTableFunctionLibrary;
	static GetDataTableRowNames(Table: DataTable,OutRowNames?: string[]): {OutRowNames: string[]};
	static GetDataTableRowFromName(Table: DataTable,RowName: string,OutRow?: TableRowBase): {OutRow: TableRowBase, $: boolean};
	static GetDataTableColumnAsString(DataTable: DataTable,PropertyName: string): string[];
	static FillDataTableFromJSONString(DataTable: DataTable,JsonString: string): boolean;
	static FillDataTableFromJSONFile(DataTable: DataTable,JSONFilePath: string,ImportRowStruct: ScriptStruct): boolean;
	static FillDataTableFromCSVString(DataTable: DataTable,CSVString: string): boolean;
	static FillDataTableFromCSVFile(DataTable: DataTable,CSVFilePath: string): boolean;
	static EvaluateCurveTableRow(CurveTable: CurveTable,RowName: string,InXY: number,OutResult?: EEvaluateCurveTableResult,OutXY?: number,ContextString?: string): {OutResult: EEvaluateCurveTableResult, OutXY: number};
	static DoesDataTableRowExist(Table: DataTable,RowName: string): boolean;
	static C(Other: UObject | any): DataTableFunctionLibrary;
}

declare class DebugCameraControllerSettingsViewModeIndex { 
	ViewModeIndex: EViewModeIndex;
	clone() : DebugCameraControllerSettingsViewModeIndex;
	static C(Other: UObject | any): DebugCameraControllerSettingsViewModeIndex;
}

declare class DebugCameraControllerSettings extends DeveloperSettings { 
	CycleViewModes: DebugCameraControllerSettingsViewModeIndex[];
	static Load(ResourceName: string): DebugCameraControllerSettings;
	static Find(Outer: UObject, ResourceName: string): DebugCameraControllerSettings;
	static GetDefaultObject(): DebugCameraControllerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugCameraControllerSettings;
	static C(Other: UObject | any): DebugCameraControllerSettings;
}

declare class DebugCameraHUD extends HUD { 
	static GetDefaultObject(): DebugCameraHUD;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugCameraHUD;
	static C(Other: UObject | any): DebugCameraHUD;
}

declare class DebugDrawService extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): DebugDrawService;
	static Find(Outer: UObject, ResourceName: string): DebugDrawService;
	static GetDefaultObject(): DebugDrawService;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugDrawService;
	static C(Other: UObject | any): DebugDrawService;
}

declare class DecalActor extends Actor { 
	Decal: DecalComponent;
	ArrowComponent: ArrowComponent;
	SpriteComponent: BillboardComponent;
	BoxComponent: BoxComponent;
	static GetDefaultObject(): DecalActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DecalActor;
	SetDecalMaterial(NewDecalMaterial: MaterialInterface): void;
	GetDecalMaterial(): MaterialInterface;
	CreateDynamicMaterialInstance(): MaterialInstanceDynamic;
	static C(Other: UObject | any): DecalActor;
}

declare class DemoNetConnection extends NetConnection { 
	static Load(ResourceName: string): DemoNetConnection;
	static Find(Outer: UObject, ResourceName: string): DemoNetConnection;
	static GetDefaultObject(): DemoNetConnection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DemoNetConnection;
	static C(Other: UObject | any): DemoNetConnection;
}

declare class PendingNetGame extends UObject { 
	NetDriver: NetDriver;
	DemoNetDriver: DemoNetDriver;
	static Load(ResourceName: string): PendingNetGame;
	static Find(Outer: UObject, ResourceName: string): PendingNetGame;
	static GetDefaultObject(): PendingNetGame;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PendingNetGame;
	static C(Other: UObject | any): PendingNetGame;
}

declare class DemoPendingNetGame extends PendingNetGame { 
	static Load(ResourceName: string): DemoPendingNetGame;
	static Find(Outer: UObject, ResourceName: string): DemoPendingNetGame;
	static GetDefaultObject(): DemoPendingNetGame;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DemoPendingNetGame;
	static C(Other: UObject | any): DemoPendingNetGame;
}

declare class DestructibleInterface extends Interface { 
	static Load(ResourceName: string): DestructibleInterface;
	static Find(Outer: UObject, ResourceName: string): DestructibleInterface;
	static GetDefaultObject(): DestructibleInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleInterface;
	static C(Other: UObject | any): DestructibleInterface;
}

declare class TextureLODGroup { 
	Group: TextureGroup;
	LODBias: number;
	LODBias_Smaller: number;
	LODBias_Smallest: number;
	NumStreamedMips: number;
	MipGenSettings: TextureMipGenSettings;
	MinLODSize: number;
	MaxLODSize: number;
	MaxLODSize_Smaller: number;
	MaxLODSize_Smallest: number;
	OptionalLODBias: number;
	OptionalMaxLODSize: number;
	MinMagFilter: string;
	MipFilter: string;
	MipLoadOptions: ETextureMipLoadOptions;
	HighPriorityLoad: boolean;
	DuplicateNonOptionalMips: boolean;
	Downscale: number;
	DownscaleOptions: ETextureDownscaleOptions;
	VirtualTextureTileCountBias: number;
	VirtualTextureTileSizeBias: number;
	LossyCompressionAmount: ETextureLossyCompressionAmount;
	clone() : TextureLODGroup;
	static C(Other: UObject | any): TextureLODGroup;
}

declare class TextureLODSettings extends UObject { 
	TextureLODGroups: TextureLODGroup[];
	static Load(ResourceName: string): TextureLODSettings;
	static Find(Outer: UObject, ResourceName: string): TextureLODSettings;
	static GetDefaultObject(): TextureLODSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureLODSettings;
	static C(Other: UObject | any): TextureLODSettings;
}

declare class DeviceProfile extends TextureLODSettings { 
	DeviceType: string;
	BaseProfileName: string;
	Parent: UObject;
	CVars: string[];
	static Load(ResourceName: string): DeviceProfile;
	static Find(Outer: UObject, ResourceName: string): DeviceProfile;
	static GetDefaultObject(): DeviceProfile;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeviceProfile;
	static C(Other: UObject | any): DeviceProfile;
}

declare class DeviceProfileFragment extends UObject { 
	static Load(ResourceName: string): DeviceProfileFragment;
	static Find(Outer: UObject, ResourceName: string): DeviceProfileFragment;
	static GetDefaultObject(): DeviceProfileFragment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeviceProfileFragment;
	static C(Other: UObject | any): DeviceProfileFragment;
}

declare class DeviceProfileManager extends UObject { 
	Profiles: UObject[];
	static Load(ResourceName: string): DeviceProfileManager;
	static Find(Outer: UObject, ResourceName: string): DeviceProfileManager;
	static GetDefaultObject(): DeviceProfileManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeviceProfileManager;
	static C(Other: UObject | any): DeviceProfileManager;
}

declare class Light extends Actor { 
	LightComponent: LightComponent;
	bEnabled: boolean;
	static GetDefaultObject(): Light;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Light;
	ToggleEnabled(): void;
	SetLightFunctionScale(NewLightFunctionScale: Vector): void;
	SetLightFunctionMaterial(NewLightFunctionMaterial: MaterialInterface): void;
	SetLightFunctionFadeDistance(NewLightFunctionFadeDistance: number): void;
	SetLightColor(NewLightColor: LinearColor): void;
	SetEnabled(bSetEnabled: boolean): void;
	SetCastShadows(bNewValue: boolean): void;
	SetBrightness(NewBrightness: number): void;
	SetAffectTranslucentLighting(bNewValue: boolean): void;
	OnRep_bEnabled(): void;
	IsEnabled(): boolean;
	GetLightColor(): LinearColor;
	GetBrightness(): number;
	static C(Other: UObject | any): Light;
}

declare class LightmassDirectionalLightSettings extends LightmassLightSettings { 
	LightSourceAngle: number;
	clone() : LightmassDirectionalLightSettings;
	static C(Other: UObject | any): LightmassDirectionalLightSettings;
}

declare class DirectionalLightComponent extends LightComponent { 
	ShadowCascadeBiasDistribution: number;
	bEnableLightShaftOcclusion: boolean;
	OcclusionMaskDarkness: number;
	OcclusionDepthRange: number;
	LightShaftOverrideDirection: Vector;
	WholeSceneDynamicShadowRadius: number;
	DynamicShadowDistanceMovableLight: number;
	DynamicShadowDistanceStationaryLight: number;
	DynamicShadowCascades: number;
	CascadeDistributionExponent: number;
	CascadeTransitionFraction: number;
	ShadowDistanceFadeoutFraction: number;
	bUseInsetShadowsForMovableObjects: boolean;
	FarShadowCascadeCount: number;
	FarShadowDistance: number;
	DistanceFieldShadowDistance: number;
	LightSourceAngle: number;
	LightSourceSoftAngle: number;
	ShadowSourceAngleFactor: number;
	TraceDistance: number;
	bUsedAsAtmosphereSunLight: boolean;
	AtmosphereSunLightIndex: number;
	AtmosphereSunDiskColorScale: LinearColor;
	bPerPixelAtmosphereTransmittance: boolean;
	bCastShadowsOnClouds: boolean;
	bCastShadowsOnAtmosphere: boolean;
	bCastCloudShadows: boolean;
	CloudShadowStrength: number;
	CloudShadowOnAtmosphereStrength: number;
	CloudShadowOnSurfaceStrength: number;
	CloudShadowDepthBias: number;
	CloudShadowExtent: number;
	CloudShadowMapResolutionScale: number;
	CloudShadowRaySampleCountScale: number;
	CloudScatteredLuminanceScale: LinearColor;
	LightmassSettings: LightmassDirectionalLightSettings;
	bCastModulatedShadows: boolean;
	ModulatedShadowColor: Color;
	ShadowAmount: number;
	static Load(ResourceName: string): DirectionalLightComponent;
	static Find(Outer: UObject, ResourceName: string): DirectionalLightComponent;
	static GetDefaultObject(): DirectionalLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DirectionalLightComponent;
	SetShadowDistanceFadeoutFraction(NewValue: number): void;
	SetShadowAmount(NewValue: number): void;
	SetOcclusionMaskDarkness(NewValue: number): void;
	SetLightShaftOverrideDirection(NewValue: Vector): void;
	SetEnableLightShaftOcclusion(bNewValue: boolean): void;
	SetDynamicShadowDistanceStationaryLight(NewValue: number): void;
	SetDynamicShadowDistanceMovableLight(NewValue: number): void;
	SetDynamicShadowCascades(NewValue: number): void;
	SetCascadeTransitionFraction(NewValue: number): void;
	SetCascadeDistributionExponent(NewValue: number): void;
	SetAtmosphereSunLightIndex(NewValue: number): void;
	SetAtmosphereSunLight(bNewValue: boolean): void;
	static C(Other: UObject | any): DirectionalLightComponent;
}

declare class DirectionalLight extends Light { 
	ArrowComponent: ArrowComponent;
	DirectionalLightComponent: DirectionalLightComponent;
	static GetDefaultObject(): DirectionalLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DirectionalLight;
	static C(Other: UObject | any): DirectionalLight;
}

declare class DistributionFloatConstant extends DistributionFloat { 
	Constant: number;
	static Load(ResourceName: string): DistributionFloatConstant;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatConstant;
	static GetDefaultObject(): DistributionFloatConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatConstant;
	static C(Other: UObject | any): DistributionFloatConstant;
}

declare class DistributionFloatConstantCurve extends DistributionFloat { 
	ConstantCurve: InterpCurveFloat;
	static Load(ResourceName: string): DistributionFloatConstantCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatConstantCurve;
	static GetDefaultObject(): DistributionFloatConstantCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatConstantCurve;
	static C(Other: UObject | any): DistributionFloatConstantCurve;
}

declare type DistributionParamMode = 'DPM_Normal' | 'DPM_Abs' | 'DPM_Direct' | 'DPM_MAX';
declare var DistributionParamMode : { DPM_Normal:'DPM_Normal',DPM_Abs:'DPM_Abs',DPM_Direct:'DPM_Direct',DPM_MAX:'DPM_MAX', };
declare class DistributionFloatParameterBase extends DistributionFloatConstant { 
	ParameterName: string;
	MinInput: number;
	MaxInput: number;
	MinOutput: number;
	MaxOutput: number;
	ParamMode: DistributionParamMode;
	static Load(ResourceName: string): DistributionFloatParameterBase;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatParameterBase;
	static GetDefaultObject(): DistributionFloatParameterBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatParameterBase;
	static C(Other: UObject | any): DistributionFloatParameterBase;
}

declare class DistributionFloatParticleParameter extends DistributionFloatParameterBase { 
	static Load(ResourceName: string): DistributionFloatParticleParameter;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatParticleParameter;
	static GetDefaultObject(): DistributionFloatParticleParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatParticleParameter;
	static C(Other: UObject | any): DistributionFloatParticleParameter;
}

declare class DistributionFloatUniform extends DistributionFloat { 
	Min: number;
	Max: number;
	static Load(ResourceName: string): DistributionFloatUniform;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatUniform;
	static GetDefaultObject(): DistributionFloatUniform;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatUniform;
	static C(Other: UObject | any): DistributionFloatUniform;
}

declare class InterpCurvePointVector2D { 
	InVal: number;
	OutVal: Vector2D;
	ArriveTangent: Vector2D;
	LeaveTangent: Vector2D;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointVector2D;
	static C(Other: UObject | any): InterpCurvePointVector2D;
}

declare class InterpCurveVector2D { 
	Points: InterpCurvePointVector2D[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveVector2D;
	static C(Other: UObject | any): InterpCurveVector2D;
}

declare class DistributionFloatUniformCurve extends DistributionFloat { 
	ConstantCurve: InterpCurveVector2D;
	static Load(ResourceName: string): DistributionFloatUniformCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatUniformCurve;
	static GetDefaultObject(): DistributionFloatUniformCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatUniformCurve;
	static C(Other: UObject | any): DistributionFloatUniformCurve;
}

declare type EDistributionVectorLockFlags = 'EDVLF_None' | 'EDVLF_XY' | 'EDVLF_XZ' | 'EDVLF_YZ' | 'EDVLF_XYZ' | 'EDVLF_MAX';
declare var EDistributionVectorLockFlags : { EDVLF_None:'EDVLF_None',EDVLF_XY:'EDVLF_XY',EDVLF_XZ:'EDVLF_XZ',EDVLF_YZ:'EDVLF_YZ',EDVLF_XYZ:'EDVLF_XYZ',EDVLF_MAX:'EDVLF_MAX', };
declare class DistributionVectorConstant extends DistributionVector { 
	Constant: Vector;
	bLockAxes: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	static Load(ResourceName: string): DistributionVectorConstant;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorConstant;
	static GetDefaultObject(): DistributionVectorConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorConstant;
	static C(Other: UObject | any): DistributionVectorConstant;
}

declare class DistributionVectorConstantCurve extends DistributionVector { 
	ConstantCurve: InterpCurveVector;
	bLockAxes: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	static Load(ResourceName: string): DistributionVectorConstantCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorConstantCurve;
	static GetDefaultObject(): DistributionVectorConstantCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorConstantCurve;
	static C(Other: UObject | any): DistributionVectorConstantCurve;
}

declare class DistributionVectorParameterBase extends DistributionVectorConstant { 
	ParameterName: string;
	MinInput: Vector;
	MaxInput: Vector;
	MinOutput: Vector;
	MaxOutput: Vector;
	ParamModes: DistributionParamMode;
	static Load(ResourceName: string): DistributionVectorParameterBase;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorParameterBase;
	static GetDefaultObject(): DistributionVectorParameterBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorParameterBase;
	static C(Other: UObject | any): DistributionVectorParameterBase;
}

declare class DistributionVectorParticleParameter extends DistributionVectorParameterBase { 
	static Load(ResourceName: string): DistributionVectorParticleParameter;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorParticleParameter;
	static GetDefaultObject(): DistributionVectorParticleParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorParticleParameter;
	static C(Other: UObject | any): DistributionVectorParticleParameter;
}

declare type EDistributionVectorMirrorFlags = 'EDVMF_Same' | 'EDVMF_Different' | 'EDVMF_Mirror' | 'EDVMF_MAX';
declare var EDistributionVectorMirrorFlags : { EDVMF_Same:'EDVMF_Same',EDVMF_Different:'EDVMF_Different',EDVMF_Mirror:'EDVMF_Mirror',EDVMF_MAX:'EDVMF_MAX', };
declare class DistributionVectorUniform extends DistributionVector { 
	Max: Vector;
	Min: Vector;
	bLockAxes: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	MirrorFlags: EDistributionVectorMirrorFlags;
	bUseExtremes: boolean;
	static Load(ResourceName: string): DistributionVectorUniform;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorUniform;
	static GetDefaultObject(): DistributionVectorUniform;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorUniform;
	static C(Other: UObject | any): DistributionVectorUniform;
}

declare class TwoVectors { 
	v1: Vector;
	v2: Vector;
	clone() : TwoVectors;
	static C(Other: UObject | any): TwoVectors;
}

declare class InterpCurvePointTwoVectors { 
	InVal: number;
	OutVal: TwoVectors;
	ArriveTangent: TwoVectors;
	LeaveTangent: TwoVectors;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointTwoVectors;
	static C(Other: UObject | any): InterpCurvePointTwoVectors;
}

declare class InterpCurveTwoVectors { 
	Points: InterpCurvePointTwoVectors[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveTwoVectors;
	static C(Other: UObject | any): InterpCurveTwoVectors;
}

declare class DistributionVectorUniformCurve extends DistributionVector { 
	ConstantCurve: InterpCurveTwoVectors;
	bLockAxes1: boolean;
	bLockAxes2: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	MirrorFlags: EDistributionVectorMirrorFlags;
	bUseExtremes: boolean;
	static Load(ResourceName: string): DistributionVectorUniformCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorUniformCurve;
	static GetDefaultObject(): DistributionVectorUniformCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorUniformCurve;
	static C(Other: UObject | any): DistributionVectorUniformCurve;
}

declare class MaterialSpriteElement { 
	Material: MaterialInterface;
	DistanceToOpacityCurve: CurveFloat;
	bSizeIsInScreenSpace: boolean;
	BaseSizeX: number;
	BaseSizeY: number;
	DistanceToSizeCurve: CurveFloat;
	clone() : MaterialSpriteElement;
	static C(Other: UObject | any): MaterialSpriteElement;
}

declare class MaterialBillboardComponent extends PrimitiveComponent { 
	Elements: MaterialSpriteElement[];
	static Load(ResourceName: string): MaterialBillboardComponent;
	static Find(Outer: UObject, ResourceName: string): MaterialBillboardComponent;
	static GetDefaultObject(): MaterialBillboardComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialBillboardComponent;
	SetElements(NewElements: MaterialSpriteElement[]): void;
	AddElement(Material: MaterialInterface,DistanceToOpacityCurve: CurveFloat,bSizeIsInScreenSpace: boolean,BaseSizeX: number,BaseSizeY: number,DistanceToSizeCurve: CurveFloat): void;
	static C(Other: UObject | any): MaterialBillboardComponent;
}

declare class DocumentationActor extends Actor { 
	DocumentLink: string;
	Billboard: MaterialBillboardComponent;
	static GetDefaultObject(): DocumentationActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DocumentationActor;
	static C(Other: UObject | any): DocumentationActor;
}

declare class DPICustomScalingRule extends UObject { 
	static Load(ResourceName: string): DPICustomScalingRule;
	static Find(Outer: UObject, ResourceName: string): DPICustomScalingRule;
	static GetDefaultObject(): DPICustomScalingRule;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DPICustomScalingRule;
	static C(Other: UObject | any): DPICustomScalingRule;
}

declare class DrawSphereComponent extends SphereComponent { 
	static Load(ResourceName: string): DrawSphereComponent;
	static Find(Outer: UObject, ResourceName: string): DrawSphereComponent;
	static GetDefaultObject(): DrawSphereComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DrawSphereComponent;
	static C(Other: UObject | any): DrawSphereComponent;
}

declare class GraphNodeContextMenuContext extends UObject { 
	Blueprint: Blueprint;
	Graph: EdGraph;
	UNode: EdGraphNode;
	bIsDebugging: boolean;
	static Load(ResourceName: string): GraphNodeContextMenuContext;
	static Find(Outer: UObject, ResourceName: string): GraphNodeContextMenuContext;
	static GetDefaultObject(): GraphNodeContextMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GraphNodeContextMenuContext;
	static C(Other: UObject | any): GraphNodeContextMenuContext;
}

declare class EdGraphNode_Documentation extends EdGraphNode { 
	Link: string;
	Excerpt: string;
	static Load(ResourceName: string): EdGraphNode_Documentation;
	static Find(Outer: UObject, ResourceName: string): EdGraphNode_Documentation;
	static GetDefaultObject(): EdGraphNode_Documentation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphNode_Documentation;
	static C(Other: UObject | any): EdGraphNode_Documentation;
}

declare class ViewModeUtils extends UObject { 
	static Load(ResourceName: string): ViewModeUtils;
	static Find(Outer: UObject, ResourceName: string): ViewModeUtils;
	static GetDefaultObject(): ViewModeUtils;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewModeUtils;
	static C(Other: UObject | any): ViewModeUtils;
}

declare class EngineBaseTypes extends UObject { 
	static Load(ResourceName: string): EngineBaseTypes;
	static Find(Outer: UObject, ResourceName: string): EngineBaseTypes;
	static GetDefaultObject(): EngineBaseTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineBaseTypes;
	static C(Other: UObject | any): EngineBaseTypes;
}

declare class EngineHandlerComponentFactory extends HandlerComponentFactory { 
	static Load(ResourceName: string): EngineHandlerComponentFactory;
	static Find(Outer: UObject, ResourceName: string): EngineHandlerComponentFactory;
	static GetDefaultObject(): EngineHandlerComponentFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineHandlerComponentFactory;
	static C(Other: UObject | any): EngineHandlerComponentFactory;
}

declare class EngineMessage extends LocalMessage { 
	FailedPlaceMessage: string;
	MaxedOutMessage: string;
	EnteredMessage: string;
	LeftMessage: string;
	GlobalNameChange: string;
	SpecEnteredMessage: string;
	NewPlayerMessage: string;
	NewSpecMessage: string;
	static Load(ResourceName: string): EngineMessage;
	static Find(Outer: UObject, ResourceName: string): EngineMessage;
	static GetDefaultObject(): EngineMessage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineMessage;
	static C(Other: UObject | any): EngineMessage;
}

declare class EngineTypes extends UObject { 
	static Load(ResourceName: string): EngineTypes;
	static Find(Outer: UObject, ResourceName: string): EngineTypes;
	static GetDefaultObject(): EngineTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineTypes;
	static C(Other: UObject | any): EngineTypes;
}

declare class ExponentialHeightFogData { 
	FogDensity: number;
	FogHeightFalloff: number;
	FogHeightOffset: number;
	clone() : ExponentialHeightFogData;
	static C(Other: UObject | any): ExponentialHeightFogData;
}

declare class ExponentialHeightFogComponent extends SceneComponent { 
	FogDensity: number;
	FogHeightFalloff: number;
	SecondFogData: ExponentialHeightFogData;
	FogInscatteringColor: LinearColor;
	InscatteringColorCubemap: TextureCube;
	InscatteringColorCubemapAngle: number;
	InscatteringTextureTint: LinearColor;
	FullyDirectionalInscatteringColorDistance: number;
	NonDirectionalInscatteringColorDistance: number;
	DirectionalInscatteringExponent: number;
	DirectionalInscatteringStartDistance: number;
	DirectionalInscatteringColor: LinearColor;
	FogMaxOpacity: number;
	StartDistance: number;
	FogCutoffDistance: number;
	bEnableVolumetricFog: boolean;
	VolumetricFogScatteringDistribution: number;
	VolumetricFogAlbedo: Color;
	VolumetricFogEmissive: LinearColor;
	VolumetricFogExtinctionScale: number;
	VolumetricFogDistance: number;
	VolumetricFogStaticLightingScatteringIntensity: number;
	bOverrideLightColorsWithFogInscatteringColors: boolean;
	static Load(ResourceName: string): ExponentialHeightFogComponent;
	static Find(Outer: UObject, ResourceName: string): ExponentialHeightFogComponent;
	static GetDefaultObject(): ExponentialHeightFogComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExponentialHeightFogComponent;
	SetVolumetricFogScatteringDistribution(NewValue: number): void;
	SetVolumetricFogExtinctionScale(NewValue: number): void;
	SetVolumetricFogEmissive(NewValue: LinearColor): void;
	SetVolumetricFogDistance(NewValue: number): void;
	SetVolumetricFogAlbedo(NewValue: Color): void;
	SetVolumetricFog(bNewValue: boolean): void;
	SetStartDistance(Value: number): void;
	SetNonDirectionalInscatteringColorDistance(Value: number): void;
	SetInscatteringTextureTint(Value: LinearColor): void;
	SetInscatteringColorCubemapAngle(Value: number): void;
	SetInscatteringColorCubemap(Value: TextureCube): void;
	SetFullyDirectionalInscatteringColorDistance(Value: number): void;
	SetFogMaxOpacity(Value: number): void;
	SetFogInscatteringColor(Value: LinearColor): void;
	SetFogHeightFalloff(Value: number): void;
	SetFogDensity(Value: number): void;
	SetFogCutoffDistance(Value: number): void;
	SetDirectionalInscatteringStartDistance(Value: number): void;
	SetDirectionalInscatteringExponent(Value: number): void;
	SetDirectionalInscatteringColor(Value: LinearColor): void;
	static C(Other: UObject | any): ExponentialHeightFogComponent;
}

declare class ExponentialHeightFog extends Info { 
	Component: ExponentialHeightFogComponent;
	bEnabled: boolean;
	static GetDefaultObject(): ExponentialHeightFog;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExponentialHeightFog;
	OnRep_bEnabled(): void;
	static C(Other: UObject | any): ExponentialHeightFog;
}

declare class FloatingPawnMovement extends PawnMovementComponent { 
	MaxSpeed: number;
	Acceleration: number;
	Deceleration: number;
	TurningBoost: number;
	bPositionCorrected: boolean;
	static Load(ResourceName: string): FloatingPawnMovement;
	static Find(Outer: UObject, ResourceName: string): FloatingPawnMovement;
	static GetDefaultObject(): FloatingPawnMovement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatingPawnMovement;
	static C(Other: UObject | any): FloatingPawnMovement;
}

declare type EFontLayoutMethod = 'Metrics' | 'BoundingBox' | 'EFontLayoutMethod_MAX';
declare var EFontLayoutMethod : { Metrics:'Metrics',BoundingBox:'BoundingBox',EFontLayoutMethod_MAX:'EFontLayoutMethod_MAX', };
declare class FontFace extends UObject { 
	SourceFilename: string;
	Hinting: EFontHinting;
	LoadingPolicy: EFontLoadingPolicy;
	LayoutMethod: EFontLayoutMethod;
	FontFaceData: number[];
	SubFaces: string[];
	static Load(ResourceName: string): FontFace;
	static Find(Outer: UObject, ResourceName: string): FontFace;
	static GetDefaultObject(): FontFace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontFace;
	static C(Other: UObject | any): FontFace;
}

declare class GameEngine extends Engine { 
	MaxDeltaTime: number;
	ServerFlushLogInterval: number;
	GameInstance: GameInstance;
	static Load(ResourceName: string): GameEngine;
	static Find(Outer: UObject, ResourceName: string): GameEngine;
	static GetDefaultObject(): GameEngine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameEngine;
	static C(Other: UObject | any): GameEngine;
}

declare class GameplayStatics extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): GameplayStatics;
	static Find(Outer: UObject, ResourceName: string): GameplayStatics;
	static GetDefaultObject(): GameplayStatics;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayStatics;
	static UnRetainAllSoundsInSoundClass(InSoundClass: SoundClass): void;
	static UnloadStreamLevelBySoftObjectPtr(WorldContextObject: UObject,Level: World,LatentInfo: LatentActionInfo,bShouldBlockOnUnload: boolean): void;
	static UnloadStreamLevel(WorldContextObject: UObject,LevelName: string,LatentInfo: LatentActionInfo,bShouldBlockOnUnload: boolean): void;
	static SuggestProjectileVelocity_CustomArc(WorldContextObject: UObject,OutLaunchVelocity?: Vector,StartPos?: Vector,EndPos?: Vector,OverrideGravityZ?: number,ArcParam?: number): {OutLaunchVelocity: Vector, $: boolean};
	static SpawnSoundAttached(Sound: SoundBase,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,bAutoDestroy: boolean): AudioComponent;
	static SpawnSoundAtLocation(WorldContextObject: UObject,Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,bAutoDestroy: boolean): AudioComponent;
	static SpawnSound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean,bAutoDestroy: boolean): AudioComponent;
	static SpawnObject(ObjectClass: UnrealEngineClass,Outer: UObject): UObject;
	static SpawnForceFeedbackAttached(ForceFeedbackEffect: ForceFeedbackEffect,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation,bAutoDestroy: boolean): ForceFeedbackComponent;
	static SpawnForceFeedbackAtLocation(WorldContextObject: UObject,ForceFeedbackEffect: ForceFeedbackEffect,Location: Vector,Rotation: Rotator,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation,bAutoDestroy: boolean): ForceFeedbackComponent;
	static SpawnEmitterAttached(EmitterTemplate: ParticleSystem,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,Scale: Vector,LocationType: EAttachLocation,bAutoDestroy: boolean,PoolingMethod: EPSCPoolMethod,bAutoActivate: boolean): ParticleSystemComponent;
	static SpawnEmitterAtLocation(WorldContextObject: UObject,EmitterTemplate: ParticleSystem,Location: Vector,Rotation: Rotator,Scale: Vector,bAutoDestroy: boolean,PoolingMethod: EPSCPoolMethod,bAutoActivateSystem: boolean): ParticleSystemComponent;
	static SpawnDialogueAttached(Dialogue: DialogueWave,Context: DialogueContext,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,bAutoDestroy: boolean): AudioComponent;
	static SpawnDialogueAtLocation(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,bAutoDestroy: boolean): AudioComponent;
	static SpawnDialogue2D(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,bAutoDestroy: boolean): AudioComponent;
	static SpawnDecalAttached(DecalMaterial: MaterialInterface,DecalSize: Vector,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,LifeSpan: number): DecalComponent;
	static SpawnDecalAtLocation(WorldContextObject: UObject,DecalMaterial: MaterialInterface,DecalSize: Vector,Location: Vector,Rotation: Rotator,LifeSpan: number): DecalComponent;
	static SetWorldOriginLocation(WorldContextObject: UObject,NewLocation: IntVector): void;
	static SetViewportMouseCaptureMode(WorldContextObject: UObject,MouseCaptureMode: EMouseCaptureMode): void;
	static SetSubtitlesEnabled(bEnabled: boolean): void;
	static SetSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,Volume: number,Pitch: number,FadeInTime: number,bApplyToChildren: boolean): void;
	static SetSoundClassDistanceScale(WorldContextObject: UObject,SoundClass: SoundClass,DistanceAttenuationScale: number,TimeSec: number): void;
	static SetPlayerControllerID(Player: PlayerController,ControllerId: number): void;
	static SetMaxAudioChannelsScaled(WorldContextObject: UObject,MaxChannelCountScale: number): void;
	static SetGlobalTimeDilation(WorldContextObject: UObject,TimeDilation: number): void;
	static SetGlobalPitchModulation(WorldContextObject: UObject,PitchModulation: number,TimeSec: number): void;
	static SetGlobalListenerFocusParameters(WorldContextObject: UObject,FocusAzimuthScale: number,NonFocusAzimuthScale: number,FocusDistanceScale: number,NonFocusDistanceScale: number,FocusVolumeScale: number,NonFocusVolumeScale: number,FocusPriorityScale: number,NonFocusPriorityScale: number): void;
	static SetGamePaused(WorldContextObject: UObject,bPaused: boolean): boolean;
	static SetForceDisableSplitscreen(WorldContextObject: UObject,bDisable: boolean): void;
	static SetEnableWorldRendering(WorldContextObject: UObject,bEnable: boolean): void;
	static SetBaseSoundMix(WorldContextObject: UObject,InSoundMix: SoundMix): void;
	static SaveGameToSlot(SaveGameObject: SaveGame,SlotName: string,UserIndex: number): boolean;
	static RemovePlayer(Player: PlayerController,bDestroyPawn: boolean): void;
	static RebaseZeroOriginOntoLocal(WorldContextObject: UObject,WorldLocation: Vector): Vector;
	static RebaseLocalOriginOntoZero(WorldContextObject: UObject,WorldLocation: Vector): Vector;
	static PushSoundMixModifier(WorldContextObject: UObject,InSoundMixModifier: SoundMix): void;
	static ProjectWorldToScreen(Player: PlayerController,WorldPosition: Vector,ScreenPosition?: Vector2D,bPlayerViewportRelative?: boolean): {ScreenPosition: Vector2D, $: boolean};
	static PrimeSound(InSound: SoundBase): void;
	static PrimeAllSoundsInSoundClass(InSoundClass: SoundClass): void;
	static PopSoundMixModifier(WorldContextObject: UObject,InSoundMixModifier: SoundMix): void;
	static PlayWorldCameraShake(WorldContextObject: UObject,Shake: UnrealEngineClass,Epicenter: Vector,InnerRadius: number,OuterRadius: number,Falloff: number,bOrientShakeTowardsEpicenter: boolean): void;
	static PlaySoundAtLocation(WorldContextObject: UObject,Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,OwningActor: Actor): void;
	static PlaySound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,OwningActor: Actor,bIsUISound: boolean): void;
	static PlayDialogueAtLocation(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation): void;
	static PlayDialogue2D(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number): void;
	static ParseOption(Options: string,Key: string): string;
	static OpenLevelBySoftObjectPtr(WorldContextObject: UObject,Level: World,bAbsolute: boolean,Options: string): void;
	static OpenLevel(WorldContextObject: UObject,LevelName: string,bAbsolute: boolean,Options: string): void;
	static MakeHitResult(bBlockingHit: boolean,bInitialOverlap: boolean,Time: number,Distance: number,Location: Vector,ImpactPoint: Vector,Normal: Vector,ImpactNormal: Vector,PhysMat: PhysicalMaterial,HitActor: Actor,HitComponent: PrimitiveComponent,HitBoneName: string,HitItem: number,ElementIndex: number,FaceIndex: number,TraceStart: Vector,TraceEnd: Vector): HitResult;
	static LoadStreamLevelBySoftObjectPtr(WorldContextObject: UObject,Level: World,bMakeVisibleAfterLoad: boolean,bShouldBlockOnLoad: boolean,LatentInfo: LatentActionInfo): void;
	static LoadStreamLevel(WorldContextObject: UObject,LevelName: string,bMakeVisibleAfterLoad: boolean,bShouldBlockOnLoad: boolean,LatentInfo: LatentActionInfo): void;
	static LoadGameFromSlot(SlotName: string,UserIndex: number): SaveGame;
	static IsSplitscreenForceDisabled(WorldContextObject: UObject): boolean;
	static IsGamePaused(WorldContextObject: UObject): boolean;
	static HasOption(Options: string,InKey: string): boolean;
	static HasLaunchOption(OptionToCheck: string): boolean;
	static GrassOverlappingSphereCount(WorldContextObject: UObject,StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
	static GetWorldOriginLocation(WorldContextObject: UObject): IntVector;
	static GetWorldDeltaSeconds(WorldContextObject: UObject): number;
	static GetViewProjectionMatrix(DesiredView: MinimalViewInfo,ViewMatrix?: Matrix,ProjectionMatrix?: Matrix,ViewProjectionMatrix?: Matrix): {ViewMatrix: Matrix, ProjectionMatrix: Matrix, ViewProjectionMatrix: Matrix};
	static GetViewportMouseCaptureMode(WorldContextObject: UObject): EMouseCaptureMode;
	static GetUnpausedTimeSeconds(WorldContextObject: UObject): number;
	static GetTimeSeconds(WorldContextObject: UObject): number;
	static GetSurfaceType(Hit: HitResult): EPhysicalSurface;
	static GetStreamingLevel(WorldContextObject: UObject,PackageName: string): LevelStreaming;
	static GetRealTimeSeconds(WorldContextObject: UObject): number;
	static GetPlayerPawn(WorldContextObject: UObject,PlayerIndex: number): Pawn;
	static GetPlayerControllerID(Player: PlayerController): number;
	static GetPlayerControllerFromID(WorldContextObject: UObject,ControllerId: number): PlayerController;
	static GetPlayerController(WorldContextObject: UObject,PlayerIndex: number): PlayerController;
	static GetPlayerCharacter(WorldContextObject: UObject,PlayerIndex: number): Character;
	static GetPlayerCameraManager(WorldContextObject: UObject,PlayerIndex: number): PlayerCameraManager;
	static GetPlatformName(): string;
	static GetObjectClass(UObject: UObject): UnrealEngineClass;
	static GetMaxAudioChannelCount(WorldContextObject: UObject): number;
	static GetKeyValue(Pair: string,Key?: string,Value?: string): {Key: string, Value: string};
	static GetIntOption(Options: string,Key: string,DefaultValue: number): number;
	static GetGlobalTimeDilation(WorldContextObject: UObject): number;
	static GetGameState(WorldContextObject: UObject): GameStateBase;
	static GetGameMode(WorldContextObject: UObject): GameModeBase;
	static GetGameInstance(WorldContextObject: UObject): GameInstance;
	static GetEnableWorldRendering(WorldContextObject: UObject): boolean;
	static GetCurrentReverbEffect(WorldContextObject: UObject): ReverbEffect;
	static GetCurrentLevelName(WorldContextObject: UObject,bRemovePrefixString: boolean): string;
	static GetClosestListenerLocation(WorldContextObject: UObject,Location: Vector,MaximumRange: number,bAllowAttenuationOverride: boolean,ListenerPosition?: Vector): {ListenerPosition: Vector, $: boolean};
	static GetAudioTimeSeconds(WorldContextObject: UObject): number;
	static GetAllActorsWithTag(WorldContextObject: UObject,Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetAllActorsWithInterface(WorldContextObject: UObject,Interface: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetAllActorsOfClassWithTag(WorldContextObject: UObject,ActorClass: UnrealEngineClass,Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetAllActorsOfClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetActorOfClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass): Actor;
	static GetActorArrayBounds(Actors: Actor[],bOnlyCollidingComponents: boolean,Center?: Vector,BoxExtent?: Vector): {Center: Vector, BoxExtent: Vector};
	static GetActorArrayAverageLocation(Actors: Actor[]): Vector;
	static GetAccurateRealTime(Seconds?: number,PartialSeconds?: number): {Seconds: number, PartialSeconds: number};
	static FlushLevelStreaming(WorldContextObject: UObject): void;
	static FinishSpawningActor(Actor: Actor,SpawnTransform: Transform): Actor;
	static FindNearestActor(Origin: Vector,ActorsToCheck: Actor[],Distance?: number): {Distance: number, $: Actor};
	static FindCollisionUV(Hit: HitResult,UVChannel: number,UV?: Vector2D): {UV: Vector2D, $: boolean};
	static EnableLiveStreaming(Enable: boolean): void;
	static DoesSaveGameExist(SlotName: string,UserIndex: number): boolean;
	static DeprojectScreenToWorld(Player: PlayerController,ScreenPosition: Vector2D,WorldPosition?: Vector,WorldDirection?: Vector): {WorldPosition: Vector, WorldDirection: Vector, $: boolean};
	static DeleteGameInSlot(SlotName: string,UserIndex: number): boolean;
	static DeactivateReverbEffect(WorldContextObject: UObject,TagName: string): void;
	static CreateSound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean,bAutoDestroy: boolean): AudioComponent;
	static CreateSaveGameObject(SaveGameClass: UnrealEngineClass): SaveGame;
	static CreatePlayer(WorldContextObject: UObject,ControllerId: number,bSpawnPlayerController: boolean): PlayerController;
	static ClearSoundMixModifiers(WorldContextObject: UObject): void;
	static ClearSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,FadeOutTime: number): void;
	static CancelAsyncLoading(): void;
	static BreakHitResult(Hit: HitResult,bBlockingHit?: boolean,bInitialOverlap?: boolean,Time?: number,Distance?: number,Location?: Vector,ImpactPoint?: Vector,Normal?: Vector,ImpactNormal?: Vector,PhysMat?: PhysicalMaterial,HitActor?: Actor,HitComponent?: PrimitiveComponent,HitBoneName?: string,HitItem?: number,ElementIndex?: number,FaceIndex?: number,TraceStart?: Vector,TraceEnd?: Vector): {bBlockingHit: boolean, bInitialOverlap: boolean, Time: number, Distance: number, Location: Vector, ImpactPoint: Vector, Normal: Vector, ImpactNormal: Vector, PhysMat: PhysicalMaterial, HitActor: Actor, HitComponent: PrimitiveComponent, HitBoneName: string, HitItem: number, ElementIndex: number, FaceIndex: number, TraceStart: Vector, TraceEnd: Vector};
	static BlueprintSuggestProjectileVelocity(WorldContextObject: UObject,TossVelocity?: Vector,StartLocation?: Vector,EndLocation?: Vector,LaunchSpeed?: number,OverrideGravityZ?: number,TraceOption?: ESuggestProjVelocityTraceOption,CollisionRadius?: number,bFavorHighArc?: boolean,bDrawDebug?: boolean): {TossVelocity: Vector, $: boolean};
	static Blueprint_PredictProjectilePath_ByTraceChannel(WorldContextObject: UObject,OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,TraceChannel?: ECollisionChannel,bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
	static Blueprint_PredictProjectilePath_ByObjectType(WorldContextObject: UObject,OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,ObjectTypes?: EObjectTypeQuery[],bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
	static Blueprint_PredictProjectilePath_Advanced(WorldContextObject: UObject,PredictParams: PredictProjectilePathParams,PredictResult?: PredictProjectilePathResult): {PredictResult: PredictProjectilePathResult, $: boolean};
	static BeginSpawningActorFromClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,SpawnTransform: Transform,bNoCollisionFail: boolean,Owner: Actor): Actor;
	static BeginSpawningActorFromBlueprint(WorldContextObject: UObject,Blueprint: Blueprint,SpawnTransform: Transform,bNoCollisionFail: boolean): Actor;
	static BeginDeferredActorSpawnFromClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,SpawnTransform: Transform,CollisionHandlingOverride: ESpawnActorCollisionHandlingMethod,Owner: Actor): Actor;
	static AreSubtitlesEnabled(): boolean;
	static AreAnyListenersWithinRange(WorldContextObject: UObject,Location: Vector,MaximumRange: number): boolean;
	static ApplyRadialDamageWithFalloff(WorldContextObject: UObject,BaseDamage: number,MinimumDamage: number,Origin: Vector,DamageInnerRadius: number,DamageOuterRadius: number,DamageFalloff: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,DamagePreventionChannel: ECollisionChannel): boolean;
	static ApplyRadialDamage(WorldContextObject: UObject,BaseDamage: number,Origin: Vector,DamageRadius: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,bDoFullDamage: boolean,DamagePreventionChannel: ECollisionChannel): boolean;
	static ApplyPointDamage(DamagedActor: Actor,BaseDamage: number,HitFromDirection: Vector,HitInfo: HitResult,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
	static ApplyDamage(DamagedActor: Actor,BaseDamage: number,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
	static AnnounceAccessibleString(AnnouncementString: string): void;
	static ActivateReverbEffect(WorldContextObject: UObject,ReverbEffect: ReverbEffect,TagName: string,Priority: number,Volume: number,FadeTime: number): void;
	static C(Other: UObject | any): GameplayStatics;
}

declare class SpotLightComponent extends PointLightComponent { 
	InnerConeAngle: number;
	OuterConeAngle: number;
	static Load(ResourceName: string): SpotLightComponent;
	static Find(Outer: UObject, ResourceName: string): SpotLightComponent;
	static GetDefaultObject(): SpotLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpotLightComponent;
	SetOuterConeAngle(NewOuterConeAngle: number): void;
	SetInnerConeAngle(NewInnerConeAngle: number): void;
	static C(Other: UObject | any): SpotLightComponent;
}

declare class SpotLight extends Light { 
	SpotLightComponent: SpotLightComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): SpotLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpotLight;
	SetOuterConeAngle(NewOuterConeAngle: number): void;
	SetInnerConeAngle(NewInnerConeAngle: number): void;
	static C(Other: UObject | any): SpotLight;
}

declare class GeneratedMeshAreaLight extends SpotLight { 
	static GetDefaultObject(): GeneratedMeshAreaLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeneratedMeshAreaLight;
	static C(Other: UObject | any): GeneratedMeshAreaLight;
}

declare class HapticFeedbackEffect_Buffer extends HapticFeedbackEffect_Base { 
	Amplitudes: number[];
	SampleRate: number;
	static Load(ResourceName: string): HapticFeedbackEffect_Buffer;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_Buffer;
	static GetDefaultObject(): HapticFeedbackEffect_Buffer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_Buffer;
	static C(Other: UObject | any): HapticFeedbackEffect_Buffer;
}

declare class HapticFeedbackDetails_Curve { 
	Frequency: RuntimeFloatCurve;
	Amplitude: RuntimeFloatCurve;
	clone() : HapticFeedbackDetails_Curve;
	static C(Other: UObject | any): HapticFeedbackDetails_Curve;
}

declare class HapticFeedbackEffect_Curve extends HapticFeedbackEffect_Base { 
	HapticDetails: HapticFeedbackDetails_Curve;
	static Load(ResourceName: string): HapticFeedbackEffect_Curve;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_Curve;
	static GetDefaultObject(): HapticFeedbackEffect_Curve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_Curve;
	static C(Other: UObject | any): HapticFeedbackEffect_Curve;
}

declare class HapticFeedbackEffect_SoundWave extends HapticFeedbackEffect_Base { 
	SoundWave: SoundWave;
	static Load(ResourceName: string): HapticFeedbackEffect_SoundWave;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_SoundWave;
	static GetDefaultObject(): HapticFeedbackEffect_SoundWave;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_SoundWave;
	static C(Other: UObject | any): HapticFeedbackEffect_SoundWave;
}

declare class HealthSnapshotBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): HealthSnapshotBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): HealthSnapshotBlueprintLibrary;
	static GetDefaultObject(): HealthSnapshotBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HealthSnapshotBlueprintLibrary;
	static StopPerformanceSnapshots(): void;
	static StartPerformanceSnapshots(): void;
	static LogPerformanceSnapshot(SnapshotTitle: string,bResetStats: boolean): void;
	static C(Other: UObject | any): HealthSnapshotBlueprintLibrary;
}

declare class HLODEngineSubsystem extends EngineSubsystem { 
	static Load(ResourceName: string): HLODEngineSubsystem;
	static Find(Outer: UObject, ResourceName: string): HLODEngineSubsystem;
	static GetDefaultObject(): HLODEngineSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HLODEngineSubsystem;
	static C(Other: UObject | any): HLODEngineSubsystem;
}

declare class HLODProxyMesh { 
	LODActor: any;
	StaticMesh: StaticMesh;
	Key: string;
	clone() : HLODProxyMesh;
	static C(Other: UObject | any): HLODProxyMesh;
}

declare class HLODProxy extends UObject { 
	OwningMap: World;
	ProxyMeshes: HLODProxyMesh[];
	HLODActors: any;
	static Load(ResourceName: string): HLODProxy;
	static Find(Outer: UObject, ResourceName: string): HLODProxy;
	static GetDefaultObject(): HLODProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HLODProxy;
	static C(Other: UObject | any): HLODProxy;
}

declare class HLODISMComponentDesc { 
	StaticMesh: StaticMesh;
	Material: MaterialInterface;
	Instances: Transform[];
	clone() : HLODISMComponentDesc;
	static C(Other: UObject | any): HLODISMComponentDesc;
}

declare class HLODProxyDesc extends UObject { 
	SubActors: string[];
	StaticMesh: StaticMesh;
	ISMComponentsDesc: HLODISMComponentDesc[];
	LODDrawDistance: number;
	bOverrideMaterialMergeSettings: boolean;
	MaterialSettings: MaterialProxySettings;
	bOverrideTransitionScreenSize: boolean;
	TransitionScreenSize: number;
	bOverrideScreenSize: boolean;
	ScreenSize: number;
	Key: string;
	LODLevel: number;
	LODActorTag: string;
	Location: Vector;
	HLODBakingTransform: Transform;
	SubHLODDescs: HLODProxyDesc[];
	static Load(ResourceName: string): HLODProxyDesc;
	static Find(Outer: UObject, ResourceName: string): HLODProxyDesc;
	static GetDefaultObject(): HLODProxyDesc;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HLODProxyDesc;
	static C(Other: UObject | any): HLODProxyDesc;
}

declare class ImportanceSamplingLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): ImportanceSamplingLibrary;
	static Find(Outer: UObject, ResourceName: string): ImportanceSamplingLibrary;
	static GetDefaultObject(): ImportanceSamplingLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportanceSamplingLibrary;
	static RandomSobolFloat(index: number,Dimension: number,Seed: number): number;
	static RandomSobolCell3D(index: number,NumCells: number,Cell: Vector,Seed: Vector): Vector;
	static RandomSobolCell2D(index: number,NumCells: number,Cell: Vector2D,Seed: Vector2D): Vector2D;
	static NextSobolFloat(index: number,Dimension: number,PreviousValue: number): number;
	static NextSobolCell3D(index: number,NumCells: number,PreviousValue: Vector): Vector;
	static NextSobolCell2D(index: number,NumCells: number,PreviousValue: Vector2D): Vector2D;
	static MakeImportanceTexture(Texture: Texture2D,WeightingFunc: EImportanceWeight): ImportanceTexture;
	static ImportanceSample(Texture: ImportanceTexture,Rand: Vector2D,Samples: number,Intensity: number,SamplePosition?: Vector2D,SampleColor?: LinearColor,SampleIntensity?: number,SampleSize?: number): {SamplePosition: Vector2D, SampleColor: LinearColor, SampleIntensity: number, SampleSize: number};
	static BreakImportanceTexture(ImportanceTexture: ImportanceTexture,Texture?: Texture2D,WeightingFunc?: EImportanceWeight): {Texture: Texture2D, WeightingFunc: EImportanceWeight};
	static C(Other: UObject | any): ImportanceSamplingLibrary;
}

declare class ImportantToggleSettingInterface extends Interface { 
	static Load(ResourceName: string): ImportantToggleSettingInterface;
	static Find(Outer: UObject, ResourceName: string): ImportantToggleSettingInterface;
	static GetDefaultObject(): ImportantToggleSettingInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportantToggleSettingInterface;
	static C(Other: UObject | any): ImportantToggleSettingInterface;
}

declare class InGameAdManager extends PlatformInterfaceBase { 
	bShouldPauseWhileAdOpen: boolean;
	ClickedBannerDelegates: UnrealEngineDelegate<() => void>[];
	ClosedAdDelegates: UnrealEngineDelegate<() => void>[];
	static Load(ResourceName: string): InGameAdManager;
	static Find(Outer: UObject, ResourceName: string): InGameAdManager;
	static GetDefaultObject(): InGameAdManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InGameAdManager;
	static C(Other: UObject | any): InGameAdManager;
}

declare class InputDelegateBinding extends DynamicBlueprintBinding { 
	static Load(ResourceName: string): InputDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputDelegateBinding;
	static GetDefaultObject(): InputDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputDelegateBinding;
	static C(Other: UObject | any): InputDelegateBinding;
}

declare class BlueprintInputDelegateBinding { 
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	bOverrideParentBinding: boolean;
	clone() : BlueprintInputDelegateBinding;
	static C(Other: UObject | any): BlueprintInputDelegateBinding;
}

declare class BlueprintInputActionDelegateBinding extends BlueprintInputDelegateBinding { 
	InputActionName: string;
	InputKeyEvent: EInputEvent;
	FunctionNameToBind: string;
	clone() : BlueprintInputActionDelegateBinding;
	static C(Other: UObject | any): BlueprintInputActionDelegateBinding;
}

declare class InputActionDelegateBinding extends InputDelegateBinding { 
	InputActionDelegateBindings: BlueprintInputActionDelegateBinding[];
	static Load(ResourceName: string): InputActionDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputActionDelegateBinding;
	static GetDefaultObject(): InputActionDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputActionDelegateBinding;
	static C(Other: UObject | any): InputActionDelegateBinding;
}

declare class BlueprintInputAxisDelegateBinding extends BlueprintInputDelegateBinding { 
	InputAxisName: string;
	FunctionNameToBind: string;
	clone() : BlueprintInputAxisDelegateBinding;
	static C(Other: UObject | any): BlueprintInputAxisDelegateBinding;
}

declare class InputAxisDelegateBinding extends InputDelegateBinding { 
	InputAxisDelegateBindings: BlueprintInputAxisDelegateBinding[];
	static Load(ResourceName: string): InputAxisDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputAxisDelegateBinding;
	static GetDefaultObject(): InputAxisDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputAxisDelegateBinding;
	static C(Other: UObject | any): InputAxisDelegateBinding;
}

declare class BlueprintInputAxisKeyDelegateBinding extends BlueprintInputDelegateBinding { 
	AxisKey: Key;
	FunctionNameToBind: string;
	clone() : BlueprintInputAxisKeyDelegateBinding;
	static C(Other: UObject | any): BlueprintInputAxisKeyDelegateBinding;
}

declare class InputAxisKeyDelegateBinding extends InputDelegateBinding { 
	InputAxisKeyDelegateBindings: BlueprintInputAxisKeyDelegateBinding[];
	static Load(ResourceName: string): InputAxisKeyDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputAxisKeyDelegateBinding;
	static GetDefaultObject(): InputAxisKeyDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputAxisKeyDelegateBinding;
	static C(Other: UObject | any): InputAxisKeyDelegateBinding;
}

declare class BlueprintInputKeyDelegateBinding extends BlueprintInputDelegateBinding { 
	InputChord: InputChord;
	InputKeyEvent: EInputEvent;
	FunctionNameToBind: string;
	clone() : BlueprintInputKeyDelegateBinding;
	static C(Other: UObject | any): BlueprintInputKeyDelegateBinding;
}

declare class InputKeyDelegateBinding extends InputDelegateBinding { 
	InputKeyDelegateBindings: BlueprintInputKeyDelegateBinding[];
	static Load(ResourceName: string): InputKeyDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputKeyDelegateBinding;
	static GetDefaultObject(): InputKeyDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputKeyDelegateBinding;
	static C(Other: UObject | any): InputKeyDelegateBinding;
}

declare class InputAxisProperties { 
	DeadZone: number;
	Sensitivity: number;
	Exponent: number;
	bInvert: boolean;
	clone() : InputAxisProperties;
	static C(Other: UObject | any): InputAxisProperties;
}

declare class InputAxisConfigEntry { 
	AxisKeyName: string;
	AxisProperties: InputAxisProperties;
	clone() : InputAxisConfigEntry;
	static C(Other: UObject | any): InputAxisConfigEntry;
}

declare class InputActionKeyMapping { 
	ActionName: string;
	bShift: boolean;
	bCtrl: boolean;
	bAlt: boolean;
	bCmd: boolean;
	Key: Key;
	clone() : InputActionKeyMapping;
	static C(Other: UObject | any): InputActionKeyMapping;
}

declare class InputAxisKeyMapping { 
	AxisName: string;
	Scale: number;
	Key: Key;
	clone() : InputAxisKeyMapping;
	static C(Other: UObject | any): InputAxisKeyMapping;
}

declare class InputActionSpeechMapping { 
	ActionName: string;
	SpeechKeyword: string;
	clone() : InputActionSpeechMapping;
	static C(Other: UObject | any): InputActionSpeechMapping;
}

declare class InputSettings extends UObject { 
	AxisConfig: InputAxisConfigEntry[];
	bAltEnterTogglesFullscreen: boolean;
	bF11TogglesFullscreen: boolean;
	bUseMouseForTouch: boolean;
	bEnableMouseSmoothing: boolean;
	bEnableFOVScaling: boolean;
	bCaptureMouseOnLaunch: boolean;
	bDefaultViewportMouseLock: boolean;
	bAlwaysShowTouchInterface: boolean;
	bShowConsoleOnFourFingerTap: boolean;
	bEnableGestureRecognizer: boolean;
	bUseAutocorrect: boolean;
	ExcludedAutocorrectOS: string[];
	ExcludedAutocorrectCultures: string[];
	ExcludedAutocorrectDeviceModels: string[];
	DefaultViewportMouseCaptureMode: EMouseCaptureMode;
	DefaultViewportMouseLockMode: EMouseLockMode;
	FOVScale: number;
	DoubleClickTime: number;
	ActionMappings: InputActionKeyMapping[];
	AxisMappings: InputAxisKeyMapping[];
	SpeechMappings: InputActionSpeechMapping[];
	DefaultPlayerInputClass: Class;
	DefaultInputComponentClass: Class;
	DefaultTouchInterface: SoftObjectPath;
	ConsoleKey: Key;
	ConsoleKeys: Key[];
	static Load(ResourceName: string): InputSettings;
	static Find(Outer: UObject, ResourceName: string): InputSettings;
	static GetDefaultObject(): InputSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputSettings;
	SaveKeyMappings(): void;
	RemoveAxisMapping(KeyMapping: InputAxisKeyMapping,bForceRebuildKeymaps: boolean): void;
	RemoveActionMapping(KeyMapping: InputActionKeyMapping,bForceRebuildKeymaps: boolean): void;
	static GetInputSettings(): InputSettings;
	GetAxisNames(AxisNames?: string[]): {AxisNames: string[]};
	GetAxisMappingByName(InAxisName: string,OutMappings?: InputAxisKeyMapping[]): {OutMappings: InputAxisKeyMapping[]};
	GetActionNames(ActionNames?: string[]): {ActionNames: string[]};
	GetActionMappingByName(InActionName: string,OutMappings?: InputActionKeyMapping[]): {OutMappings: InputActionKeyMapping[]};
	ForceRebuildKeymaps(): void;
	AddAxisMapping(KeyMapping: InputAxisKeyMapping,bForceRebuildKeymaps: boolean): void;
	AddActionMapping(KeyMapping: InputActionKeyMapping,bForceRebuildKeymaps: boolean): void;
	static C(Other: UObject | any): InputSettings;
}

declare class BlueprintInputTouchDelegateBinding extends BlueprintInputDelegateBinding { 
	InputKeyEvent: EInputEvent;
	FunctionNameToBind: string;
	clone() : BlueprintInputTouchDelegateBinding;
	static C(Other: UObject | any): BlueprintInputTouchDelegateBinding;
}

declare class InputTouchDelegateBinding extends InputDelegateBinding { 
	InputTouchDelegateBindings: BlueprintInputTouchDelegateBinding[];
	static Load(ResourceName: string): InputTouchDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputTouchDelegateBinding;
	static GetDefaultObject(): InputTouchDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputTouchDelegateBinding;
	static C(Other: UObject | any): InputTouchDelegateBinding;
}

declare class InputVectorAxisDelegateBinding extends InputAxisKeyDelegateBinding { 
	static Load(ResourceName: string): InputVectorAxisDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputVectorAxisDelegateBinding;
	static GetDefaultObject(): InputVectorAxisDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputVectorAxisDelegateBinding;
	static C(Other: UObject | any): InputVectorAxisDelegateBinding;
}

declare class Interface_ActorSubobject extends Interface { 
	static Load(ResourceName: string): Interface_ActorSubobject;
	static Find(Outer: UObject, ResourceName: string): Interface_ActorSubobject;
	static GetDefaultObject(): Interface_ActorSubobject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_ActorSubobject;
	static C(Other: UObject | any): Interface_ActorSubobject;
}

declare class Interface_AssetUserData extends Interface { 
	static Load(ResourceName: string): Interface_AssetUserData;
	static Find(Outer: UObject, ResourceName: string): Interface_AssetUserData;
	static GetDefaultObject(): Interface_AssetUserData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_AssetUserData;
	static C(Other: UObject | any): Interface_AssetUserData;
}

declare class BoneReferenceSkeletonProvider extends Interface { 
	static Load(ResourceName: string): BoneReferenceSkeletonProvider;
	static Find(Outer: UObject, ResourceName: string): BoneReferenceSkeletonProvider;
	static GetDefaultObject(): BoneReferenceSkeletonProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoneReferenceSkeletonProvider;
	static C(Other: UObject | any): BoneReferenceSkeletonProvider;
}

declare class Interface_CollisionDataProvider extends Interface { 
	static Load(ResourceName: string): Interface_CollisionDataProvider;
	static Find(Outer: UObject, ResourceName: string): Interface_CollisionDataProvider;
	static GetDefaultObject(): Interface_CollisionDataProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_CollisionDataProvider;
	static C(Other: UObject | any): Interface_CollisionDataProvider;
}

declare class Interface_PostProcessVolume extends Interface { 
	static Load(ResourceName: string): Interface_PostProcessVolume;
	static Find(Outer: UObject, ResourceName: string): Interface_PostProcessVolume;
	static GetDefaultObject(): Interface_PostProcessVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_PostProcessVolume;
	static C(Other: UObject | any): Interface_PostProcessVolume;
}

declare class Interface_PreviewMeshProvider extends Interface { 
	static Load(ResourceName: string): Interface_PreviewMeshProvider;
	static Find(Outer: UObject, ResourceName: string): Interface_PreviewMeshProvider;
	static GetDefaultObject(): Interface_PreviewMeshProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_PreviewMeshProvider;
	static C(Other: UObject | any): Interface_PreviewMeshProvider;
}

declare class InterpFilter_Classes extends InterpFilter { 
	ClassToFilterBy: UnrealEngineClass;
	TrackClasses: UnrealEngineClass[];
	static Load(ResourceName: string): InterpFilter_Classes;
	static Find(Outer: UObject, ResourceName: string): InterpFilter_Classes;
	static GetDefaultObject(): InterpFilter_Classes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpFilter_Classes;
	static C(Other: UObject | any): InterpFilter_Classes;
}

declare class InterpFilter_Custom extends InterpFilter { 
	GroupsToInclude: InterpGroup[];
	static Load(ResourceName: string): InterpFilter_Custom;
	static Find(Outer: UObject, ResourceName: string): InterpFilter_Custom;
	static GetDefaultObject(): InterpFilter_Custom;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpFilter_Custom;
	static C(Other: UObject | any): InterpFilter_Custom;
}

declare class CameraPreviewInfo { 
	PawnClass: UnrealEngineClass;
	AnimSeq: AnimSequence;
	Location: Vector;
	Rotation: Rotator;
	PawnInst: Pawn;
	clone() : CameraPreviewInfo;
	static C(Other: UObject | any): CameraPreviewInfo;
}

declare class InterpGroupCamera extends InterpGroup { 
	CameraAnimInst: CameraAnim;
	Target: CameraPreviewInfo;
	CompressTolerance: number;
	static Load(ResourceName: string): InterpGroupCamera;
	static Find(Outer: UObject, ResourceName: string): InterpGroupCamera;
	static GetDefaultObject(): InterpGroupCamera;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupCamera;
	static C(Other: UObject | any): InterpGroupCamera;
}

declare class InterpGroupInstCamera extends InterpGroupInst { 
	static Load(ResourceName: string): InterpGroupInstCamera;
	static Find(Outer: UObject, ResourceName: string): InterpGroupInstCamera;
	static GetDefaultObject(): InterpGroupInstCamera;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupInstCamera;
	static C(Other: UObject | any): InterpGroupInstCamera;
}

declare class InterpGroupInstDirector extends InterpGroupInst { 
	static Load(ResourceName: string): InterpGroupInstDirector;
	static Find(Outer: UObject, ResourceName: string): InterpGroupInstDirector;
	static GetDefaultObject(): InterpGroupInstDirector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupInstDirector;
	static C(Other: UObject | any): InterpGroupInstDirector;
}

declare type EInterpToBehaviourType = 'OneShot' | 'OneShot_Reverse' | 'Loop_Reset' | 'PingPong' | 'EInterpToBehaviourType_MAX';
declare var EInterpToBehaviourType : { OneShot:'OneShot',OneShot_Reverse:'OneShot_Reverse',Loop_Reset:'Loop_Reset',PingPong:'PingPong',EInterpToBehaviourType_MAX:'EInterpToBehaviourType_MAX', };
declare class InterpControlPoint { 
	PositionControlPoint: Vector;
	bPositionIsRelative: boolean;
	clone() : InterpControlPoint;
	static C(Other: UObject | any): InterpControlPoint;
}

declare class InterpToMovementComponent extends MovementComponent { 
	Duration: number;
	bPauseOnImpact: boolean;
	bSweep: boolean;
	TeleportType: ETeleportType;
	BehaviourType: EInterpToBehaviourType;
	bCheckIfStillInWorld: boolean;
	bForceSubStepping: boolean;
	OnInterpToReverse: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnInterpToStop: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnWaitBeginDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnWaitEndDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnResetDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	MaxSimulationTimeStep: number;
	MaxSimulationIterations: number;
	ControlPoints: InterpControlPoint[];
	static Load(ResourceName: string): InterpToMovementComponent;
	static Find(Outer: UObject, ResourceName: string): InterpToMovementComponent;
	static GetDefaultObject(): InterpToMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpToMovementComponent;
	StopSimulating(HitResult: HitResult): void;
	RestartMovement(InitialDirection: number): void;
	ResetControlPoints(): void;
	FinaliseControlPoints(): void;
	AddControlPointPosition(Pos: Vector,bPositionIsRelative: boolean): void;
	static C(Other: UObject | any): InterpToMovementComponent;
}

declare class InterpTrackFloatBase extends InterpTrack { 
	FloatTrack: InterpCurveFloat;
	CurveTension: number;
	static Load(ResourceName: string): InterpTrackFloatBase;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatBase;
	static GetDefaultObject(): InterpTrackFloatBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatBase;
	static C(Other: UObject | any): InterpTrackFloatBase;
}

declare class AnimControlTrackKey { 
	StartTime: number;
	AnimSeq: AnimSequence;
	AnimStartOffset: number;
	AnimEndOffset: number;
	AnimPlayRate: number;
	bLooping: boolean;
	bReverse: boolean;
	clone() : AnimControlTrackKey;
	static C(Other: UObject | any): AnimControlTrackKey;
}

declare class InterpTrackAnimControl extends InterpTrackFloatBase { 
	SlotName: string;
	AnimSeqs: AnimControlTrackKey[];
	bSkipAnimNotifiers: boolean;
	static Load(ResourceName: string): InterpTrackAnimControl;
	static Find(Outer: UObject, ResourceName: string): InterpTrackAnimControl;
	static GetDefaultObject(): InterpTrackAnimControl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackAnimControl;
	static C(Other: UObject | any): InterpTrackAnimControl;
}

declare class InterpTrackVectorBase extends InterpTrack { 
	VectorTrack: InterpCurveVector;
	CurveTension: number;
	static Load(ResourceName: string): InterpTrackVectorBase;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVectorBase;
	static GetDefaultObject(): InterpTrackVectorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVectorBase;
	static C(Other: UObject | any): InterpTrackVectorBase;
}

declare class InterpTrackAudioMaster extends InterpTrackVectorBase { 
	static Load(ResourceName: string): InterpTrackAudioMaster;
	static Find(Outer: UObject, ResourceName: string): InterpTrackAudioMaster;
	static GetDefaultObject(): InterpTrackAudioMaster;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackAudioMaster;
	static C(Other: UObject | any): InterpTrackAudioMaster;
}

declare class BoolTrackKey { 
	Time: number;
	Value: boolean;
	clone() : BoolTrackKey;
	static C(Other: UObject | any): BoolTrackKey;
}

declare class InterpTrackBoolProp extends InterpTrack { 
	BoolTrack: BoolTrackKey[];
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackBoolProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackBoolProp;
	static GetDefaultObject(): InterpTrackBoolProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackBoolProp;
	static C(Other: UObject | any): InterpTrackBoolProp;
}

declare class InterpTrackColorProp extends InterpTrackVectorBase { 
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackColorProp;
	static GetDefaultObject(): InterpTrackColorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackColorProp;
	static C(Other: UObject | any): InterpTrackColorProp;
}

declare class InterpTrackColorScale extends InterpTrackVectorBase { 
	static Load(ResourceName: string): InterpTrackColorScale;
	static Find(Outer: UObject, ResourceName: string): InterpTrackColorScale;
	static GetDefaultObject(): InterpTrackColorScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackColorScale;
	static C(Other: UObject | any): InterpTrackColorScale;
}

declare class DirectorTrackCut { 
	Time: number;
	TransitionTime: number;
	TargetCamGroup: string;
	ShotNumber: number;
	clone() : DirectorTrackCut;
	static C(Other: UObject | any): DirectorTrackCut;
}

declare class InterpTrackDirector extends InterpTrack { 
	CutTrack: DirectorTrackCut[];
	bSimulateCameraCutsOnClients: boolean;
	PreviewCamera: CameraActor;
	static Load(ResourceName: string): InterpTrackDirector;
	static Find(Outer: UObject, ResourceName: string): InterpTrackDirector;
	static GetDefaultObject(): InterpTrackDirector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackDirector;
	static C(Other: UObject | any): InterpTrackDirector;
}

declare class EventTrackKey { 
	Time: number;
	EventName: string;
	clone() : EventTrackKey;
	static C(Other: UObject | any): EventTrackKey;
}

declare class InterpTrackEvent extends InterpTrack { 
	EventTrack: EventTrackKey[];
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	bFireEventsWhenJumpingForwards: boolean;
	bUseCustomEventName: boolean;
	static Load(ResourceName: string): InterpTrackEvent;
	static Find(Outer: UObject, ResourceName: string): InterpTrackEvent;
	static GetDefaultObject(): InterpTrackEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackEvent;
	static C(Other: UObject | any): InterpTrackEvent;
}

declare class InterpTrackFade extends InterpTrackFloatBase { 
	bPersistFade: boolean;
	bFadeAudio: boolean;
	FadeColor: LinearColor;
	static Load(ResourceName: string): InterpTrackFade;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFade;
	static GetDefaultObject(): InterpTrackFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFade;
	static C(Other: UObject | any): InterpTrackFade;
}

declare class InterpTrackFloatAnimBPParam extends InterpTrackFloatBase { 
	AnimBlueprintClass: UnrealEngineClass;
	AnimClass: UnrealEngineClass;
	ParamName: string;
	static Load(ResourceName: string): InterpTrackFloatAnimBPParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatAnimBPParam;
	static GetDefaultObject(): InterpTrackFloatAnimBPParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatAnimBPParam;
	static C(Other: UObject | any): InterpTrackFloatAnimBPParam;
}

declare class InterpTrackFloatMaterialParam extends InterpTrackFloatBase { 
	TargetMaterials: MaterialInterface[];
	ParamName: string;
	static Load(ResourceName: string): InterpTrackFloatMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatMaterialParam;
	static GetDefaultObject(): InterpTrackFloatMaterialParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatMaterialParam;
	static C(Other: UObject | any): InterpTrackFloatMaterialParam;
}

declare class InterpTrackFloatParticleParam extends InterpTrackFloatBase { 
	ParamName: string;
	static Load(ResourceName: string): InterpTrackFloatParticleParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatParticleParam;
	static GetDefaultObject(): InterpTrackFloatParticleParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatParticleParam;
	static C(Other: UObject | any): InterpTrackFloatParticleParam;
}

declare class InterpTrackFloatProp extends InterpTrackFloatBase { 
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackFloatProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatProp;
	static GetDefaultObject(): InterpTrackFloatProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatProp;
	static C(Other: UObject | any): InterpTrackFloatProp;
}

declare class InterpTrackInstAnimControl extends InterpTrackInst { 
	LastUpdatePosition: number;
	InitPosition: Vector;
	InitRotation: Rotator;
	static Load(ResourceName: string): InterpTrackInstAnimControl;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstAnimControl;
	static GetDefaultObject(): InterpTrackInstAnimControl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstAnimControl;
	static C(Other: UObject | any): InterpTrackInstAnimControl;
}

declare class InterpTrackInstAudioMaster extends InterpTrackInst { 
	static Load(ResourceName: string): InterpTrackInstAudioMaster;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstAudioMaster;
	static GetDefaultObject(): InterpTrackInstAudioMaster;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstAudioMaster;
	static C(Other: UObject | any): InterpTrackInstAudioMaster;
}

declare class InterpTrackInstProperty extends InterpTrackInst { 
	InterpProperty: any;
	PropertyOuterObjectInst: UObject;
	static Load(ResourceName: string): InterpTrackInstProperty;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstProperty;
	static GetDefaultObject(): InterpTrackInstProperty;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstProperty;
	static C(Other: UObject | any): InterpTrackInstProperty;
}

declare class InterpTrackInstBoolProp extends InterpTrackInstProperty { 
	ResetBool: boolean;
	static Load(ResourceName: string): InterpTrackInstBoolProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstBoolProp;
	static GetDefaultObject(): InterpTrackInstBoolProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstBoolProp;
	static C(Other: UObject | any): InterpTrackInstBoolProp;
}

declare class InterpTrackInstColorProp extends InterpTrackInstProperty { 
	ResetColor: Color;
	static Load(ResourceName: string): InterpTrackInstColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstColorProp;
	static GetDefaultObject(): InterpTrackInstColorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstColorProp;
	static C(Other: UObject | any): InterpTrackInstColorProp;
}

declare class InterpTrackInstColorScale extends InterpTrackInst { 
	static Load(ResourceName: string): InterpTrackInstColorScale;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstColorScale;
	static GetDefaultObject(): InterpTrackInstColorScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstColorScale;
	static C(Other: UObject | any): InterpTrackInstColorScale;
}

declare class InterpTrackInstEvent extends InterpTrackInst { 
	LastUpdatePosition: number;
	static Load(ResourceName: string): InterpTrackInstEvent;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstEvent;
	static GetDefaultObject(): InterpTrackInstEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstEvent;
	static C(Other: UObject | any): InterpTrackInstEvent;
}

declare class InterpTrackInstFade extends InterpTrackInst { 
	static Load(ResourceName: string): InterpTrackInstFade;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFade;
	static GetDefaultObject(): InterpTrackInstFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFade;
	static C(Other: UObject | any): InterpTrackInstFade;
}

declare class InterpTrackInstFloatAnimBPParam extends InterpTrackInst { 
	AnimScriptInstance: AnimInstance;
	ResetFloat: number;
	static Load(ResourceName: string): InterpTrackInstFloatAnimBPParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatAnimBPParam;
	static GetDefaultObject(): InterpTrackInstFloatAnimBPParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatAnimBPParam;
	static C(Other: UObject | any): InterpTrackInstFloatAnimBPParam;
}

declare class PrimitiveMaterialRef { 
	Primitive: PrimitiveComponent;
	Decal: DecalComponent;
	ElementIndex: number;
	clone() : PrimitiveMaterialRef;
	static C(Other: UObject | any): PrimitiveMaterialRef;
}

declare class InterpTrackInstFloatMaterialParam extends InterpTrackInst { 
	MaterialInstances: MaterialInstanceDynamic[];
	ResetFloats: number[];
	PrimitiveMaterialRefs: PrimitiveMaterialRef[];
	InstancedTrack: InterpTrackFloatMaterialParam;
	static Load(ResourceName: string): InterpTrackInstFloatMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatMaterialParam;
	static GetDefaultObject(): InterpTrackInstFloatMaterialParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatMaterialParam;
	static C(Other: UObject | any): InterpTrackInstFloatMaterialParam;
}

declare class InterpTrackInstFloatParticleParam extends InterpTrackInst { 
	ResetFloat: number;
	static Load(ResourceName: string): InterpTrackInstFloatParticleParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatParticleParam;
	static GetDefaultObject(): InterpTrackInstFloatParticleParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatParticleParam;
	static C(Other: UObject | any): InterpTrackInstFloatParticleParam;
}

declare class InterpTrackInstFloatProp extends InterpTrackInstProperty { 
	ResetFloat: number;
	static Load(ResourceName: string): InterpTrackInstFloatProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatProp;
	static GetDefaultObject(): InterpTrackInstFloatProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatProp;
	static C(Other: UObject | any): InterpTrackInstFloatProp;
}

declare class InterpTrackInstLinearColorProp extends InterpTrackInstProperty { 
	ResetColor: LinearColor;
	static Load(ResourceName: string): InterpTrackInstLinearColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstLinearColorProp;
	static GetDefaultObject(): InterpTrackInstLinearColorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstLinearColorProp;
	static C(Other: UObject | any): InterpTrackInstLinearColorProp;
}

declare class InterpTrackInstParticleReplay extends InterpTrackInst { 
	LastUpdatePosition: number;
	static Load(ResourceName: string): InterpTrackInstParticleReplay;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstParticleReplay;
	static GetDefaultObject(): InterpTrackInstParticleReplay;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstParticleReplay;
	static C(Other: UObject | any): InterpTrackInstParticleReplay;
}

declare class InterpTrackInstSlomo extends InterpTrackInst { 
	OldTimeDilation: number;
	static Load(ResourceName: string): InterpTrackInstSlomo;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstSlomo;
	static GetDefaultObject(): InterpTrackInstSlomo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstSlomo;
	static C(Other: UObject | any): InterpTrackInstSlomo;
}

declare class InterpTrackInstSound extends InterpTrackInst { 
	LastUpdatePosition: number;
	PlayAudioComp: AudioComponent;
	static Load(ResourceName: string): InterpTrackInstSound;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstSound;
	static GetDefaultObject(): InterpTrackInstSound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstSound;
	static C(Other: UObject | any): InterpTrackInstSound;
}

declare type ETrackToggleAction = 'ETTA_Off' | 'ETTA_On' | 'ETTA_Toggle' | 'ETTA_Trigger' | 'ETTA_MAX';
declare var ETrackToggleAction : { ETTA_Off:'ETTA_Off',ETTA_On:'ETTA_On',ETTA_Toggle:'ETTA_Toggle',ETTA_Trigger:'ETTA_Trigger',ETTA_MAX:'ETTA_MAX', };
declare class InterpTrackInstToggle extends InterpTrackInst { 
	Action: ETrackToggleAction;
	LastUpdatePosition: number;
	bSavedActiveState: boolean;
	static Load(ResourceName: string): InterpTrackInstToggle;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstToggle;
	static GetDefaultObject(): InterpTrackInstToggle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstToggle;
	static C(Other: UObject | any): InterpTrackInstToggle;
}

declare class InterpTrackVectorMaterialParam extends InterpTrackVectorBase { 
	TargetMaterials: MaterialInterface[];
	ParamName: string;
	static Load(ResourceName: string): InterpTrackVectorMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVectorMaterialParam;
	static GetDefaultObject(): InterpTrackVectorMaterialParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVectorMaterialParam;
	static C(Other: UObject | any): InterpTrackVectorMaterialParam;
}

declare class InterpTrackInstVectorMaterialParam extends InterpTrackInst { 
	MaterialInstances: MaterialInstanceDynamic[];
	ResetVectors: Vector[];
	PrimitiveMaterialRefs: PrimitiveMaterialRef[];
	InstancedTrack: InterpTrackVectorMaterialParam;
	static Load(ResourceName: string): InterpTrackInstVectorMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstVectorMaterialParam;
	static GetDefaultObject(): InterpTrackInstVectorMaterialParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstVectorMaterialParam;
	static C(Other: UObject | any): InterpTrackInstVectorMaterialParam;
}

declare class InterpTrackInstVectorProp extends InterpTrackInstProperty { 
	ResetVector: Vector;
	static Load(ResourceName: string): InterpTrackInstVectorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstVectorProp;
	static GetDefaultObject(): InterpTrackInstVectorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstVectorProp;
	static C(Other: UObject | any): InterpTrackInstVectorProp;
}

declare type EVisibilityTrackAction = 'EVTA_Hide' | 'EVTA_Show' | 'EVTA_Toggle' | 'EVTA_MAX';
declare var EVisibilityTrackAction : { EVTA_Hide:'EVTA_Hide',EVTA_Show:'EVTA_Show',EVTA_Toggle:'EVTA_Toggle',EVTA_MAX:'EVTA_MAX', };
declare class InterpTrackInstVisibility extends InterpTrackInst { 
	Action: EVisibilityTrackAction;
	LastUpdatePosition: number;
	static Load(ResourceName: string): InterpTrackInstVisibility;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstVisibility;
	static GetDefaultObject(): InterpTrackInstVisibility;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstVisibility;
	static C(Other: UObject | any): InterpTrackInstVisibility;
}

declare class InterpCurvePointLinearColor { 
	InVal: number;
	OutVal: LinearColor;
	ArriveTangent: LinearColor;
	LeaveTangent: LinearColor;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointLinearColor;
	static C(Other: UObject | any): InterpCurvePointLinearColor;
}

declare class InterpCurveLinearColor { 
	Points: InterpCurvePointLinearColor[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveLinearColor;
	static C(Other: UObject | any): InterpCurveLinearColor;
}

declare class InterpTrackLinearColorBase extends InterpTrack { 
	LinearColorTrack: InterpCurveLinearColor;
	CurveTension: number;
	static Load(ResourceName: string): InterpTrackLinearColorBase;
	static Find(Outer: UObject, ResourceName: string): InterpTrackLinearColorBase;
	static GetDefaultObject(): InterpTrackLinearColorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackLinearColorBase;
	static C(Other: UObject | any): InterpTrackLinearColorBase;
}

declare class InterpTrackLinearColorProp extends InterpTrackLinearColorBase { 
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackLinearColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackLinearColorProp;
	static GetDefaultObject(): InterpTrackLinearColorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackLinearColorProp;
	static C(Other: UObject | any): InterpTrackLinearColorProp;
}

declare type EInterpMoveAxis = 'AXIS_TranslationX' | 'AXIS_TranslationY' | 'AXIS_TranslationZ' | 'AXIS_RotationX' | 'AXIS_RotationY' | 'AXIS_RotationZ' | 'AXIS_MAX';
declare var EInterpMoveAxis : { AXIS_TranslationX:'AXIS_TranslationX',AXIS_TranslationY:'AXIS_TranslationY',AXIS_TranslationZ:'AXIS_TranslationZ',AXIS_RotationX:'AXIS_RotationX',AXIS_RotationY:'AXIS_RotationY',AXIS_RotationZ:'AXIS_RotationZ',AXIS_MAX:'AXIS_MAX', };
declare class InterpTrackMoveAxis extends InterpTrackFloatBase { 
	MoveAxis: EInterpMoveAxis;
	LookupTrack: InterpLookupTrack;
	static Load(ResourceName: string): InterpTrackMoveAxis;
	static Find(Outer: UObject, ResourceName: string): InterpTrackMoveAxis;
	static GetDefaultObject(): InterpTrackMoveAxis;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackMoveAxis;
	static C(Other: UObject | any): InterpTrackMoveAxis;
}

declare class ParticleReplayTrackKey { 
	Time: number;
	Duration: number;
	ClipIDNumber: number;
	clone() : ParticleReplayTrackKey;
	static C(Other: UObject | any): ParticleReplayTrackKey;
}

declare class InterpTrackParticleReplay extends InterpTrack { 
	TrackKeys: ParticleReplayTrackKey[];
	bIsCapturingReplay: boolean;
	FixedTimeStep: number;
	static Load(ResourceName: string): InterpTrackParticleReplay;
	static Find(Outer: UObject, ResourceName: string): InterpTrackParticleReplay;
	static GetDefaultObject(): InterpTrackParticleReplay;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackParticleReplay;
	static C(Other: UObject | any): InterpTrackParticleReplay;
}

declare class InterpTrackSlomo extends InterpTrackFloatBase { 
	static Load(ResourceName: string): InterpTrackSlomo;
	static Find(Outer: UObject, ResourceName: string): InterpTrackSlomo;
	static GetDefaultObject(): InterpTrackSlomo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackSlomo;
	static C(Other: UObject | any): InterpTrackSlomo;
}

declare class SoundTrackKey { 
	Time: number;
	Volume: number;
	Pitch: number;
	Sound: SoundBase;
	clone() : SoundTrackKey;
	static C(Other: UObject | any): SoundTrackKey;
}

declare class InterpTrackSound extends InterpTrackVectorBase { 
	Sounds: SoundTrackKey[];
	bPlayOnReverse: boolean;
	bContinueSoundOnMatineeEnd: boolean;
	bSuppressSubtitles: boolean;
	bTreatAsDialogue: boolean;
	bAttach: boolean;
	static Load(ResourceName: string): InterpTrackSound;
	static Find(Outer: UObject, ResourceName: string): InterpTrackSound;
	static GetDefaultObject(): InterpTrackSound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackSound;
	static C(Other: UObject | any): InterpTrackSound;
}

declare class ToggleTrackKey { 
	Time: number;
	ToggleAction: ETrackToggleAction;
	clone() : ToggleTrackKey;
	static C(Other: UObject | any): ToggleTrackKey;
}

declare class InterpTrackToggle extends InterpTrack { 
	ToggleTrack: ToggleTrackKey[];
	bActivateSystemEachUpdate: boolean;
	bActivateWithJustAttachedFlag: boolean;
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	bFireEventsWhenJumpingForwards: boolean;
	static Load(ResourceName: string): InterpTrackToggle;
	static Find(Outer: UObject, ResourceName: string): InterpTrackToggle;
	static GetDefaultObject(): InterpTrackToggle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackToggle;
	static C(Other: UObject | any): InterpTrackToggle;
}

declare class InterpTrackVectorProp extends InterpTrackVectorBase { 
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackVectorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVectorProp;
	static GetDefaultObject(): InterpTrackVectorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVectorProp;
	static C(Other: UObject | any): InterpTrackVectorProp;
}

declare type EVisibilityTrackCondition = 'EVTC_Always' | 'EVTC_GoreEnabled' | 'EVTC_GoreDisabled' | 'EVTC_MAX';
declare var EVisibilityTrackCondition : { EVTC_Always:'EVTC_Always',EVTC_GoreEnabled:'EVTC_GoreEnabled',EVTC_GoreDisabled:'EVTC_GoreDisabled',EVTC_MAX:'EVTC_MAX', };
declare class VisibilityTrackKey { 
	Time: number;
	Action: EVisibilityTrackAction;
	ActiveCondition: EVisibilityTrackCondition;
	clone() : VisibilityTrackKey;
	static C(Other: UObject | any): VisibilityTrackKey;
}

declare class InterpTrackVisibility extends InterpTrack { 
	VisibilityTrack: VisibilityTrackKey[];
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	bFireEventsWhenJumpingForwards: boolean;
	static Load(ResourceName: string): InterpTrackVisibility;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVisibility;
	static GetDefaultObject(): InterpTrackVisibility;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVisibility;
	static C(Other: UObject | any): InterpTrackVisibility;
}

declare class IntSerialization extends UObject { 
	UnsignedInt16Variable: any;
	UnsignedInt32Variable: any;
	UnsignedInt64Variable: any;
	SignedInt8Variable: any;
	SignedInt16Variable: any;
	SignedInt64Variable: any;
	UnsignedInt8Variable: number;
	SignedInt32Variable: number;
	static Load(ResourceName: string): IntSerialization;
	static Find(Outer: UObject, ResourceName: string): IntSerialization;
	static GetDefaultObject(): IntSerialization;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IntSerialization;
	static C(Other: UObject | any): IntSerialization;
}

declare class KillZVolume extends PhysicsVolume { 
	static GetDefaultObject(): KillZVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KillZVolume;
	static C(Other: UObject | any): KillZVolume;
}

declare class KismetArrayLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetArrayLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetArrayLibrary;
	static GetDefaultObject(): KismetArrayLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetArrayLibrary;
	static SetArrayPropertyByName(UObject: UObject,PropertyName: string,Value: number[]): void;
	static FilterArray(TargetArray: Actor[],FilterClass: UnrealEngineClass,FilteredArray?: Actor[]): {FilteredArray: Actor[]};
	static Array_Swap(TargetArray: number[],FirstIndex: number,SecondIndex: number): void;
	static Array_Shuffle(TargetArray: number[]): void;
	static Array_Set(TargetArray: number[],index: number,Item: number,bSizeToFit: boolean): void;
	static Array_Reverse(TargetArray: number[]): void;
	static Array_Resize(TargetArray: number[],Size: number): void;
	static Array_RemoveItem(TargetArray: number[],Item: number): boolean;
	static Array_Remove(TargetArray: number[],IndexToRemove: number): void;
	static Array_RandomFromStream(TargetArray: number[],RandomStream?: RandomStream,OutItem?: number,OutIndex?: number): {RandomStream: RandomStream, OutItem: number, OutIndex: number};
	static Array_Random(TargetArray: number[],OutItem?: number,OutIndex?: number): {OutItem: number, OutIndex: number};
	static Array_Length(TargetArray: number[]): number;
	static Array_LastIndex(TargetArray: number[]): number;
	static Array_IsValidIndex(TargetArray: number[],IndexToTest: number): boolean;
	static Array_Insert(TargetArray: number[],NewItem: number,index: number): void;
	static Array_Identical(ArrayA: number[],ArrayB: number[]): boolean;
	static Array_Get(TargetArray: number[],index: number,Item?: number): {Item: number};
	static Array_Find(TargetArray: number[],ItemToFind: number): number;
	static Array_Contains(TargetArray: number[],ItemToFind: number): boolean;
	static Array_Clear(TargetArray: number[]): void;
	static Array_Append(TargetArray: number[],SourceArray: number[]): void;
	static Array_AddUnique(TargetArray: number[],NewItem: number): number;
	static Array_Add(TargetArray: number[],NewItem: number): number;
	static C(Other: UObject | any): KismetArrayLibrary;
}

declare class KismetGuidLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetGuidLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetGuidLibrary;
	static GetDefaultObject(): KismetGuidLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetGuidLibrary;
	static Parse_StringToGuid(GuidString: string,OutGuid?: Guid,Success?: boolean): {OutGuid: Guid, Success: boolean};
	static NotEqual_GuidGuid(A: Guid,B: Guid): boolean;
	static NewGuid(): Guid;
	static IsValid_Guid(InGuid: Guid): boolean;
	static Invalidate_Guid(InGuid?: Guid): {InGuid: Guid};
	static EqualEqual_GuidGuid(A: Guid,B: Guid): boolean;
	static Conv_GuidToString(InGuid: Guid): string;
	static C(Other: UObject | any): KismetGuidLibrary;
}

declare class KismetInputLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetInputLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetInputLibrary;
	static GetDefaultObject(): KismetInputLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetInputLibrary;
	static PointerEvent_IsTouchEvent(Input: UPointerEvent): boolean;
	static PointerEvent_IsMouseButtonDown(Input: UPointerEvent,MouseButton: Key): boolean;
	static PointerEvent_GetWheelDelta(Input: UPointerEvent): number;
	static PointerEvent_GetUserIndex(Input: UPointerEvent): number;
	static PointerEvent_GetTouchpadIndex(Input: UPointerEvent): number;
	static PointerEvent_GetScreenSpacePosition(Input: UPointerEvent): Vector2D;
	static PointerEvent_GetPointerIndex(Input: UPointerEvent): number;
	static PointerEvent_GetLastScreenSpacePosition(Input: UPointerEvent): Vector2D;
	static PointerEvent_GetGestureType(Input: UPointerEvent): ESlateGesture;
	static PointerEvent_GetGestureDelta(Input: UPointerEvent): Vector2D;
	static PointerEvent_GetEffectingButton(Input: UPointerEvent): Key;
	static PointerEvent_GetCursorDelta(Input: UPointerEvent): Vector2D;
	static Key_IsVectorAxis(Key: Key): boolean;
	static Key_IsValid(Key: Key): boolean;
	static Key_IsMouseButton(Key: Key): boolean;
	static Key_IsModifierKey(Key: Key): boolean;
	static Key_IsKeyboardKey(Key: Key): boolean;
	static Key_IsGamepadKey(Key: Key): boolean;
	static Key_IsDigital(Key: Key): boolean;
	static Key_IsButtonAxis(Key: Key): boolean;
	static Key_IsAxis3D(Key: Key): boolean;
	static Key_IsAxis2D(Key: Key): boolean;
	static Key_IsAxis1D(Key: Key): boolean;
	static Key_IsAnalog(Key: Key): boolean;
	static Key_GetNavigationDirectionFromKey(InKeyEvent: KeyEvent): EUINavigation;
	static Key_GetNavigationDirectionFromAnalog(InAnalogEvent: AnalogInputEvent): EUINavigation;
	static Key_GetNavigationActionFromKey(InKeyEvent: KeyEvent): EUINavigationAction;
	static Key_GetNavigationAction(InKey: Key): EUINavigationAction;
	static Key_GetDisplayName(Key: Key): string;
	static InputEvent_IsShiftDown(Input: InputEvent): boolean;
	static InputEvent_IsRightShiftDown(Input: InputEvent): boolean;
	static InputEvent_IsRightControlDown(Input: InputEvent): boolean;
	static InputEvent_IsRightCommandDown(Input: InputEvent): boolean;
	static InputEvent_IsRightAltDown(Input: InputEvent): boolean;
	static InputEvent_IsRepeat(Input: InputEvent): boolean;
	static InputEvent_IsLeftShiftDown(Input: InputEvent): boolean;
	static InputEvent_IsLeftControlDown(Input: InputEvent): boolean;
	static InputEvent_IsLeftCommandDown(Input: InputEvent): boolean;
	static InputEvent_IsLeftAltDown(Input: InputEvent): boolean;
	static InputEvent_IsControlDown(Input: InputEvent): boolean;
	static InputEvent_IsCommandDown(Input: InputEvent): boolean;
	static InputEvent_IsAltDown(Input: InputEvent): boolean;
	static InputChord_GetDisplayName(Key: InputChord): string;
	static GetUserIndex(Input: KeyEvent): number;
	static GetKey(Input: KeyEvent): Key;
	static GetAnalogValue(Input: AnalogInputEvent): number;
	static EqualEqual_KeyKey(A: Key,B: Key): boolean;
	static EqualEqual_InputChordInputChord(A: InputChord,B: InputChord): boolean;
	static CalibrateTilt(): void;
	static C(Other: UObject | any): KismetInputLibrary;
}

declare type ELocalizedTextSourceCategory = 'Game' | 'Engine' | 'Editor' | 'ELocalizedTextSourceCategory_MAX';
declare var ELocalizedTextSourceCategory : { Game:'Game',Engine:'Engine',Editor:'Editor',ELocalizedTextSourceCategory_MAX:'ELocalizedTextSourceCategory_MAX', };
declare class KismetInternationalizationLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetInternationalizationLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetInternationalizationLibrary;
	static GetDefaultObject(): KismetInternationalizationLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetInternationalizationLibrary;
	static SetCurrentLocale(Culture: string,SaveToConfig: boolean): boolean;
	static SetCurrentLanguageAndLocale(Culture: string,SaveToConfig: boolean): boolean;
	static SetCurrentLanguage(Culture: string,SaveToConfig: boolean): boolean;
	static SetCurrentCulture(Culture: string,SaveToConfig: boolean): boolean;
	static SetCurrentAssetGroupCulture(AssetGroup: string,Culture: string,SaveToConfig: boolean): boolean;
	static GetSuitableCulture(AvailableCultures: string[],CultureToMatch: string,FallbackCulture: string): string;
	static GetNativeCulture(TextCategory: ELocalizedTextSourceCategory): string;
	static GetLocalizedCultures(IncludeGame: boolean,IncludeEngine: boolean,IncludeEditor: boolean,IncludeAdditional: boolean): string[];
	static GetCurrentLocale(): string;
	static GetCurrentLanguage(): string;
	static GetCurrentCulture(): string;
	static GetCurrentAssetGroupCulture(AssetGroup: string): string;
	static GetCultureDisplayName(Culture: string,Localized: boolean): string;
	static ClearCurrentAssetGroupCulture(AssetGroup: string,SaveToConfig: boolean): void;
	static C(Other: UObject | any): KismetInternationalizationLibrary;
}

declare class KismetMaterialLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetMaterialLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetMaterialLibrary;
	static GetDefaultObject(): KismetMaterialLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetMaterialLibrary;
	static SetVectorParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: LinearColor): void;
	static SetScalarParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: number): void;
	static GetVectorParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string): LinearColor;
	static GetScalarParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string): number;
	static CreateDynamicMaterialInstance(WorldContextObject: UObject,Parent: MaterialInterface,OptionalName: string,CreationFlags: EMIDCreationFlags): MaterialInstanceDynamic;
	static C(Other: UObject | any): KismetMaterialLibrary;
}

declare class FloatSpringState { 
	clone() : FloatSpringState;
	static C(Other: UObject | any): FloatSpringState;
	ResetFloatSpringState(): {SpringState: FloatSpringState};
	static ResetFloatSpringState(SpringState?: FloatSpringState): {SpringState: FloatSpringState};
}

declare class KismetMathLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetMathLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetMathLibrary;
	static GetDefaultObject(): KismetMathLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetMathLibrary;
	static Xor_IntInt(A: number,B: number): number;
	static Xor_Int64Int64(A: any,B: any): any;
	static Wrap(Value: number,Min: number,Max: number): number;
	static WeightedMovingAverage_FVector(CurrentSample: Vector,PreviousSample: Vector,Weight: number): Vector;
	static WeightedMovingAverage_FRotator(CurrentSample: Rotator,PreviousSample: Rotator,Weight: number): Rotator;
	static WeightedMovingAverage_Float(CurrentSample: number,PreviousSample: number,Weight: number): number;
	static VSizeXYSquared(A: Vector): number;
	static VSizeXY(A: Vector): number;
	static VSizeSquared(A: Vector): number;
	static VSize2DSquared(A: Vector2D): number;
	static VSize2D(A: Vector2D): number;
	static VSize(A: Vector): number;
	static VLerp(A: Vector,B: Vector,Alpha: number): Vector;
	static VInterpTo_Constant(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
	static VInterpTo(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
	static VectorSpringInterp(Current: Vector,Target: Vector,SpringState?: VectorSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number): {SpringState: VectorSpringState, $: Vector};
	static Vector_Zero(): Vector;
	static Vector_Up(): Vector;
	static Vector_UnwindEuler(A?: Vector): {A: Vector};
	static Vector_UnitCartesianToSpherical(A: Vector): Vector2D;
	static Vector_ToRadians(A: Vector): Vector;
	static Vector_ToDegrees(A: Vector): Vector;
	static Vector_SnappedToGrid(InVect: Vector,InGridSize: number): Vector;
	static Vector_Set(A?: Vector,X?: number,Y?: number,Z?: number): {A: Vector};
	static Vector_Right(): Vector;
	static Vector_Reciprocal(A: Vector): Vector;
	static Vector_ProjectOnToNormal(V: Vector,InNormal: Vector): Vector;
	static Vector_One(): Vector;
	static Vector_NormalUnsafe(A: Vector): Vector;
	static Vector_Normalize(A?: Vector,Tolerance?: number): {A: Vector};
	static Vector_Normal2D(A: Vector,Tolerance: number): Vector;
	static Vector_MirrorByPlane(A: Vector,InPlane: Plane): Vector;
	static Vector_Left(): Vector;
	static Vector_IsZero(A: Vector): boolean;
	static Vector_IsUnit(A: Vector,SquaredLenthTolerance: number): boolean;
	static Vector_IsUniform(A: Vector,Tolerance: number): boolean;
	static Vector_IsNormal(A: Vector): boolean;
	static Vector_IsNearlyZero(A: Vector,Tolerance: number): boolean;
	static Vector_IsNAN(A: Vector): boolean;
	static Vector_HeadingAngle(A: Vector): number;
	static Vector_GetSignVector(A: Vector): Vector;
	static Vector_GetProjection(A: Vector): Vector;
	static Vector_GetAbsMin(A: Vector): number;
	static Vector_GetAbsMax(A: Vector): number;
	static Vector_GetAbs(A: Vector): Vector;
	static Vector_Forward(): Vector;
	static Vector_Down(): Vector;
	static Vector_DistanceSquared(v1: Vector,v2: Vector): number;
	static Vector_Distance2DSquared(v1: Vector,v2: Vector): number;
	static Vector_Distance2D(v1: Vector,v2: Vector): number;
	static Vector_Distance(v1: Vector,v2: Vector): number;
	static Vector_CosineAngle2D(A: Vector,B: Vector): number;
	static Vector_ComponentMin(A: Vector,B: Vector): Vector;
	static Vector_ComponentMax(A: Vector,B: Vector): Vector;
	static Vector_ClampSizeMax2D(A: Vector,Max: number): Vector;
	static Vector_ClampSizeMax(A: Vector,Max: number): Vector;
	static Vector_ClampSize2D(A: Vector,Min: number,Max: number): Vector;
	static Vector_BoundedToCube(InVect: Vector,InRadius: number): Vector;
	static Vector_BoundedToBox(InVect: Vector,InBoxMin: Vector,InBoxMax: Vector): Vector;
	static Vector_Backward(): Vector;
	static Vector_Assign(A?: Vector,InVector?: Vector): {A: Vector};
	static Vector_AddBounded(A?: Vector,InAddVect?: Vector,InRadius?: number): {A: Vector};
	static Vector4_Zero(): Vector4;
	static Vector4_SizeSquared3(A: Vector4): number;
	static Vector4_SizeSquared(A: Vector4): number;
	static Vector4_Size3(A: Vector4): number;
	static Vector4_Size(A: Vector4): number;
	static Vector4_Set(A?: Vector4,X?: number,Y?: number,Z?: number,W?: number): {A: Vector4};
	static Vector4_NormalUnsafe3(A: Vector4): Vector4;
	static Vector4_Normalize3(A?: Vector4,Tolerance?: number): {A: Vector4};
	static Vector4_Normal3(A: Vector4,Tolerance: number): Vector4;
	static Vector4_Negated(A: Vector4): Vector4;
	static Vector4_MirrorByVector3(Direction: Vector4,SurfaceNormal: Vector4): Vector4;
	static Vector4_IsZero(A: Vector4): boolean;
	static Vector4_IsUnit3(A: Vector4,SquaredLenthTolerance: number): boolean;
	static Vector4_IsNormal3(A: Vector4): boolean;
	static Vector4_IsNearlyZero3(A: Vector4,Tolerance: number): boolean;
	static Vector4_IsNAN(A: Vector4): boolean;
	static Vector4_DotProduct3(A: Vector4,B: Vector4): number;
	static Vector4_DotProduct(A: Vector4,B: Vector4): number;
	static Vector4_CrossProduct3(A: Vector4,B: Vector4): Vector4;
	static Vector4_Assign(A?: Vector4,InVector?: Vector4): {A: Vector4};
	static Vector2DInterpTo_Constant(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
	static Vector2DInterpTo(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
	static Vector2D_Zero(): Vector2D;
	static Vector2D_Unit45Deg(): Vector2D;
	static Vector2D_One(): Vector2D;
	static VEase(A: Vector,B: Vector,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Vector;
	static UtcNow(): DateTime;
	static TransformVector4(Matrix: Matrix,Vec4: Vector4): Vector4;
	static TransformRotation(T: Transform,Rotation: Rotator): Rotator;
	static TransformLocation(T: Transform,Location: Vector): Vector;
	static TransformDirection(T: Transform,Direction: Vector): Vector;
	static Transform_Determinant(Transform: Transform): number;
	static ToSign2D(A: Vector2D): Vector2D;
	static ToRounded2D(A: Vector2D): Vector2D;
	static ToDirectionAndLength2D(A: Vector2D,OutDir?: Vector2D,OutLength?: number): {OutDir: Vector2D, OutLength: number};
	static Today(): DateTime;
	static TLerp(A: Transform,B: Transform,Alpha: number,InterpMode: ELerpInterpolationMode): Transform;
	static TInterpTo(Current: Transform,Target: Transform,DeltaTime: number,InterpSpeed: number): Transform;
	static TimespanZeroValue(): Timespan;
	static TimespanRatio(A: Timespan,B: Timespan): number;
	static TimespanMinValue(): Timespan;
	static TimespanMaxValue(): Timespan;
	static TimespanFromString(TimespanString: string,Result?: Timespan): {Result: Timespan, $: boolean};
	static TEase(A: Transform,B: Transform,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Transform;
	static Tan(A: number): number;
	static Subtract_VectorVector(A: Vector,B: Vector): Vector;
	static Subtract_VectorInt(A: Vector,B: number): Vector;
	static Subtract_VectorFloat(A: Vector,B: number): Vector;
	static Subtract_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
	static Subtract_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Subtract_Vector2DFloat(A: Vector2D,B: number): Vector2D;
	static Subtract_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
	static Subtract_QuatQuat(A: Quat,B: Quat): Quat;
	static Subtract_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
	static Subtract_IntPointIntPoint(A: IntPoint,B: IntPoint): IntPoint;
	static Subtract_IntPointInt(A: IntPoint,B: number): IntPoint;
	static Subtract_IntInt(A: number,B: number): number;
	static Subtract_Int64Int64(A: any,B: any): any;
	static Subtract_FloatFloat(A: number,B: number): number;
	static Subtract_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static Subtract_DateTimeDateTime(A: DateTime,B: DateTime): Timespan;
	static Subtract_ByteByte(A: number,B: number): number;
	static Square(A: number): number;
	static Sqrt(A: number): number;
	static Spherical2DToUnitCartesian(A: Vector2D): Vector;
	static Sin(A: number): number;
	static SignOfInteger64(A: any): any;
	static SignOfInteger(A: number): number;
	static SignOfFloat(A: number): number;
	static SetRandomStreamSeed(Stream?: RandomStream,NewSeed?: number): {Stream: RandomStream};
	static Set2D(A?: Vector2D,X?: number,Y?: number): {A: Vector2D};
	static SelectVector(A: Vector,B: Vector,bPickA: boolean): Vector;
	static SelectTransform(A: Transform,B: Transform,bPickA: boolean): Transform;
	static SelectString(A: string,B: string,bPickA: boolean): string;
	static SelectRotator(A: Rotator,B: Rotator,bPickA: boolean): Rotator;
	static SelectObject(A: UObject,B: UObject,bSelectA: boolean): UObject;
	static SelectInt(A: number,B: number,bPickA: boolean): number;
	static SelectFloat(A: number,B: number,bPickA: boolean): number;
	static SelectColor(A: LinearColor,B: LinearColor,bPickA: boolean): LinearColor;
	static SelectClass(A: UnrealEngineClass,B: UnrealEngineClass,bSelectA: boolean): UnrealEngineClass;
	static SeedRandomStream(Stream?: RandomStream): {Stream: RandomStream};
	static SafeDivide(A: number,B: number): number;
	static Round64(A: number): any;
	static Round(A: number): number;
	static RotatorFromAxisAndAngle(Axis: Vector,Angle: number): Rotator;
	static RotateAngleAxis(InVect: Vector,AngleDeg: number,Axis: Vector): Vector;
	static RLerp(A: Rotator,B: Rotator,Alpha: number,bShortestPath: boolean): Rotator;
	static RInterpTo_Constant(Current: Rotator,Target: Rotator,DeltaTime: number,InterpSpeed: number): Rotator;
	static RInterpTo(Current: Rotator,Target: Rotator,DeltaTime: number,InterpSpeed: number): Rotator;
	static RGBToHSV_Vector(RGB: LinearColor,HSV?: LinearColor): {HSV: LinearColor};
	static RGBToHSV(InColor: LinearColor,H?: number,S?: number,V?: number,A?: number): {H: number, S: number, V: number, A: number};
	static RGBLinearToHSV(RGB: LinearColor): LinearColor;
	static ResetVectorSpringState(SpringState?: VectorSpringState): {SpringState: VectorSpringState};
	static ResetRandomStream(Stream: RandomStream): void;
	static ResetFloatSpringState(SpringState?: FloatSpringState): {SpringState: FloatSpringState};
	static REase(A: Rotator,B: Rotator,Alpha: number,bShortestPath: boolean,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Rotator;
	static RandomUnitVectorInEllipticalConeInRadiansFromStream(ConeDir: Vector,MaxYawInRadians: number,MaxPitchInRadians: number,Stream: RandomStream): Vector;
	static RandomUnitVectorInEllipticalConeInRadians(ConeDir: Vector,MaxYawInRadians: number,MaxPitchInRadians: number): Vector;
	static RandomUnitVectorInEllipticalConeInDegreesFromStream(ConeDir: Vector,MaxYawInDegrees: number,MaxPitchInDegrees: number,Stream: RandomStream): Vector;
	static RandomUnitVectorInEllipticalConeInDegrees(ConeDir: Vector,MaxYawInDegrees: number,MaxPitchInDegrees: number): Vector;
	static RandomUnitVectorInConeInRadiansFromStream(ConeDir: Vector,ConeHalfAngleInRadians: number,Stream: RandomStream): Vector;
	static RandomUnitVectorInConeInRadians(ConeDir: Vector,ConeHalfAngleInRadians: number): Vector;
	static RandomUnitVectorInConeInDegreesFromStream(ConeDir: Vector,ConeHalfAngleInDegrees: number,Stream: RandomStream): Vector;
	static RandomUnitVectorInConeInDegrees(ConeDir: Vector,ConeHalfAngleInDegrees: number): Vector;
	static RandomUnitVectorFromStream(Stream: RandomStream): Vector;
	static RandomUnitVector(): Vector;
	static RandomRotatorFromStream(bRoll: boolean,Stream: RandomStream): Rotator;
	static RandomRotator(bRoll: boolean): Rotator;
	static RandomPointInBoundingBox(Origin: Vector,BoxExtent: Vector): Vector;
	static RandomIntegerInRangeFromStream(Min: number,Max: number,Stream: RandomStream): number;
	static RandomIntegerInRange(Min: number,Max: number): number;
	static RandomIntegerFromStream(Max: number,Stream: RandomStream): number;
	static RandomInteger64InRange(Min: any,Max: any): any;
	static RandomInteger64(Max: any): any;
	static RandomInteger(Max: number): number;
	static RandomFloatInRangeFromStream(Min: number,Max: number,Stream: RandomStream): number;
	static RandomFloatInRange(Min: number,Max: number): number;
	static RandomFloatFromStream(Stream: RandomStream): number;
	static RandomFloat(): number;
	static RandomBoolWithWeightFromStream(Weight: number,RandomStream: RandomStream): boolean;
	static RandomBoolWithWeight(Weight: number): boolean;
	static RandomBoolFromStream(Stream: RandomStream): boolean;
	static RandomBool(): boolean;
	static RadiansToDegrees(A: number): number;
	static Quat_VectorUp(Q: Quat): Vector;
	static Quat_VectorRight(Q: Quat): Vector;
	static Quat_VectorForward(Q: Quat): Vector;
	static Quat_UnrotateVector(Q: Quat,V: Vector): Vector;
	static Quat_SizeSquared(Q: Quat): number;
	static Quat_Size(Q: Quat): number;
	static Quat_SetFromEuler(Q?: Quat,Euler?: Vector): {Q: Quat};
	static Quat_SetComponents(Q?: Quat,X?: number,Y?: number,Z?: number,W?: number): {Q: Quat};
	static Quat_Rotator(Q: Quat): Rotator;
	static Quat_RotateVector(Q: Quat,V: Vector): Vector;
	static Quat_Normalized(Q: Quat,Tolerance: number): Quat;
	static Quat_Normalize(Q?: Quat,Tolerance?: number): {Q: Quat};
	static Quat_MakeFromEuler(Euler: Vector): Quat;
	static Quat_Log(Q: Quat): Quat;
	static Quat_IsNormalized(Q: Quat): boolean;
	static Quat_IsNonFinite(Q: Quat): boolean;
	static Quat_IsIdentity(Q: Quat,Tolerance: number): boolean;
	static Quat_IsFinite(Q: Quat): boolean;
	static Quat_Inversed(Q: Quat): Quat;
	static Quat_Identity(): Quat;
	static Quat_GetRotationAxis(Q: Quat): Vector;
	static Quat_GetAxisZ(Q: Quat): Vector;
	static Quat_GetAxisY(Q: Quat): Vector;
	static Quat_GetAxisX(Q: Quat): Vector;
	static Quat_GetAngle(Q: Quat): number;
	static Quat_Exp(Q: Quat): Quat;
	static Quat_Euler(Q: Quat): Vector;
	static Quat_EnforceShortestArcWith(A?: Quat,B?: Quat): {A: Quat};
	static Quat_AngularDistance(A: Quat,B: Quat): number;
	static ProjectVectorOnToVector(V: Vector,Target: Vector): Vector;
	static ProjectVectorOnToPlane(V: Vector,PlaneNormal: Vector): Vector;
	static ProjectPointOnToPlane(Point: Vector,PlaneBase: Vector,PlaneNormal: Vector): Vector;
	static PointsAreCoplanar(Points: Vector[],Tolerance: number): boolean;
	static PerlinNoise1D(Value: number): number;
	static Percent_IntInt(A: number,B: number): number;
	static Percent_FloatFloat(A: number,B: number): number;
	static Percent_ByteByte(A: number,B: number): number;
	static Or_IntInt(A: number,B: number): number;
	static Or_Int64Int64(A: any,B: any): any;
	static Now(): DateTime;
	static NotEqualExactly_VectorVector(A: Vector,B: Vector): boolean;
	static NotEqualExactly_Vector4Vector4(A: Vector4,B: Vector4): boolean;
	static NotEqualExactly_Vector2DVector2D(A: Vector2D,B: Vector2D): boolean;
	static NotEqual_VectorVector(A: Vector,B: Vector,ErrorTolerance: number): boolean;
	static NotEqual_Vector4Vector4(A: Vector4,B: Vector4,ErrorTolerance: number): boolean;
	static NotEqual_Vector2DVector2D(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
	static NotEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static NotEqual_RotatorRotator(A: Rotator,B: Rotator,ErrorTolerance: number): boolean;
	static NotEqual_QuatQuat(A: Quat,B: Quat,ErrorTolerance: number): boolean;
	static NotEqual_ObjectObject(A: UObject,B: UObject): boolean;
	static NotEqual_NameName(A: string,B: string): boolean;
	static NotEqual_MatrixMatrix(A: Matrix,B: Matrix,Tolerance: number): boolean;
	static NotEqual_LinearColorLinearColor(A: LinearColor,B: LinearColor): boolean;
	static NotEqual_IntPointIntPoint(A: IntPoint,B: IntPoint): boolean;
	static NotEqual_IntInt(A: number,B: number): boolean;
	static NotEqual_Int64Int64(A: any,B: any): boolean;
	static NotEqual_FloatFloat(A: number,B: number): boolean;
	static NotEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static NotEqual_ClassClass(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
	static NotEqual_ByteByte(A: number,B: number): boolean;
	static NotEqual_BoolBool(A: boolean,B: boolean): boolean;
	static Not_PreBool(A: boolean): boolean;
	static Not_Int64(A: any): any;
	static Not_Int(A: number): number;
	static NormalSafe2D(A: Vector2D,Tolerance: number): Vector2D;
	static NormalizeToRange(Value: number,RangeMin: number,RangeMax: number): number;
	static NormalizedDeltaRotator(A: Rotator,B: Rotator): Rotator;
	static NormalizeAxis(Angle: number): number;
	static Normalize2D(A?: Vector2D,Tolerance?: number): {A: Vector2D};
	static Normal2D(A: Vector2D): Vector2D;
	static Normal(A: Vector,Tolerance: number): Vector;
	static NegateVector(A: Vector): Vector;
	static NegateRotator(A: Rotator): Rotator;
	static Negated2D(A: Vector2D): Vector2D;
	static NearlyEqual_TransformTransform(A: Transform,B: Transform,LocationTolerance: number,RotationTolerance: number,Scale3DTolerance: number): boolean;
	static NearlyEqual_FloatFloat(A: number,B: number,ErrorTolerance: number): boolean;
	static MultiplyMultiply_FloatFloat(Base: number,Exp: number): number;
	static MultiplyByPi(Value: number): number;
	static Multiply_VectorVector(A: Vector,B: Vector): Vector;
	static Multiply_VectorInt(A: Vector,B: number): Vector;
	static Multiply_VectorFloat(A: Vector,B: number): Vector;
	static Multiply_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
	static Multiply_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Multiply_Vector2DFloat(A: Vector2D,B: number): Vector2D;
	static Multiply_TimespanFloat(A: Timespan,Scalar: number): Timespan;
	static Multiply_RotatorInt(A: Rotator,B: number): Rotator;
	static Multiply_RotatorFloat(A: Rotator,B: number): Rotator;
	static Multiply_QuatQuat(A: Quat,B: Quat): Quat;
	static Multiply_MatrixMatrix(A: Matrix,B: Matrix): Matrix;
	static Multiply_MatrixFloat(A: Matrix,B: number): Matrix;
	static Multiply_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
	static Multiply_LinearColorFloat(A: LinearColor,B: number): LinearColor;
	static Multiply_IntPointIntPoint(A: IntPoint,B: IntPoint): IntPoint;
	static Multiply_IntPointInt(A: IntPoint,B: number): IntPoint;
	static Multiply_IntInt(A: number,B: number): number;
	static Multiply_IntFloat(A: number,B: number): number;
	static Multiply_Int64Int64(A: any,B: any): any;
	static Multiply_FloatFloat(A: number,B: number): number;
	static Multiply_ByteByte(A: number,B: number): number;
	static MirrorVectorByNormal(InVect: Vector,InNormal: Vector): Vector;
	static MinOfIntArray(IntArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
	static MinOfFloatArray(FloatArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
	static MinOfByteArray(ByteArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
	static MinInt64(A: any,B: any): any;
	static MinimumAreaRectangle(WorldContextObject: UObject,InVerts: Vector[],SampleSurfaceNormal: Vector,OutRectCenter?: Vector,OutRectRotation?: Rotator,OutSideLengthX?: number,OutSideLengthY?: number,bDebugDraw?: boolean): {OutRectCenter: Vector, OutRectRotation: Rotator, OutSideLengthX: number, OutSideLengthY: number};
	static Min(A: number,B: number): number;
	static MaxOfIntArray(IntArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
	static MaxOfFloatArray(FloatArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
	static MaxOfByteArray(ByteArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
	static MaxInt64(A: any,B: any): any;
	static Max(A: number,B: number): number;
	static Matrix_TransformVector4(M: Matrix,V: Vector4): Vector4;
	static Matrix_TransformVector(M: Matrix,V: Vector): Vector4;
	static Matrix_TransformPosition(M: Matrix,V: Vector): Vector4;
	static Matrix_ToQuat(M: Matrix): Quat;
	static Matrix_SetOrigin(M?: Matrix,NewOrigin?: Vector): {M: Matrix};
	static Matrix_SetColumn(M?: Matrix,Column?: EMatrixColumns,Value?: Vector): {M: Matrix};
	static Matrix_SetAxis(M?: Matrix,Axis?: EAxis,AxisVector?: Vector): {M: Matrix};
	static Matrix_ScaleTranslation(M: Matrix,Scale3D: Vector): Matrix;
	static Matrix_RemoveTranslation(M: Matrix): Matrix;
	static Matrix_RemoveScaling(M?: Matrix,Tolerance?: number): {M: Matrix};
	static Matrix_Mirror(M: Matrix,MirrorAxis: EAxis,FlipAxis: EAxis): Matrix;
	static Matrix_InverseTransformVector(M: Matrix,V: Vector): Vector;
	static Matrix_InverseTransformPosition(M: Matrix,V: Vector): Vector;
	static Matrix_Identity(): Matrix;
	static Matrix_GetUnitAxis(M: Matrix,Axis: EAxis): Vector;
	static Matrix_GetUnitAxes(M: Matrix,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
	static Matrix_GetTransposed(M: Matrix): Matrix;
	static Matrix_GetTransposeAdjoint(M: Matrix): Matrix;
	static Matrix_GetScaleVector(M: Matrix,Tolerance: number): Vector;
	static Matrix_GetScaledAxis(M: Matrix,Axis: EAxis): Vector;
	static Matrix_GetScaledAxes(M: Matrix,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
	static Matrix_GetRotDeterminant(M: Matrix): number;
	static Matrix_GetRotator(M: Matrix): Rotator;
	static Matrix_GetOrigin(InMatrix: Matrix): Vector;
	static Matrix_GetMaximumAxisScale(M: Matrix): number;
	static Matrix_GetMatrixWithoutScale(M: Matrix,Tolerance: number): Matrix;
	static Matrix_GetInverse(M: Matrix): Matrix;
	static Matrix_GetFrustumTopPlane(M: Matrix,OutPlane?: Plane): {OutPlane: Plane, $: boolean};
	static Matrix_GetFrustumRightPlane(M: Matrix,OutPlane?: Plane): {OutPlane: Plane, $: boolean};
	static Matrix_GetFrustumNearPlane(M: Matrix,OutPlane?: Plane): {OutPlane: Plane, $: boolean};
	static Matrix_GetFrustumLeftPlane(M: Matrix,OutPlane?: Plane): {OutPlane: Plane, $: boolean};
	static Matrix_GetFrustumFarPlane(M: Matrix,OutPlane?: Plane): {OutPlane: Plane, $: boolean};
	static Matrix_GetFrustumBottomPlane(M: Matrix,OutPlane?: Plane): {OutPlane: Plane, $: boolean};
	static Matrix_GetDeterminant(M: Matrix): number;
	static Matrix_GetColumn(M: Matrix,Column: EMatrixColumns): Vector;
	static Matrix_ContainsNaN(M: Matrix): boolean;
	static Matrix_ConcatenateTranslation(M: Matrix,Translation: Vector): Matrix;
	static Matrix_ApplyScale(M: Matrix,Scale: number): Matrix;
	static MapRangeUnclamped(Value: number,InRangeA: number,InRangeB: number,OutRangeA: number,OutRangeB: number): number;
	static MapRangeClamped(Value: number,InRangeA: number,InRangeB: number,OutRangeA: number,OutRangeB: number): number;
	static MakeVector4(X: number,Y: number,Z: number,W: number): Vector4;
	static MakeVector2D(X: number,Y: number): Vector2D;
	static MakeVector(X: number,Y: number,Z: number): Vector;
	static MakeTransform(Location: Vector,Rotation: Rotator,Scale: Vector): Transform;
	static MakeTimespan2(Days: number,Hours: number,Minutes: number,Seconds: number,FractionNano: number): Timespan;
	static MakeTimespan(Days: number,Hours: number,Minutes: number,Seconds: number,Milliseconds: number): Timespan;
	static MakeRotFromZY(Z: Vector,Y: Vector): Rotator;
	static MakeRotFromZX(Z: Vector,X: Vector): Rotator;
	static MakeRotFromZ(Z: Vector): Rotator;
	static MakeRotFromYZ(Y: Vector,Z: Vector): Rotator;
	static MakeRotFromYX(Y: Vector,X: Vector): Rotator;
	static MakeRotFromY(Y: Vector): Rotator;
	static MakeRotFromXZ(X: Vector,Z: Vector): Rotator;
	static MakeRotFromXY(X: Vector,Y: Vector): Rotator;
	static MakeRotFromX(X: Vector): Rotator;
	static MakeRotator(Roll: number,Pitch: number,Yaw: number): Rotator;
	static MakeRotationFromAxes(Forward: Vector,Right: Vector,Up: Vector): Rotator;
	static MakeRelativeTransform(A: Transform,RelativeTo: Transform): Transform;
	static MakeRandomStream(InitialSeed: number): RandomStream;
	static MakeQualifiedFrameTime(Frame: FrameNumber,FrameRate: FrameRate,SubFrame: number): QualifiedFrameTime;
	static MakePulsatingValue(InCurrentTime: number,InPulsesPerSecond: number,InPhase: number): number;
	static MakePlaneFromPointAndNormal(Point: Vector,Normal: Vector): Plane;
	static MakeFrameRate(Numerator: number,Denominator: number): FrameRate;
	static MakeDateTime(Year: number,Month: number,Day: number,Hour: number,Minute: number,Second: number,Millisecond: number): DateTime;
	static MakeColor(R: number,G: number,B: number,A: number): LinearColor;
	static MakeBox2D(Min: Vector2D,Max: Vector2D): Box2D;
	static MakeBox(Min: Vector,Max: Vector): Box;
	static Loge(A: number): number;
	static Log(A: number,Base: number): number;
	static LinePlaneIntersection_OriginNormal(LineStart: Vector,LineEnd: Vector,PlaneOrigin: Vector,PlaneNormal: Vector,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
	static LinePlaneIntersection(LineStart: Vector,LineEnd: Vector,APlane: Plane,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
	static LinearColorLerpUsingHSV(A: LinearColor,B: LinearColor,Alpha: number): LinearColor;
	static LinearColorLerp(A: LinearColor,B: LinearColor,Alpha: number): LinearColor;
	static LinearColor_Yellow(): LinearColor;
	static LinearColor_White(): LinearColor;
	static LinearColor_Transparent(): LinearColor;
	static LinearColor_ToRGBE(InLinearColor: LinearColor): Color;
	static LinearColor_ToNewOpacity(InColor: LinearColor,InOpacity: number): LinearColor;
	static LinearColor_SetTemperature(InOutColor?: LinearColor,InTemperature?: number): {InOutColor: LinearColor};
	static LinearColor_SetRGBA(InOutColor?: LinearColor,R?: number,G?: number,B?: number,A?: number): {InOutColor: LinearColor};
	static LinearColor_SetRandomHue(InOutColor?: LinearColor): {InOutColor: LinearColor};
	static LinearColor_SetFromSRGB(InOutColor?: LinearColor,InSRGB?: Color): {InOutColor: LinearColor};
	static LinearColor_SetFromPow22(InOutColor?: LinearColor,InColor?: Color): {InOutColor: LinearColor};
	static LinearColor_SetFromHSV(InOutColor?: LinearColor,H?: number,S?: number,V?: number,A?: number): {InOutColor: LinearColor};
	static LinearColor_Set(InOutColor?: LinearColor,InColor?: LinearColor): {InOutColor: LinearColor};
	static LinearColor_Red(): LinearColor;
	static LinearColor_QuantizeRound(InColor: LinearColor): Color;
	static LinearColor_Quantize(InColor: LinearColor): Color;
	static LinearColor_IsNearEqual(A: LinearColor,B: LinearColor,Tolerance: number): boolean;
	static LinearColor_Green(): LinearColor;
	static LinearColor_Gray(): LinearColor;
	static LinearColor_GetMin(InColor: LinearColor): number;
	static LinearColor_GetMax(InColor: LinearColor): number;
	static LinearColor_GetLuminance(InColor: LinearColor): number;
	static LinearColor_Distance(C1: LinearColor,C2: LinearColor): number;
	static LinearColor_Desaturated(InColor: LinearColor,InDesaturation: number): LinearColor;
	static LinearColor_Blue(): LinearColor;
	static LinearColor_Black(): LinearColor;
	static LessLess_VectorRotator(A: Vector,B: Rotator): Vector;
	static LessEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static LessEqual_IntInt(A: number,B: number): boolean;
	static LessEqual_Int64Int64(A: any,B: any): boolean;
	static LessEqual_FloatFloat(A: number,B: number): boolean;
	static LessEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static LessEqual_ByteByte(A: number,B: number): boolean;
	static Less_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static Less_IntInt(A: number,B: number): boolean;
	static Less_Int64Int64(A: any,B: any): boolean;
	static Less_FloatFloat(A: number,B: number): boolean;
	static Less_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static Less_ByteByte(A: number,B: number): boolean;
	static Lerp(A: number,B: number,Alpha: number): number;
	static IsZero2D(A: Vector2D): boolean;
	static IsPointInBoxWithTransform(Point: Vector,BoxWorldTransform: Transform,BoxExtent: Vector): boolean;
	static IsPointInBox(Point: Vector,BoxOrigin: Vector,BoxExtent: Vector): boolean;
	static IsNearlyZero2D(A: Vector2D,Tolerance: number): boolean;
	static IsMorning(A: DateTime): boolean;
	static IsLeapYear(Year: number): boolean;
	static IsAfternoon(A: DateTime): boolean;
	static InvertTransform(T: Transform): Transform;
	static InverseTransformRotation(T: Transform,Rotation: Rotator): Rotator;
	static InverseTransformLocation(T: Transform,Location: Vector): Vector;
	static InverseTransformDirection(T: Transform,Direction: Vector): Vector;
	static IntPoint_Zero(): IntPoint;
	static IntPoint_Up(): IntPoint;
	static IntPoint_Right(): IntPoint;
	static IntPoint_One(): IntPoint;
	static IntPoint_Left(): IntPoint;
	static IntPoint_Down(): IntPoint;
	static InRange_IntInt(Value: number,Min: number,Max: number,InclusiveMin: boolean,InclusiveMax: boolean): boolean;
	static InRange_Int64Int64(Value: any,Min: any,Max: any,InclusiveMin: boolean,InclusiveMax: boolean): boolean;
	static InRange_FloatFloat(Value: number,Min: number,Max: number,InclusiveMin: boolean,InclusiveMax: boolean): boolean;
	static Hypotenuse(Width: number,Height: number): number;
	static HSVToRGBLinear(HSV: LinearColor): LinearColor;
	static HSVToRGB_Vector(HSV: LinearColor,RGB?: LinearColor): {RGB: LinearColor};
	static HSVToRGB(H: number,S: number,V: number,A: number): LinearColor;
	static GridSnap_Float(Location: number,GridSize: number): number;
	static GreaterGreater_VectorRotator(A: Vector,B: Rotator): Vector;
	static GreaterEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static GreaterEqual_IntInt(A: number,B: number): boolean;
	static GreaterEqual_Int64Int64(A: any,B: any): boolean;
	static GreaterEqual_FloatFloat(A: number,B: number): boolean;
	static GreaterEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static GreaterEqual_ByteByte(A: number,B: number): boolean;
	static Greater_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static Greater_IntInt(A: number,B: number): boolean;
	static Greater_Int64Int64(A: any,B: any): boolean;
	static Greater_FloatFloat(A: number,B: number): boolean;
	static Greater_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static Greater_ByteByte(A: number,B: number): boolean;
	static GetYear(A: DateTime): number;
	static GetYawPitchFromVector(InVec: Vector,Yaw?: number,Pitch?: number): {Yaw: number, Pitch: number};
	static GetVectorArrayAverage(Vectors: Vector[]): Vector;
	static GetUpVector(InRot: Rotator): Vector;
	static GetTotalSeconds(A: Timespan): number;
	static GetTotalMinutes(A: Timespan): number;
	static GetTotalMilliseconds(A: Timespan): number;
	static GetTotalHours(A: Timespan): number;
	static GetTotalDays(A: Timespan): number;
	static GetTimeOfDay(A: DateTime): Timespan;
	static GetTAU(): number;
	static GetSlopeDegreeAngles(MyRightYAxis: Vector,FloorNormal: Vector,UpVector: Vector,OutSlopePitchDegreeAngle?: number,OutSlopeRollDegreeAngle?: number): {OutSlopePitchDegreeAngle: number, OutSlopeRollDegreeAngle: number};
	static GetSeconds(A: Timespan): number;
	static GetSecond(A: DateTime): number;
	static GetRotated2D(A: Vector2D,AngleDeg: number): Vector2D;
	static GetRightVector(InRot: Rotator): Vector;
	static GetReflectionVector(Direction: Vector,SurfaceNormal: Vector): Vector;
	static GetPointDistanceToSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): number;
	static GetPointDistanceToLine(Point: Vector,LineOrigin: Vector,LineDirection: Vector): number;
	static GetPI(): number;
	static GetMonth(A: DateTime): number;
	static GetMinutes(A: Timespan): number;
	static GetMinute(A: DateTime): number;
	static GetMinElement(A: Vector): number;
	static GetMin2D(A: Vector2D): number;
	static GetMilliseconds(A: Timespan): number;
	static GetMillisecond(A: DateTime): number;
	static GetMaxElement(A: Vector): number;
	static GetMax2D(A: Vector2D): number;
	static GetHours(A: Timespan): number;
	static GetHour12(A: DateTime): number;
	static GetHour(A: DateTime): number;
	static GetForwardVector(InRot: Rotator): Vector;
	static GetDuration(A: Timespan): Timespan;
	static GetDirectionUnitVector(From: Vector,To: Vector): Vector;
	static GetDays(A: Timespan): number;
	static GetDayOfYear(A: DateTime): number;
	static GetDay(A: DateTime): number;
	static GetDate(A: DateTime): DateTime;
	static GetAzimuthAndElevation(InDirection: Vector,ReferenceFrame: Transform,Azimuth?: number,Elevation?: number): {Azimuth: number, Elevation: number};
	static GetAxes(A: Rotator,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
	static GetAbsMax2D(A: Vector2D): number;
	static GetAbs2D(A: Vector2D): Vector2D;
	static FWrap(Value: number,Min: number,Max: number): number;
	static FTruncVector(InVector: Vector): IntVector;
	static FTrunc64(A: number): any;
	static FTrunc(A: number): number;
	static FromSeconds(Seconds: number): Timespan;
	static FromMinutes(Minutes: number): Timespan;
	static FromMilliseconds(Milliseconds: number): Timespan;
	static FromHours(Hours: number): Timespan;
	static FromDays(Days: number): Timespan;
	static Fraction(A: number): number;
	static FMod(Dividend: number,Divisor: number,Remainder?: number): {Remainder: number, $: number};
	static FMin(A: number,B: number): number;
	static FMax(A: number,B: number): number;
	static FloatSpringInterp(Current: number,Target: number,SpringState?: FloatSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number): {SpringState: FloatSpringState, $: number};
	static FixedTurn(InCurrent: number,InDesired: number,InDeltaRate: number): number;
	static FInterpTo_Constant(Current: number,Target: number,DeltaTime: number,InterpSpeed: number): number;
	static FInterpTo(Current: number,Target: number,DeltaTime: number,InterpSpeed: number): number;
	static FInterpEaseInOut(A: number,B: number,Alpha: number,Exponent: number): number;
	static FindNearestPointsOnLineSegments(Segment1Start: Vector,Segment1End: Vector,Segment2Start: Vector,Segment2End: Vector,Segment1Point?: Vector,Segment2Point?: Vector): {Segment1Point: Vector, Segment2Point: Vector};
	static FindLookAtRotation(Start: Vector,Target: Vector): Rotator;
	static FindClosestPointOnSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): Vector;
	static FindClosestPointOnLine(Point: Vector,LineOrigin: Vector,LineDirection: Vector): Vector;
	static FFloor64(A: number): any;
	static FFloor(A: number): number;
	static FClamp(Value: number,Min: number,Max: number): number;
	static FCeil64(A: number): any;
	static FCeil(A: number): number;
	static Exp(A: number): number;
	static EqualExactly_VectorVector(A: Vector,B: Vector): boolean;
	static EqualExactly_Vector4Vector4(A: Vector4,B: Vector4): boolean;
	static EqualExactly_Vector2DVector2D(A: Vector2D,B: Vector2D): boolean;
	static EqualEqual_VectorVector(A: Vector,B: Vector,ErrorTolerance: number): boolean;
	static EqualEqual_Vector4Vector4(A: Vector4,B: Vector4,ErrorTolerance: number): boolean;
	static EqualEqual_Vector2DVector2D(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
	static EqualEqual_TransformTransform(A: Transform,B: Transform): boolean;
	static EqualEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static EqualEqual_RotatorRotator(A: Rotator,B: Rotator,ErrorTolerance: number): boolean;
	static EqualEqual_QuatQuat(A: Quat,B: Quat,Tolerance: number): boolean;
	static EqualEqual_ObjectObject(A: UObject,B: UObject): boolean;
	static EqualEqual_NameName(A: string,B: string): boolean;
	static EqualEqual_MatrixMatrix(A: Matrix,B: Matrix,Tolerance: number): boolean;
	static EqualEqual_LinearColorLinearColor(A: LinearColor,B: LinearColor): boolean;
	static EqualEqual_IntInt(A: number,B: number): boolean;
	static EqualEqual_Int64Int64(A: any,B: any): boolean;
	static EqualEqual_FloatFloat(A: number,B: number): boolean;
	static EqualEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static EqualEqual_ClassClass(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
	static EqualEqual_ByteByte(A: number,B: number): boolean;
	static EqualEqual_BoolBool(A: boolean,B: boolean): boolean;
	static Equal_IntPointIntPoint(A: IntPoint,B: IntPoint): boolean;
	static Ease(A: number,B: number,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): number;
	static DynamicWeightedMovingAverage_FVector(CurrentSample: Vector,PreviousSample: Vector,MaxDistance: number,MinWeight: number,MaxWeight: number): Vector;
	static DynamicWeightedMovingAverage_FRotator(CurrentSample: Rotator,PreviousSample: Rotator,MaxDistance: number,MinWeight: number,MaxWeight: number): Rotator;
	static DynamicWeightedMovingAverage_Float(CurrentSample: number,PreviousSample: number,MaxDistance: number,MinWeight: number,MaxWeight: number): number;
	static DotProduct2D(A: Vector2D,B: Vector2D): number;
	static Dot_VectorVector(A: Vector,B: Vector): number;
	static Divide_VectorVector(A: Vector,B: Vector): Vector;
	static Divide_VectorInt(A: Vector,B: number): Vector;
	static Divide_VectorFloat(A: Vector,B: number): Vector;
	static Divide_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
	static Divide_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Divide_Vector2DFloat(A: Vector2D,B: number): Vector2D;
	static Divide_TimespanFloat(A: Timespan,Scalar: number): Timespan;
	static Divide_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
	static Divide_IntPointIntPoint(A: IntPoint,B: IntPoint): IntPoint;
	static Divide_IntPointInt(A: IntPoint,B: number): IntPoint;
	static Divide_IntInt(A: number,B: number): number;
	static Divide_Int64Int64(A: any,B: any): any;
	static Divide_FloatFloat(A: number,B: number): number;
	static Divide_ByteByte(A: number,B: number): number;
	static DistanceSquared2D(v1: Vector2D,v2: Vector2D): number;
	static Distance2D(v1: Vector2D,v2: Vector2D): number;
	static DegTan(A: number): number;
	static DegSin(A: number): number;
	static DegreesToRadians(A: number): number;
	static DegCos(A: number): number;
	static DegAtan2(Y: number,X: number): number;
	static DegAtan(A: number): number;
	static DegAsin(A: number): number;
	static DegAcos(A: number): number;
	static DaysInYear(Year: number): number;
	static DaysInMonth(Year: number,Month: number): number;
	static DateTimeMinValue(): DateTime;
	static DateTimeMaxValue(): DateTime;
	static DateTimeFromString(DateTimeString: string,Result?: DateTime): {Result: DateTime, $: boolean};
	static DateTimeFromIsoString(IsoString: string,Result?: DateTime): {Result: DateTime, $: boolean};
	static CrossProduct2D(A: Vector2D,B: Vector2D): number;
	static Cross_VectorVector(A: Vector,B: Vector): Vector;
	static CreateVectorFromYawPitch(Yaw: number,Pitch: number,Length: number): Vector;
	static Cos(A: number): number;
	static ConvertTransformToRelative(Transform: Transform,ParentTransform: Transform): Transform;
	static Conv_VectorToVector2D(InVector: Vector): Vector2D;
	static Conv_VectorToTransform(InLocation: Vector): Transform;
	static Conv_VectorToRotator(InVec: Vector): Rotator;
	static Conv_VectorToQuaternion(InVec: Vector): Quat;
	static Conv_VectorToLinearColor(InVec: Vector): LinearColor;
	static Conv_Vector4ToVector(InVector4: Vector4): Vector;
	static Conv_Vector4ToRotator(InVec: Vector4): Rotator;
	static Conv_Vector4ToQuaternion(InVec: Vector4): Quat;
	static Conv_Vector2DToVector(InVector2D: Vector2D,Z: number): Vector;
	static Conv_Vector2DToIntPoint(InVector2D: Vector2D): IntPoint;
	static Conv_TransformToMatrix(Transform: Transform): Matrix;
	static Conv_RotatorToVector(InRot: Rotator): Vector;
	static Conv_RotatorToTransform(InRotator: Rotator): Transform;
	static Conv_MatrixToTransform(InMatrix: Matrix): Transform;
	static Conv_MatrixToRotator(InMatrix: Matrix): Rotator;
	static Conv_LinearColorToVector(InLinearColor: LinearColor): Vector;
	static Conv_LinearColorToColor(InLinearColor: LinearColor,InUseSRGB: boolean): Color;
	static Conv_IntVectorToVector(InIntVector: IntVector): Vector;
	static Conv_IntToIntVector(inInt: number): IntVector;
	static Conv_IntToInt64(inInt: number): any;
	static Conv_IntToFloat(inInt: number): number;
	static Conv_IntToByte(inInt: number): number;
	static Conv_IntToBool(inInt: number): boolean;
	static Conv_IntPointToVector2D(InIntPoint: IntPoint): Vector2D;
	static Conv_Int64ToInt(inInt: any): number;
	static Conv_Int64ToByte(inInt: any): number;
	static Conv_FloatToVector(InFloat: number): Vector;
	static Conv_FloatToLinearColor(InFloat: number): LinearColor;
	static Conv_ColorToLinearColor(InColor: Color): LinearColor;
	static Conv_ByteToInt(InByte: number): number;
	static Conv_ByteToFloat(InByte: number): number;
	static Conv_BoolToInt(InBool: boolean): number;
	static Conv_BoolToFloat(InBool: boolean): number;
	static Conv_BoolToByte(InBool: boolean): number;
	static ComposeTransforms(A: Transform,B: Transform): Transform;
	static ComposeRotators(A: Rotator,B: Rotator): Rotator;
	static ClassIsChildOf(TestClass: UnrealEngineClass,ParentClass: UnrealEngineClass): boolean;
	static ClampVectorSize(A: Vector,Min: number,Max: number): Vector;
	static ClampInt64(Value: any,Min: any,Max: any): any;
	static ClampAxis(Angle: number): number;
	static ClampAxes2D(A: Vector2D,MinAxisVal: number,MaxAxisVal: number): Vector2D;
	static ClampAngle(AngleDegrees: number,MinAngleDegrees: number,MaxAngleDegrees: number): number;
	static Clamp(Value: number,Min: number,Max: number): number;
	static CInterpTo(Current: LinearColor,Target: LinearColor,DeltaTime: number,InterpSpeed: number): LinearColor;
	static BreakVector4(InVec: Vector4,X?: number,Y?: number,Z?: number,W?: number): {X: number, Y: number, Z: number, W: number};
	static BreakVector2D(InVec: Vector2D,X?: number,Y?: number): {X: number, Y: number};
	static BreakVector(InVec: Vector,X?: number,Y?: number,Z?: number): {X: number, Y: number, Z: number};
	static BreakTransform(InTransform: Transform,Location?: Vector,Rotation?: Rotator,Scale?: Vector): {Location: Vector, Rotation: Rotator, Scale: Vector};
	static BreakTimespan2(InTimespan: Timespan,Days?: number,Hours?: number,Minutes?: number,Seconds?: number,FractionNano?: number): {Days: number, Hours: number, Minutes: number, Seconds: number, FractionNano: number};
	static BreakTimespan(InTimespan: Timespan,Days?: number,Hours?: number,Minutes?: number,Seconds?: number,Milliseconds?: number): {Days: number, Hours: number, Minutes: number, Seconds: number, Milliseconds: number};
	static BreakRotIntoAxes(InRot: Rotator,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
	static BreakRotator(InRot: Rotator,Roll?: number,Pitch?: number,Yaw?: number): {Roll: number, Pitch: number, Yaw: number};
	static BreakRandomStream(InRandomStream: RandomStream,InitialSeed?: number): {InitialSeed: number};
	static BreakQualifiedFrameTime(InFrameTime: QualifiedFrameTime,Frame?: FrameNumber,FrameRate?: FrameRate,SubFrame?: number): {Frame: FrameNumber, FrameRate: FrameRate, SubFrame: number};
	static BreakFrameRate(InFrameRate: FrameRate,Numerator?: number,Denominator?: number): {Numerator: number, Denominator: number};
	static BreakDateTime(InDateTime: DateTime,Year?: number,Month?: number,Day?: number,Hour?: number,Minute?: number,Second?: number,Millisecond?: number): {Year: number, Month: number, Day: number, Hour: number, Minute: number, Second: number, Millisecond: number};
	static BreakColor(InColor: LinearColor,R?: number,G?: number,B?: number,A?: number): {R: number, G: number, B: number, A: number};
	static BooleanXOR(A: boolean,B: boolean): boolean;
	static BooleanOR(A: boolean,B: boolean): boolean;
	static BooleanNOR(A: boolean,B: boolean): boolean;
	static BooleanNAND(A: boolean,B: boolean): boolean;
	static BooleanAND(A: boolean,B: boolean): boolean;
	static BMin(A: number,B: number): number;
	static BMax(A: number,B: number): number;
	static Atan2(Y: number,X: number): number;
	static Atan(A: number): number;
	static Asin(A: number): number;
	static And_IntInt(A: number,B: number): number;
	static And_Int64Int64(A: any,B: any): any;
	static Add_VectorVector(A: Vector,B: Vector): Vector;
	static Add_VectorInt(A: Vector,B: number): Vector;
	static Add_VectorFloat(A: Vector,B: number): Vector;
	static Add_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
	static Add_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Add_Vector2DFloat(A: Vector2D,B: number): Vector2D;
	static Add_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
	static Add_QuatQuat(A: Quat,B: Quat): Quat;
	static Add_MatrixMatrix(A: Matrix,B: Matrix): Matrix;
	static Add_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
	static Add_IntPointIntPoint(A: IntPoint,B: IntPoint): IntPoint;
	static Add_IntPointInt(A: IntPoint,B: number): IntPoint;
	static Add_IntInt(A: number,B: number): number;
	static Add_Int64Int64(A: any,B: any): any;
	static Add_FloatFloat(A: number,B: number): number;
	static Add_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static Add_DateTimeDateTime(A: DateTime,B: DateTime): DateTime;
	static Add_ByteByte(A: number,B: number): number;
	static Acos(A: number): number;
	static Abs_Int64(A: any): any;
	static Abs_Int(A: number): number;
	static Abs(A: number): number;
	static C(Other: UObject | any): KismetMathLibrary;
}

declare class KismetNodeHelperLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetNodeHelperLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetNodeHelperLibrary;
	static GetDefaultObject(): KismetNodeHelperLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetNodeHelperLibrary;
	static MarkBit(Data?: number,index?: number): {Data: number};
	static HasUnmarkedBit(Data: number,NumBits: number): boolean;
	static HasMarkedBit(Data: number,NumBits: number): boolean;
	static GetValidValue(Enum: Enum,EnumeratorValue: number): number;
	static GetUnmarkedBit(Data: number,StartIdx: number,NumBits: number,bRandom: boolean): number;
	static GetRandomUnmarkedBit(Data: number,StartIdx: number,NumBits: number): number;
	static GetFirstUnmarkedBit(Data: number,StartIdx: number,NumBits: number): number;
	static GetEnumeratorValueFromIndex(Enum: Enum,EnumeratorIndex: number): number;
	static GetEnumeratorUserFriendlyName(Enum: Enum,EnumeratorValue: number): string;
	static GetEnumeratorName(Enum: Enum,EnumeratorValue: number): string;
	static ClearBit(Data?: number,index?: number): {Data: number};
	static ClearAllBits(Data?: number): {Data: number};
	static BitIsMarked(Data: number,index: number): boolean;
	static C(Other: UObject | any): KismetNodeHelperLibrary;
}

declare class KismetRenderingLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetRenderingLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetRenderingLibrary;
	static GetDefaultObject(): KismetRenderingLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetRenderingLibrary;
	static SetCastInsetShadowForAllAttachments(PrimitiveComponent: PrimitiveComponent,bCastInsetShadow: boolean,bLightAttachmentsAsGroup: boolean): void;
	static RenderTargetCreateStaticTexture2DEditorOnly(RenderTarget: TextureRenderTarget2D,Name: string,CompressionSettings: TextureCompressionSettings,MipSettings: TextureMipGenSettings): Texture2D;
	static ReleaseRenderTarget2D(TextureRenderTarget: TextureRenderTarget2D): void;
	static ReadRenderTargetUV(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,U: number,V: number): Color;
	static ReadRenderTargetRawUV(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,U: number,V: number): LinearColor;
	static ReadRenderTargetRawPixel(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,X: number,Y: number): LinearColor;
	static ReadRenderTargetPixel(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,X: number,Y: number): Color;
	static MakeSkinWeightInfo(Bone0: number,Weight0: number,Bone1: number,Weight1: number,Bone2: number,Weight2: number,Bone3: number,Weight3: number): SkelMeshSkinWeightInfo;
	static ImportFileAsTexture2D(WorldContextObject: UObject,Filename: string): Texture2D;
	static ImportBufferAsTexture2D(WorldContextObject: UObject,Buffer: number[]): Texture2D;
	static ExportTexture2D(WorldContextObject: UObject,Texture: Texture2D,FilePath: string,Filename: string): void;
	static ExportRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,FilePath: string,Filename: string): void;
	static EndDrawCanvasToRenderTarget(WorldContextObject: UObject,Context: DrawToRenderTargetContext): void;
	static DrawMaterialToRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,Material: MaterialInterface): void;
	static CreateRenderTargetVolume(WorldContextObject: UObject,Width: number,Height: number,Depth: number,Format: ETextureRenderTargetFormat,ClearColor: LinearColor,bAutoGenerateMipMaps: boolean): TextureRenderTargetVolume;
	static CreateRenderTarget2DArray(WorldContextObject: UObject,Width: number,Height: number,Slices: number,Format: ETextureRenderTargetFormat,ClearColor: LinearColor,bAutoGenerateMipMaps: boolean): TextureRenderTarget2DArray;
	static CreateRenderTarget2D(WorldContextObject: UObject,Width: number,Height: number,Format: ETextureRenderTargetFormat,ClearColor: LinearColor,bAutoGenerateMipMaps: boolean): TextureRenderTarget2D;
	static ConvertRenderTargetToTexture2DEditorOnly(WorldContextObject: UObject,RenderTarget: TextureRenderTarget2D,Texture: Texture2D): void;
	static ClearRenderTarget2D(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,ClearColor: LinearColor): void;
	static BreakSkinWeightInfo(InWeight: SkelMeshSkinWeightInfo,Bone0?: number,Weight0?: number,Bone1?: number,Weight1?: number,Bone2?: number,Weight2?: number,Bone3?: number,Weight3?: number): {Bone0: number, Weight0: number, Bone1: number, Weight1: number, Bone2: number, Weight2: number, Bone3: number, Weight3: number};
	static BeginDrawCanvasToRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,Canvas?: Canvas,Size?: Vector2D,Context?: DrawToRenderTargetContext): {Canvas: Canvas, Size: Vector2D, Context: DrawToRenderTargetContext};
	static C(Other: UObject | any): KismetRenderingLibrary;
}

declare type ESearchCase = 'CaseSensitive' | 'IgnoreCase' | 'ESearchCase_MAX';
declare var ESearchCase : { CaseSensitive:'CaseSensitive',IgnoreCase:'IgnoreCase',ESearchCase_MAX:'ESearchCase_MAX', };
declare type ESearchDir = 'FromStart' | 'FromEnd' | 'ESearchDir_MAX';
declare var ESearchDir : { FromStart:'FromStart',FromEnd:'FromEnd',ESearchDir_MAX:'ESearchDir_MAX', };
declare class KismetStringLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetStringLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetStringLibrary;
	static GetDefaultObject(): KismetStringLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetStringLibrary;
	static TrimTrailing(SourceString: string): string;
	static Trim(SourceString: string): string;
	static ToUpper(SourceString: string): string;
	static ToLower(SourceString: string): string;
	static TimeSecondsToString(InSeconds: number): string;
	static StartsWith(SourceString: string,InPrefix: string,SearchCase: ESearchCase): boolean;
	static Split(SourceString: string,InStr: string,LeftS?: string,RightS?: string,SearchCase?: ESearchCase,SearchDir?: ESearchDir): {LeftS: string, RightS: string, $: boolean};
	static RightPad(SourceString: string,ChCount: number): string;
	static RightChop(SourceString: string,Count: number): string;
	static Right(SourceString: string,Count: number): string;
	static Reverse(SourceString: string): string;
	static ReplaceInline(SourceString?: string,SearchText?: string,ReplacementText?: string,SearchCase?: ESearchCase): {SourceString: string, $: number};
	static Replace(SourceString: string,From: string,To: string,SearchCase: ESearchCase): string;
	static ParseIntoArray(SourceString: string,Delimiter: string,CullEmptyStrings: boolean): string[];
	static NotEqual_StrStr(A: string,B: string): boolean;
	static NotEqual_StriStri(A: string,B: string): boolean;
	static Mid(SourceString: string,Start: number,Count: number): string;
	static MatchesWildcard(SourceString: string,wildcard: string,SearchCase: ESearchCase): boolean;
	static Len(S: string): number;
	static LeftPad(SourceString: string,ChCount: number): string;
	static LeftChop(SourceString: string,Count: number): string;
	static Left(SourceString: string,Count: number): string;
	static JoinStringArray(SourceArray: string[],Separator: string): string;
	static IsNumeric(SourceString: string): boolean;
	static IsEmpty(inString: string): boolean;
	static GetSubstring(SourceString: string,StartIndex: number,Length: number): string;
	static GetCharacterAsNumber(SourceString: string,index: number): number;
	static GetCharacterArrayFromString(SourceString: string): string[];
	static FindSubstring(SearchIn: string,Substring: string,bUseCase: boolean,bSearchFromEnd: boolean,StartPosition: number): number;
	static EqualEqual_StrStr(A: string,B: string): boolean;
	static EqualEqual_StriStri(A: string,B: string): boolean;
	static EndsWith(SourceString: string,InSuffix: string,SearchCase: ESearchCase): boolean;
	static CullArray(SourceString: string,inArray?: string[]): {inArray: string[], $: number};
	static Conv_VectorToString(InVec: Vector): string;
	static Conv_Vector2dToString(InVec: Vector2D): string;
	static Conv_TransformToString(InTrans: Transform): string;
	static Conv_StringToVector2D(inString: string,OutConvertedVector2D?: Vector2D,OutIsValid?: boolean): {OutConvertedVector2D: Vector2D, OutIsValid: boolean};
	static Conv_StringToVector(inString: string,OutConvertedVector?: Vector,OutIsValid?: boolean): {OutConvertedVector: Vector, OutIsValid: boolean};
	static Conv_StringToRotator(inString: string,OutConvertedRotator?: Rotator,OutIsValid?: boolean): {OutConvertedRotator: Rotator, OutIsValid: boolean};
	static Conv_StringToName(inString: string): string;
	static Conv_StringToInt(inString: string): number;
	static Conv_StringToFloat(inString: string): number;
	static Conv_StringToColor(inString: string,OutConvertedColor?: LinearColor,OutIsValid?: boolean): {OutConvertedColor: LinearColor, OutIsValid: boolean};
	static Conv_RotatorToString(InRot: Rotator): string;
	static Conv_ObjectToString(InObj: UObject): string;
	static Conv_NameToString(InName: string): string;
	static Conv_MatrixToString(InMatrix: Matrix): string;
	static Conv_IntVectorToString(InIntVec: IntVector): string;
	static Conv_IntToString(inInt: number): string;
	static Conv_IntPointToString(InIntPoint: IntPoint): string;
	static Conv_FloatToString(InFloat: number): string;
	static Conv_ColorToString(InColor: LinearColor): string;
	static Conv_ByteToString(InByte: number): string;
	static Conv_BoolToString(InBool: boolean): string;
	static Contains(SearchIn: string,Substring: string,bUseCase: boolean,bSearchFromEnd: boolean): boolean;
	static Concat_StrStr(A: string,B: string): string;
	static BuildString_Vector2d(AppendTo: string,Prefix: string,InVector2D: Vector2D,Suffix: string): string;
	static BuildString_Vector(AppendTo: string,Prefix: string,InVector: Vector,Suffix: string): string;
	static BuildString_Rotator(AppendTo: string,Prefix: string,InRot: Rotator,Suffix: string): string;
	static BuildString_Object(AppendTo: string,Prefix: string,InObj: UObject,Suffix: string): string;
	static BuildString_Name(AppendTo: string,Prefix: string,InName: string,Suffix: string): string;
	static BuildString_IntVector(AppendTo: string,Prefix: string,InIntVector: IntVector,Suffix: string): string;
	static BuildString_Int(AppendTo: string,Prefix: string,inInt: number,Suffix: string): string;
	static BuildString_Float(AppendTo: string,Prefix: string,InFloat: number,Suffix: string): string;
	static BuildString_Color(AppendTo: string,Prefix: string,InColor: LinearColor,Suffix: string): string;
	static BuildString_Bool(AppendTo: string,Prefix: string,InBool: boolean,Suffix: string): string;
	static C(Other: UObject | any): KismetStringLibrary;
}

declare class KismetStringTableLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetStringTableLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetStringTableLibrary;
	static GetDefaultObject(): KismetStringTableLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetStringTableLibrary;
	static IsRegisteredTableId(TableId: string): boolean;
	static IsRegisteredTableEntry(TableId: string,Key: string): boolean;
	static GetTableNamespace(TableId: string): string;
	static GetTableEntrySourceString(TableId: string,Key: string): string;
	static GetTableEntryMetaData(TableId: string,Key: string,MetaDataId: string): string;
	static GetRegisteredStringTables(): string[];
	static GetMetaDataIdsFromStringTableEntry(TableId: string,Key: string): string[];
	static GetKeysFromStringTable(TableId: string): string[];
	static C(Other: UObject | any): KismetStringTableLibrary;
}

declare class UserActivity { 
	ActionName: string;
	clone() : UserActivity;
	static C(Other: UObject | any): UserActivity;
	SetUserActivity(): void;
	static SetUserActivity(UserActivity: UserActivity): void;
}

declare class KismetSystemLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetSystemLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetSystemLibrary;
	static GetDefaultObject(): KismetSystemLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetSystemLibrary;
	static UnregisterForRemoteNotifications(): void;
	static UnloadPrimaryAssetList(PrimaryAssetIdList: PrimaryAssetId[]): void;
	static UnloadPrimaryAsset(PrimaryAssetId: PrimaryAssetId): void;
	static TransactObject(UObject: UObject): void;
	static StackTrace(): void;
	static SphereTraceSingleForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static SphereTraceSingleByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static SphereTraceSingle(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static SphereTraceMultiForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static SphereTraceMultiByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static SphereTraceMulti(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static SphereOverlapComponents(WorldContextObject: UObject,SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static SphereOverlapActors(WorldContextObject: UObject,SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static SnapshotObject(UObject: UObject): void;
	static ShowPlatformSpecificLeaderboardScreen(CategoryName: string): void;
	static ShowPlatformSpecificAchievementsScreen(SpecificPlayer: PlayerController): void;
	static ShowInterstitialAd(): void;
	static ShowAdBanner(AdIdIndex: number,bShowOnBottomOfScreen: boolean): void;
	static SetWindowTitle(Title: string): void;
	static SetVolumeButtonsHandledBySystem(bEnabled: boolean): void;
	static SetVectorPropertyByName(UObject: UObject,PropertyName: string,Value: Vector): void;
	static SetUserActivity(UserActivity: UserActivity): void;
	static SetTransformPropertyByName(UObject: UObject,PropertyName: string,Value: Transform): void;
	static SetTextPropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
	static SetSuppressViewportTransitionMessage(WorldContextObject: UObject,bState: boolean): void;
	static SetStructurePropertyByName(UObject: UObject,PropertyName: string,Value: GenericStruct): void;
	static SetStringPropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
	static SetSoftObjectPropertyByName(UObject: UObject,PropertyName: string,Value: UObject): void;
	static SetSoftClassPropertyByName(UObject: UObject,PropertyName: string,Value: Class): void;
	static SetRotatorPropertyByName(UObject: UObject,PropertyName: string,Value: Rotator): void;
	static SetObjectPropertyByName(UObject: UObject,PropertyName: string,Value: UObject): void;
	static SetNamePropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
	static SetLinearColorPropertyByName(UObject: UObject,PropertyName: string,Value: LinearColor): void;
	static SetIntPropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
	static SetInt64PropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
	static SetGamepadsBlockDeviceFeedback(bBlock: boolean): void;
	static SetFloatPropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
	static SetFieldPathPropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
	static SetEditorProperty(UObject: UObject,PropertyName: string,PropertyValue: number,ChangeNotifyMode: EPropertyAccessChangeNotifyMode): boolean;
	static SetColorPropertyByName(UObject: UObject,PropertyName: string,Value: Color): void;
	static SetCollisionProfileNameProperty(UObject: UObject,PropertyName: string,Value: CollisionProfileName): void;
	static SetClassPropertyByName(UObject: UObject,PropertyName: string,Value: UnrealEngineClass): void;
	static SetBytePropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
	static SetBoolPropertyByName(UObject: UObject,PropertyName: string,Value: boolean): void;
	static RetriggerableDelay(WorldContextObject: UObject,Duration: number,LatentInfo: LatentActionInfo): void;
	static ResetGamepadAssignmentToController(ControllerId: number): void;
	static ResetGamepadAssignments(): void;
	static RegisterForRemoteNotifications(): void;
	static QuitGame(WorldContextObject: UObject,SpecificPlayer: PlayerController,QuitPreference: EQuitPreference,bIgnorePlatformRestrictions: boolean): void;
	static QuitEditor(): void;
	static PrintWarning(inString: string): void;
	static PrintText(WorldContextObject: UObject,InText: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
	static PrintString(WorldContextObject: UObject,inString: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
	static ParseParamValue(inString: string,InParam: string,OutValue?: string): {OutValue: string, $: boolean};
	static ParseParam(inString: string,InParam: string): boolean;
	static ParseCommandLine(InCmdLine: string,OutTokens?: string[],OutSwitches?: string[],OutParams?: any): {OutTokens: string[], OutSwitches: string[], OutParams: any};
	static NotEqual_SoftObjectReference(A: UObject,B: UObject): boolean;
	static NotEqual_SoftClassReference(A: Class,B: Class): boolean;
	static NotEqual_PrimaryAssetType(A: PrimaryAssetType,B: PrimaryAssetType): boolean;
	static NotEqual_PrimaryAssetId(A: PrimaryAssetId,B: PrimaryAssetId): boolean;
	static NormalizeFilename(InFilename: string): string;
	static MoveComponentTo(Component: SceneComponent,TargetRelativeLocation: Vector,TargetRelativeRotation: Rotator,bEaseOut: boolean,bEaseIn: boolean,OverTime: number,bForceShortestRotationPath: boolean,MoveAction: EMoveComponentAction,LatentInfo: LatentActionInfo): void;
	static MakeSoftObjectPath(PathString: string): SoftObjectPath;
	static MakeSoftClassPath(PathString: string): SoftClassPath;
	static MakeLiteralText(Value: string): string;
	static MakeLiteralString(Value: string): string;
	static MakeLiteralName(Value: string): string;
	static MakeLiteralInt(Value: number): number;
	static MakeLiteralFloat(Value: number): number;
	static MakeLiteralByte(Value: number): number;
	static MakeLiteralBool(Value: boolean): boolean;
	static LoadInterstitialAd(AdIdIndex: number): void;
	static LoadClassAsset_Blocking(AssetClass: Class): UnrealEngineClass;
	static LoadAsset_Blocking(Asset: UObject): UObject;
	static LineTraceSingleForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static LineTraceSingleByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static LineTraceSingle(WorldContextObject: UObject,Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static LineTraceMultiForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static LineTraceMultiByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static LineTraceMulti(WorldContextObject: UObject,Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static LaunchURL(URL: string): void;
	static K2_UnPauseTimerHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
	static K2_UnPauseTimer(UObject: UObject,FunctionName: string): void;
	static K2_TimerExistsHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
	static K2_TimerExists(UObject: UObject,FunctionName: string): boolean;
	static K2_SetTimer(UObject: UObject,FunctionName: string,Time: number,bLooping: boolean,InitialStartDelay: number,InitialStartDelayVariance: number): TimerHandle;
	static K2_PauseTimerHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
	static K2_PauseTimer(UObject: UObject,FunctionName: string): void;
	static K2_IsValidTimerHandle(Handle: TimerHandle): boolean;
	static K2_IsTimerPausedHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
	static K2_IsTimerPaused(UObject: UObject,FunctionName: string): boolean;
	static K2_IsTimerActiveHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
	static K2_IsTimerActive(UObject: UObject,FunctionName: string): boolean;
	static K2_InvalidateTimerHandle(Handle?: TimerHandle): {Handle: TimerHandle, $: TimerHandle};
	static K2_GetTimerRemainingTimeHandle(WorldContextObject: UObject,Handle: TimerHandle): number;
	static K2_GetTimerRemainingTime(UObject: UObject,FunctionName: string): number;
	static K2_GetTimerElapsedTimeHandle(WorldContextObject: UObject,Handle: TimerHandle): number;
	static K2_GetTimerElapsedTime(UObject: UObject,FunctionName: string): number;
	static K2_ClearTimerHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
	static K2_ClearTimer(UObject: UObject,FunctionName: string): void;
	static K2_ClearAndInvalidateTimerHandle(WorldContextObject: UObject,Handle?: TimerHandle): {Handle: TimerHandle};
	static IsValidSoftObjectReference(SoftObjectReference: UObject): boolean;
	static IsValidSoftClassReference(SoftClassReference: Class): boolean;
	static IsValidPrimaryAssetType(PrimaryAssetType: PrimaryAssetType): boolean;
	static IsValidPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): boolean;
	static IsValidClass(Class: UnrealEngineClass): boolean;
	static IsValid(UObject: UObject): boolean;
	static IsUnattended(): boolean;
	static IsStandalone(WorldContextObject: UObject): boolean;
	static IsSplitScreen(WorldContextObject: UObject): boolean;
	static IsServer(WorldContextObject: UObject): boolean;
	static IsScreensaverEnabled(): boolean;
	static IsPackagedForDistribution(): boolean;
	static IsLoggedIn(SpecificPlayer: PlayerController): boolean;
	static IsInterstitialAdRequested(): boolean;
	static IsInterstitialAdAvailable(): boolean;
	static IsDedicatedServer(WorldContextObject: UObject): boolean;
	static IsControllerAssignedToGamepad(ControllerId: number): boolean;
	static HideAdBanner(): void;
	static GetVolumeButtonsHandledBySystem(): boolean;
	static GetUniqueDeviceId(): string;
	static GetSystemPath(UObject: UObject): string;
	static GetSupportedFullscreenResolutions(Resolutions?: IntPoint[]): {Resolutions: IntPoint[], $: boolean};
	static GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UObject;
	static GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): Class;
	static GetRenderingMaterialQualityLevel(): number;
	static GetRenderingDetailMode(): number;
	static GetProjectSavedDirectory(): string;
	static GetProjectDirectory(): string;
	static GetProjectContentDirectory(): string;
	static GetPrimaryAssetsWithBundleState(RequiredBundles: string[],ExcludedBundles: string[],ValidTypes: PrimaryAssetType[],bForceCurrentState: boolean,OutPrimaryAssetIdList?: PrimaryAssetId[]): {OutPrimaryAssetIdList: PrimaryAssetId[]};
	static GetPrimaryAssetIdList(PrimaryAssetType: PrimaryAssetType,OutPrimaryAssetIdList?: PrimaryAssetId[]): {OutPrimaryAssetIdList: PrimaryAssetId[]};
	static GetPrimaryAssetIdFromSoftObjectReference(SoftObjectReference: UObject): PrimaryAssetId;
	static GetPrimaryAssetIdFromSoftClassReference(SoftClassReference: Class): PrimaryAssetId;
	static GetPrimaryAssetIdFromObject(UObject: UObject): PrimaryAssetId;
	static GetPrimaryAssetIdFromClass(Class: UnrealEngineClass): PrimaryAssetId;
	static GetPreferredLanguages(): string[];
	static GetPlatformUserName(): string;
	static GetPlatformUserDir(): string;
	static GetPathName(UObject: UObject): string;
	static GetOuterObject(UObject: UObject): UObject;
	static GetObjectName(UObject: UObject): string;
	static GetObjectFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UObject;
	static GetMinYResolutionForUI(): number;
	static GetMinYResolutionFor3DView(): number;
	static GetLocalCurrencySymbol(): string;
	static GetLocalCurrencyCode(): string;
	static GetGameTimeInSeconds(WorldContextObject: UObject): number;
	static GetGamepadControllerName(ControllerId: number): string;
	static GetGamepadButtonGlyph(ButtonKey: string,ControllerIndex: number): Texture2D;
	static GetGameName(): string;
	static GetGameBundleId(): string;
	static GetFrameCount(): any;
	static GetEngineVersion(): string;
	static GetEditorProperty(UObject: UObject,PropertyName: string,PropertyValue?: number): {PropertyValue: number, $: boolean};
	static GetDisplayName(UObject: UObject): string;
	static GetDeviceId(): string;
	static GetDefaultLocale(): string;
	static GetDefaultLanguage(): string;
	static GetCurrentBundleState(PrimaryAssetId: PrimaryAssetId,bForceCurrentState: boolean,OutBundles?: string[]): {OutBundles: string[], $: boolean};
	static GetConvenientWindowedResolutions(Resolutions?: IntPoint[]): {Resolutions: IntPoint[], $: boolean};
	static GetConsoleVariableIntValue(VariableName: string): number;
	static GetConsoleVariableFloatValue(VariableName: string): number;
	static GetConsoleVariableBoolValue(VariableName: string): boolean;
	static GetComponentBounds(Component: SceneComponent,Origin?: Vector,BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
	static GetCommandLine(): string;
	static GetClassFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UnrealEngineClass;
	static GetClassDisplayName(Class: UnrealEngineClass): string;
	static GetAdIDCount(): number;
	static GetActorListFromComponentList(ComponentList: PrimitiveComponent[],ActorClassFilter: UnrealEngineClass,OutActorList?: Actor[]): {OutActorList: Actor[]};
	static GetActorBounds(Actor: Actor,Origin?: Vector,BoxExtent?: Vector): {Origin: Vector, BoxExtent: Vector};
	static ForceCloseAdBanner(): void;
	static FlushPersistentDebugLines(WorldContextObject: UObject): void;
	static FlushDebugStrings(WorldContextObject: UObject): void;
	static ExecuteConsoleCommand(WorldContextObject: UObject,Command: string,SpecificPlayer: PlayerController): void;
	static EqualEqual_SoftObjectReference(A: UObject,B: UObject): boolean;
	static EqualEqual_SoftClassReference(A: Class,B: Class): boolean;
	static EqualEqual_PrimaryAssetType(A: PrimaryAssetType,B: PrimaryAssetType): boolean;
	static EqualEqual_PrimaryAssetId(A: PrimaryAssetId,B: PrimaryAssetId): boolean;
	static EndTransaction(): number;
	static DrawDebugString(WorldContextObject: UObject,TextLocation: Vector,text: string,TestBaseActor: Actor,TextColor: LinearColor,Duration: number): void;
	static DrawDebugSphere(WorldContextObject: UObject,Center: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugPoint(WorldContextObject: UObject,Position: Vector,Size: number,PointColor: LinearColor,Duration: number): void;
	static DrawDebugPlane(WorldContextObject: UObject,PlaneCoordinates: Plane,Location: Vector,Size: number,PlaneColor: LinearColor,Duration: number): void;
	static DrawDebugLine(WorldContextObject: UObject,LineStart: Vector,LineEnd: Vector,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugFrustum(WorldContextObject: UObject,FrustumTransform: Transform,FrustumColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugFloatHistoryTransform(WorldContextObject: UObject,FloatHistory: DebugFloatHistory,DrawTransform: Transform,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
	static DrawDebugFloatHistoryLocation(WorldContextObject: UObject,FloatHistory: DebugFloatHistory,DrawLocation: Vector,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
	static DrawDebugCylinder(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugCoordinateSystem(WorldContextObject: UObject,AxisLoc: Vector,AxisRot: Rotator,Scale: number,Duration: number,Thickness: number): void;
	static DrawDebugConeInDegrees(WorldContextObject: UObject,Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugCone(WorldContextObject: UObject,Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugCircle(WorldContextObject: UObject,Center: Vector,Radius: number,NumSegments: number,LineColor: LinearColor,Duration: number,Thickness: number,YAxis: Vector,ZAxis: Vector,bDrawAxis: boolean): void;
	static DrawDebugCapsule(WorldContextObject: UObject,Center: Vector,HalfHeight: number,Radius: number,Rotation: Rotator,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugCamera(CameraActor: CameraActor,CameraColor: LinearColor,Duration: number): void;
	static DrawDebugBox(WorldContextObject: UObject,Center: Vector,Extent: Vector,LineColor: LinearColor,Rotation: Rotator,Duration: number,Thickness: number): void;
	static DrawDebugArrow(WorldContextObject: UObject,LineStart: Vector,LineEnd: Vector,ArrowSize: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DoesImplementInterface(TestObject: UObject,Interface: UnrealEngineClass): boolean;
	static Delay(WorldContextObject: UObject,Duration: number,LatentInfo: LatentActionInfo): void;
	static CreateCopyForUndoBuffer(ObjectToModify: UObject): void;
	static ConvertToRelativePath(Filename: string): string;
	static ConvertToAbsolutePath(Filename: string): string;
	static Conv_SoftObjPathToSoftObjRef(SoftObjectPath: SoftObjectPath): UObject;
	static Conv_SoftObjectReferenceToString(SoftObjectReference: UObject): string;
	static Conv_SoftObjectReferenceToObject(softobject: UObject): UObject;
	static Conv_SoftClassReferenceToString(SoftClassReference: Class): string;
	static Conv_SoftClassReferenceToClass(softclass: Class): UnrealEngineClass;
	static Conv_SoftClassPathToSoftClassRef(SoftClassPath: SoftClassPath): Class;
	static Conv_PrimaryAssetTypeToString(PrimaryAssetType: PrimaryAssetType): string;
	static Conv_PrimaryAssetIdToString(PrimaryAssetId: PrimaryAssetId): string;
	static Conv_ObjectToSoftObjectReference(UObject: UObject): UObject;
	static Conv_ClassToSoftClassReference(Class: UnrealEngineClass): Class;
	static ControlScreensaver(bAllowScreenSaver: boolean): void;
	static ComponentOverlapComponents(Component: PrimitiveComponent,ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static ComponentOverlapActors(Component: PrimitiveComponent,ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static CollectGarbage(): void;
	static CapsuleTraceSingleForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static CapsuleTraceSingleByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static CapsuleTraceSingle(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static CapsuleTraceMultiForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static CapsuleTraceMultiByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static CapsuleTraceMulti(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static CapsuleOverlapComponents(WorldContextObject: UObject,CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static CapsuleOverlapActors(WorldContextObject: UObject,CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static CanLaunchURL(URL: string): boolean;
	static CancelTransaction(index: number): void;
	static BreakSoftObjectPath(InSoftObjectPath: SoftObjectPath,PathString?: string): {PathString: string};
	static BreakSoftClassPath(InSoftClassPath: SoftClassPath,PathString?: string): {PathString: string};
	static BoxTraceSingleForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static BoxTraceSingleByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static BoxTraceSingle(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static BoxTraceMultiForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static BoxTraceMultiByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static BoxTraceMulti(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static BoxOverlapComponents(WorldContextObject: UObject,BoxPos: Vector,Extent: Vector,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static BoxOverlapActors(WorldContextObject: UObject,BoxPos: Vector,BoxExtent: Vector,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static BeginTransaction(Context: string,Description: string,PrimaryObject: UObject): number;
	static AddFloatHistorySample(Value: number,FloatHistory: DebugFloatHistory): DebugFloatHistory;
	static C(Other: UObject | any): KismetSystemLibrary;
}

declare class PolyglotTextData { 
	Category: ELocalizedTextSourceCategory;
	NativeCulture: string;
	Namespace: string;
	Key: string;
	NativeString: string;
	LocalizedStrings: any;
	bIsMinimalPatch: boolean;
	CachedText: string;
	clone() : PolyglotTextData;
	static C(Other: UObject | any): PolyglotTextData;
	IsPolyglotDataValid(IsValid?: boolean,ErrorMessage?: string): {IsValid: boolean, ErrorMessage: string};
	PolyglotDataToText(): string;
	static IsPolyglotDataValid(PolyglotData: PolyglotTextData,IsValid?: boolean,ErrorMessage?: string): {IsValid: boolean, ErrorMessage: string};
	static PolyglotDataToText(PolyglotData: PolyglotTextData): string;
}

declare type EFormatArgumentType = 'Int' | 'UInt' | 'Float' | 'Double' | 'Text' | 'Gender' | 'EFormatArgumentType_MAX';
declare var EFormatArgumentType : { Int:'Int',UInt:'UInt',Float:'Float',Double:'Double',Text:'Text',Gender:'Gender',EFormatArgumentType_MAX:'EFormatArgumentType_MAX', };
declare type ETextGender = 'Masculine' | 'Feminine' | 'Neuter' | 'ETextGender_MAX';
declare var ETextGender : { Masculine:'Masculine',Feminine:'Feminine',Neuter:'Neuter',ETextGender_MAX:'ETextGender_MAX', };
declare class FormatArgumentData { 
	ArgumentName: string;
	ArgumentValueType: EFormatArgumentType;
	ArgumentValue: string;
	ArgumentValueInt: number;
	ArgumentValueFloat: number;
	ArgumentValueGender: ETextGender;
	clone() : FormatArgumentData;
	static C(Other: UObject | any): FormatArgumentData;
}

declare type ERoundingMode = 'HalfToEven' | 'HalfFromZero' | 'HalfToZero' | 'FromZero' | 'ToZero' | 'ToNegativeInfinity' | 'ToPositiveInfinity' | 'ERoundingMode_MAX';
declare var ERoundingMode : { HalfToEven:'HalfToEven',HalfFromZero:'HalfFromZero',HalfToZero:'HalfToZero',FromZero:'FromZero',ToZero:'ToZero',ToNegativeInfinity:'ToNegativeInfinity',ToPositiveInfinity:'ToPositiveInfinity',ERoundingMode_MAX:'ERoundingMode_MAX', };
declare class KismetTextLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetTextLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetTextLibrary;
	static GetDefaultObject(): KismetTextLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetTextLibrary;
	static TextTrimTrailing(InText: string): string;
	static TextTrimPrecedingAndTrailing(InText: string): string;
	static TextTrimPreceding(InText: string): string;
	static TextToUpper(InText: string): string;
	static TextToLower(InText: string): string;
	static TextIsTransient(InText: string): boolean;
	static TextIsFromStringTable(text: string): boolean;
	static TextIsEmpty(InText: string): boolean;
	static TextIsCultureInvariant(InText: string): boolean;
	static TextFromStringTable(TableId: string,Key: string): string;
	static StringTableIdAndKeyFromText(text: string,OutTableId?: string,OutKey?: string): {OutTableId: string, OutKey: string, $: boolean};
	static PolyglotDataToText(PolyglotData: PolyglotTextData): string;
	static NotEqual_TextText(A: string,B: string): boolean;
	static NotEqual_IgnoreCase_TextText(A: string,B: string): boolean;
	static IsPolyglotDataValid(PolyglotData: PolyglotTextData,IsValid?: boolean,ErrorMessage?: string): {IsValid: boolean, ErrorMessage: string};
	static GetEmptyText(): string;
	static Format(InPattern: string,InArgs: FormatArgumentData[]): string;
	static FindTextInLocalizationTable(Namespace: string,Key: string,OutText?: string): {OutText: string, $: boolean};
	static EqualEqual_TextText(A: string,B: string): boolean;
	static EqualEqual_IgnoreCase_TextText(A: string,B: string): boolean;
	static Conv_VectorToText(InVec: Vector): string;
	static Conv_Vector2dToText(InVec: Vector2D): string;
	static Conv_TransformToText(InTrans: Transform): string;
	static Conv_TextToString(InText: string): string;
	static Conv_StringToText(inString: string): string;
	static Conv_RotatorToText(InRot: Rotator): string;
	static Conv_ObjectToText(InObj: UObject): string;
	static Conv_NameToText(InName: string): string;
	static Conv_IntToText(Value: number,bAlwaysSign: boolean,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number): string;
	static Conv_Int64ToText(Value: any,bAlwaysSign: boolean,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number): string;
	static Conv_FloatToText(Value: number,RoundingMode: ERoundingMode,bAlwaysSign: boolean,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number,MinimumFractionalDigits: number,MaximumFractionalDigits: number): string;
	static Conv_ColorToText(InColor: LinearColor): string;
	static Conv_ByteToText(Value: number): string;
	static Conv_BoolToText(InBool: boolean): string;
	static AsTimeZoneTime_DateTime(InDateTime: DateTime,InTimeZone: string): string;
	static AsTimeZoneDateTime_DateTime(InDateTime: DateTime,InTimeZone: string): string;
	static AsTimeZoneDate_DateTime(InDateTime: DateTime,InTimeZone: string): string;
	static AsTimespan_Timespan(InTimespan: Timespan): string;
	static AsTime_DateTime(In: DateTime): string;
	static AsPercent_Float(Value: number,RoundingMode: ERoundingMode,bAlwaysSign: boolean,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number,MinimumFractionalDigits: number,MaximumFractionalDigits: number): string;
	static AsDateTime_DateTime(In: DateTime): string;
	static AsDate_DateTime(InDateTime: DateTime): string;
	static AsCurrencyBase(BaseValue: number,CurrencyCode: string): string;
	static AsCurrency_Integer(Value: number,RoundingMode: ERoundingMode,bAlwaysSign: boolean,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number,MinimumFractionalDigits: number,MaximumFractionalDigits: number,CurrencyCode: string): string;
	static AsCurrency_Float(Value: number,RoundingMode: ERoundingMode,bAlwaysSign: boolean,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number,MinimumFractionalDigits: number,MaximumFractionalDigits: number,CurrencyCode: string): string;
	static C(Other: UObject | any): KismetTextLibrary;
}

declare class LevelPartitionInterface extends Interface { 
	static Load(ResourceName: string): LevelPartitionInterface;
	static Find(Outer: UObject, ResourceName: string): LevelPartitionInterface;
	static GetDefaultObject(): LevelPartitionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelPartitionInterface;
	static C(Other: UObject | any): LevelPartitionInterface;
}

declare class LevelBounds extends Actor { 
	BoxComponent: BoxComponent;
	bAutoUpdateBounds: boolean;
	static GetDefaultObject(): LevelBounds;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelBounds;
	static C(Other: UObject | any): LevelBounds;
}

declare class LevelStreamingAlwaysLoaded extends LevelStreaming { 
	static Load(ResourceName: string): LevelStreamingAlwaysLoaded;
	static Find(Outer: UObject, ResourceName: string): LevelStreamingAlwaysLoaded;
	static GetDefaultObject(): LevelStreamingAlwaysLoaded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreamingAlwaysLoaded;
	static C(Other: UObject | any): LevelStreamingAlwaysLoaded;
}

declare class LevelStreamingDynamic extends LevelStreaming { 
	bInitiallyLoaded: boolean;
	bInitiallyVisible: boolean;
	static Load(ResourceName: string): LevelStreamingDynamic;
	static Find(Outer: UObject, ResourceName: string): LevelStreamingDynamic;
	static GetDefaultObject(): LevelStreamingDynamic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreamingDynamic;
	static LoadLevelInstanceBySoftObjectPtr(WorldContextObject: UObject,Level: World,Location: Vector,Rotation: Rotator,bOutSuccess?: boolean,OptionalLevelNameOverride?: string): {bOutSuccess: boolean, $: LevelStreamingDynamic};
	static LoadLevelInstance(WorldContextObject: UObject,LevelName: string,Location: Vector,Rotation: Rotator,bOutSuccess?: boolean,OptionalLevelNameOverride?: string): {bOutSuccess: boolean, $: LevelStreamingDynamic};
	static C(Other: UObject | any): LevelStreamingDynamic;
}

declare class LevelStreamingPersistent extends LevelStreaming { 
	static Load(ResourceName: string): LevelStreamingPersistent;
	static Find(Outer: UObject, ResourceName: string): LevelStreamingPersistent;
	static GetDefaultObject(): LevelStreamingPersistent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreamingPersistent;
	static C(Other: UObject | any): LevelStreamingPersistent;
}

declare class LightmappedSurfaceCollection extends UObject { 
	SourceModel: Model;
	Surfaces: number[];
	static Load(ResourceName: string): LightmappedSurfaceCollection;
	static Find(Outer: UObject, ResourceName: string): LightmappedSurfaceCollection;
	static GetDefaultObject(): LightmappedSurfaceCollection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmappedSurfaceCollection;
	static C(Other: UObject | any): LightmappedSurfaceCollection;
}

declare class LightMapTexture2D extends Texture2D { 
	static Load(ResourceName: string): LightMapTexture2D;
	static Find(Outer: UObject, ResourceName: string): LightMapTexture2D;
	static GetDefaultObject(): LightMapTexture2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightMapTexture2D;
	static C(Other: UObject | any): LightMapTexture2D;
}

declare class LightMapVirtualTexture2D extends Texture2D { 
	TypeToLayer: any[];
	static Load(ResourceName: string): LightMapVirtualTexture2D;
	static Find(Outer: UObject, ResourceName: string): LightMapVirtualTexture2D;
	static GetDefaultObject(): LightMapVirtualTexture2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightMapVirtualTexture2D;
	static C(Other: UObject | any): LightMapVirtualTexture2D;
}

declare class LightmassCharacterIndirectDetailVolume extends Volume { 
	static GetDefaultObject(): LightmassCharacterIndirectDetailVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassCharacterIndirectDetailVolume;
	static C(Other: UObject | any): LightmassCharacterIndirectDetailVolume;
}

declare class LightmassImportanceVolume extends Volume { 
	static GetDefaultObject(): LightmassImportanceVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassImportanceVolume;
	static C(Other: UObject | any): LightmassImportanceVolume;
}

declare class LightmassPortalComponent extends SceneComponent { 
	PreviewBox: BoxComponent;
	static Load(ResourceName: string): LightmassPortalComponent;
	static Find(Outer: UObject, ResourceName: string): LightmassPortalComponent;
	static GetDefaultObject(): LightmassPortalComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassPortalComponent;
	static C(Other: UObject | any): LightmassPortalComponent;
}

declare class LightmassPortal extends Actor { 
	PortalComponent: LightmassPortalComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): LightmassPortal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassPortal;
	static C(Other: UObject | any): LightmassPortal;
}

declare class LightmassPrimitiveSettingsObject extends UObject { 
	LightmassSettings: LightmassPrimitiveSettings;
	static Load(ResourceName: string): LightmassPrimitiveSettingsObject;
	static Find(Outer: UObject, ResourceName: string): LightmassPrimitiveSettingsObject;
	static GetDefaultObject(): LightmassPrimitiveSettingsObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassPrimitiveSettingsObject;
	static C(Other: UObject | any): LightmassPrimitiveSettingsObject;
}

declare class LODActor extends Actor { 
	StaticMeshComponent: StaticMeshComponent;
	InstancedStaticMeshComponents: any;
	Proxy: HLODProxy;
	Key: string;
	LODDrawDistance: number;
	LODLevel: number;
	SubActors: Actor[];
	CachedNumHLODLevels: number;
	NumTrianglesInSubActors: any;
	NumTrianglesInMergedMesh: any;
	bOverrideMaterialMergeSettings: boolean;
	MaterialSettings: MaterialProxySettings;
	bOverrideTransitionScreenSize: boolean;
	TransitionScreenSize: number;
	bOverrideScreenSize: boolean;
	ScreenSize: number;
	LODActorTag: string;
	bBuiltFromHLODDesc: boolean;
	ProxyDesc: HLODProxyDesc;
	static GetDefaultObject(): LODActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LODActor;
	static C(Other: UObject | any): LODActor;
}

declare type ESyncOption = 'Drive' | 'Passive' | 'Disabled' | 'ESyncOption_MAX';
declare var ESyncOption : { Drive:'Drive',Passive:'Passive',Disabled:'Disabled',ESyncOption_MAX:'ESyncOption_MAX', };
declare class ComponentSync { 
	Name: string;
	SyncOption: ESyncOption;
	clone() : ComponentSync;
	static C(Other: UObject | any): ComponentSync;
}

declare class LODSyncComponent extends ActorComponent { 
	NumLODs: number;
	ForcedLOD: number;
	ComponentsToSync: ComponentSync[];
	CustomLODMapping: any;
	CurrentLOD: number;
	CurrentNumLODs: number;
	DriveComponents: PrimitiveComponent[];
	SubComponents: PrimitiveComponent[];
	static Load(ResourceName: string): LODSyncComponent;
	static Find(Outer: UObject, ResourceName: string): LODSyncComponent;
	static GetDefaultObject(): LODSyncComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LODSyncComponent;
	GetLODSyncDebugText(): string;
	static C(Other: UObject | any): LODSyncComponent;
}

declare class LODSyncInterface extends Interface { 
	static Load(ResourceName: string): LODSyncInterface;
	static Find(Outer: UObject, ResourceName: string): LODSyncInterface;
	static GetDefaultObject(): LODSyncInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LODSyncInterface;
	static C(Other: UObject | any): LODSyncInterface;
}

declare class MaterialExpressionAbs extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionAbs;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAbs;
	static GetDefaultObject(): MaterialExpressionAbs;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAbs;
	static C(Other: UObject | any): MaterialExpressionAbs;
}

declare class MaterialExpressionActorPositionWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionActorPositionWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionActorPositionWS;
	static GetDefaultObject(): MaterialExpressionActorPositionWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionActorPositionWS;
	static C(Other: UObject | any): MaterialExpressionActorPositionWS;
}

declare class MaterialExpressionAdd extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	static Load(ResourceName: string): MaterialExpressionAdd;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAdd;
	static GetDefaultObject(): MaterialExpressionAdd;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAdd;
	static C(Other: UObject | any): MaterialExpressionAdd;
}

declare type EMaterialSamplerType = 'SAMPLERTYPE_Color' | 'SAMPLERTYPE_Grayscale' | 'SAMPLERTYPE_Alpha' | 'SAMPLERTYPE_Normal' | 'SAMPLERTYPE_Masks' | 'SAMPLERTYPE_DistanceFieldFont' | 'SAMPLERTYPE_LinearColor' | 'SAMPLERTYPE_LinearGrayscale' | 'SAMPLERTYPE_Data' | 'SAMPLERTYPE_External' | 'SAMPLERTYPE_VirtualColor' | 'SAMPLERTYPE_VirtualGrayscale' | 'SAMPLERTYPE_VirtualAlpha' | 'SAMPLERTYPE_VirtualNormal' | 'SAMPLERTYPE_VirtualMasks' | 'SAMPLERTYPE_VirtualLinearColor' | 'SAMPLERTYPE_VirtualLinearGrayscale' | 'SAMPLERTYPE_MAX';
declare var EMaterialSamplerType : { SAMPLERTYPE_Color:'SAMPLERTYPE_Color',SAMPLERTYPE_Grayscale:'SAMPLERTYPE_Grayscale',SAMPLERTYPE_Alpha:'SAMPLERTYPE_Alpha',SAMPLERTYPE_Normal:'SAMPLERTYPE_Normal',SAMPLERTYPE_Masks:'SAMPLERTYPE_Masks',SAMPLERTYPE_DistanceFieldFont:'SAMPLERTYPE_DistanceFieldFont',SAMPLERTYPE_LinearColor:'SAMPLERTYPE_LinearColor',SAMPLERTYPE_LinearGrayscale:'SAMPLERTYPE_LinearGrayscale',SAMPLERTYPE_Data:'SAMPLERTYPE_Data',SAMPLERTYPE_External:'SAMPLERTYPE_External',SAMPLERTYPE_VirtualColor:'SAMPLERTYPE_VirtualColor',SAMPLERTYPE_VirtualGrayscale:'SAMPLERTYPE_VirtualGrayscale',SAMPLERTYPE_VirtualAlpha:'SAMPLERTYPE_VirtualAlpha',SAMPLERTYPE_VirtualNormal:'SAMPLERTYPE_VirtualNormal',SAMPLERTYPE_VirtualMasks:'SAMPLERTYPE_VirtualMasks',SAMPLERTYPE_VirtualLinearColor:'SAMPLERTYPE_VirtualLinearColor',SAMPLERTYPE_VirtualLinearGrayscale:'SAMPLERTYPE_VirtualLinearGrayscale',SAMPLERTYPE_MAX:'SAMPLERTYPE_MAX', };
declare class MaterialExpressionTextureBase extends MaterialExpression { 
	Texture: Texture;
	SamplerType: EMaterialSamplerType;
	IsDefaultMeshpaintTexture: boolean;
	static Load(ResourceName: string): MaterialExpressionTextureBase;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureBase;
	static GetDefaultObject(): MaterialExpressionTextureBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureBase;
	static C(Other: UObject | any): MaterialExpressionTextureBase;
}

declare type ETextureMipValueMode = 'TMVM_None' | 'TMVM_MipLevel' | 'TMVM_MipBias' | 'TMVM_Derivative' | 'TMVM_MAX';
declare var ETextureMipValueMode : { TMVM_None:'TMVM_None',TMVM_MipLevel:'TMVM_MipLevel',TMVM_MipBias:'TMVM_MipBias',TMVM_Derivative:'TMVM_Derivative',TMVM_MAX:'TMVM_MAX', };
declare type ESamplerSourceMode = 'SSM_FromTextureAsset' | 'SSM_Wrap_WorldGroupSettings' | 'SSM_Clamp_WorldGroupSettings' | 'SSM_MAX';
declare var ESamplerSourceMode : { SSM_FromTextureAsset:'SSM_FromTextureAsset',SSM_Wrap_WorldGroupSettings:'SSM_Wrap_WorldGroupSettings',SSM_Clamp_WorldGroupSettings:'SSM_Clamp_WorldGroupSettings',SSM_MAX:'SSM_MAX', };
declare class MaterialExpressionTextureSample extends MaterialExpressionTextureBase { 
	Coordinates: ExpressionInput;
	TextureObject: ExpressionInput;
	MipValue: ExpressionInput;
	CoordinatesDX: ExpressionInput;
	CoordinatesDY: ExpressionInput;
	AutomaticViewMipBiasValue: ExpressionInput;
	MipValueMode: ETextureMipValueMode;
	SamplerSource: ESamplerSourceMode;
	AutomaticViewMipBias: boolean;
	ConstCoordinate: number;
	ConstMipValue: number;
	static Load(ResourceName: string): MaterialExpressionTextureSample;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSample;
	static GetDefaultObject(): MaterialExpressionTextureSample;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSample;
	static C(Other: UObject | any): MaterialExpressionTextureSample;
}

declare class MaterialExpressionTextureSampleParameter extends MaterialExpressionTextureSample { 
	ParameterName: string;
	ExpressionGUID: Guid;
	Group: string;
	SortPriority: number;
	ChannelNames: ParameterChannelNames;
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameter;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameter;
	static C(Other: UObject | any): MaterialExpressionTextureSampleParameter;
}

declare class MaterialExpressionTextureSampleParameter2D extends MaterialExpressionTextureSampleParameter { 
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameter2D;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameter2D;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameter2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameter2D;
	static C(Other: UObject | any): MaterialExpressionTextureSampleParameter2D;
}

declare type ETextureColorChannel = 'TCC_Red' | 'TCC_Green' | 'TCC_Blue' | 'TCC_Alpha' | 'TCC_MAX';
declare var ETextureColorChannel : { TCC_Red:'TCC_Red',TCC_Green:'TCC_Green',TCC_Blue:'TCC_Blue',TCC_Alpha:'TCC_Alpha',TCC_MAX:'TCC_MAX', };
declare class MaterialExpressionAntialiasedTextureMask extends MaterialExpressionTextureSampleParameter2D { 
	Threshold: number;
	Channel: ETextureColorChannel;
	static Load(ResourceName: string): MaterialExpressionAntialiasedTextureMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAntialiasedTextureMask;
	static GetDefaultObject(): MaterialExpressionAntialiasedTextureMask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAntialiasedTextureMask;
	static C(Other: UObject | any): MaterialExpressionAntialiasedTextureMask;
}

declare class MaterialExpressionAppendVector extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionAppendVector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAppendVector;
	static GetDefaultObject(): MaterialExpressionAppendVector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAppendVector;
	static C(Other: UObject | any): MaterialExpressionAppendVector;
}

declare class MaterialExpressionArccosine extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArccosine;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArccosine;
	static GetDefaultObject(): MaterialExpressionArccosine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArccosine;
	static C(Other: UObject | any): MaterialExpressionArccosine;
}

declare class MaterialExpressionArccosineFast extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArccosineFast;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArccosineFast;
	static GetDefaultObject(): MaterialExpressionArccosineFast;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArccosineFast;
	static C(Other: UObject | any): MaterialExpressionArccosineFast;
}

declare class MaterialExpressionArcsine extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArcsine;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArcsine;
	static GetDefaultObject(): MaterialExpressionArcsine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArcsine;
	static C(Other: UObject | any): MaterialExpressionArcsine;
}

declare class MaterialExpressionArcsineFast extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArcsineFast;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArcsineFast;
	static GetDefaultObject(): MaterialExpressionArcsineFast;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArcsineFast;
	static C(Other: UObject | any): MaterialExpressionArcsineFast;
}

declare class MaterialExpressionArctangent extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArctangent;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArctangent;
	static GetDefaultObject(): MaterialExpressionArctangent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArctangent;
	static C(Other: UObject | any): MaterialExpressionArctangent;
}

declare class MaterialExpressionArctangent2 extends MaterialExpression { 
	Y: ExpressionInput;
	X: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArctangent2;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArctangent2;
	static GetDefaultObject(): MaterialExpressionArctangent2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArctangent2;
	static C(Other: UObject | any): MaterialExpressionArctangent2;
}

declare class MaterialExpressionArctangent2Fast extends MaterialExpression { 
	Y: ExpressionInput;
	X: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArctangent2Fast;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArctangent2Fast;
	static GetDefaultObject(): MaterialExpressionArctangent2Fast;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArctangent2Fast;
	static C(Other: UObject | any): MaterialExpressionArctangent2Fast;
}

declare class MaterialExpressionArctangentFast extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArctangentFast;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArctangentFast;
	static GetDefaultObject(): MaterialExpressionArctangentFast;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArctangentFast;
	static C(Other: UObject | any): MaterialExpressionArctangentFast;
}

declare class MaterialExpressionAtmosphericFogColor extends MaterialExpression { 
	WorldPosition: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionAtmosphericFogColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAtmosphericFogColor;
	static GetDefaultObject(): MaterialExpressionAtmosphericFogColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAtmosphericFogColor;
	static C(Other: UObject | any): MaterialExpressionAtmosphericFogColor;
}

declare class MaterialExpressionAtmosphericLightColor extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionAtmosphericLightColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAtmosphericLightColor;
	static GetDefaultObject(): MaterialExpressionAtmosphericLightColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAtmosphericLightColor;
	static C(Other: UObject | any): MaterialExpressionAtmosphericLightColor;
}

declare class MaterialExpressionAtmosphericLightVector extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionAtmosphericLightVector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAtmosphericLightVector;
	static GetDefaultObject(): MaterialExpressionAtmosphericLightVector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAtmosphericLightVector;
	static C(Other: UObject | any): MaterialExpressionAtmosphericLightVector;
}

declare class MaterialExpressionBentNormalCustomOutput extends MaterialExpressionCustomOutput { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionBentNormalCustomOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionBentNormalCustomOutput;
	static GetDefaultObject(): MaterialExpressionBentNormalCustomOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionBentNormalCustomOutput;
	static C(Other: UObject | any): MaterialExpressionBentNormalCustomOutput;
}

declare class MaterialExpressionBlackBody extends MaterialExpression { 
	Temp: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionBlackBody;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionBlackBody;
	static GetDefaultObject(): MaterialExpressionBlackBody;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionBlackBody;
	static C(Other: UObject | any): MaterialExpressionBlackBody;
}

declare type EMaterialAttributeBlend = 'Blend' | 'UseA' | 'UseB' | 'EMaterialAttributeBlend_MAX';
declare var EMaterialAttributeBlend : { Blend:'Blend',UseA:'UseA',UseB:'UseB',EMaterialAttributeBlend_MAX:'EMaterialAttributeBlend_MAX', };
declare class MaterialExpressionBlendMaterialAttributes extends MaterialExpression { 
	A: MaterialAttributesInput;
	B: MaterialAttributesInput;
	Alpha: ExpressionInput;
	PixelAttributeBlendType: EMaterialAttributeBlend;
	VertexAttributeBlendType: EMaterialAttributeBlend;
	static Load(ResourceName: string): MaterialExpressionBlendMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionBlendMaterialAttributes;
	static GetDefaultObject(): MaterialExpressionBlendMaterialAttributes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionBlendMaterialAttributes;
	static C(Other: UObject | any): MaterialExpressionBlendMaterialAttributes;
}

declare class MaterialExpressionBreakMaterialAttributes extends MaterialExpression { 
	MaterialAttributes: MaterialAttributesInput;
	static Load(ResourceName: string): MaterialExpressionBreakMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionBreakMaterialAttributes;
	static GetDefaultObject(): MaterialExpressionBreakMaterialAttributes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionBreakMaterialAttributes;
	static C(Other: UObject | any): MaterialExpressionBreakMaterialAttributes;
}

declare class MaterialExpressionBumpOffset extends MaterialExpression { 
	Coordinate: ExpressionInput;
	Height: ExpressionInput;
	HeightRatioInput: ExpressionInput;
	HeightRatio: number;
	ReferencePlane: number;
	ConstCoordinate: any;
	static Load(ResourceName: string): MaterialExpressionBumpOffset;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionBumpOffset;
	static GetDefaultObject(): MaterialExpressionBumpOffset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionBumpOffset;
	static C(Other: UObject | any): MaterialExpressionBumpOffset;
}

declare class MaterialExpressionCameraPositionWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionCameraPositionWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCameraPositionWS;
	static GetDefaultObject(): MaterialExpressionCameraPositionWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCameraPositionWS;
	static C(Other: UObject | any): MaterialExpressionCameraPositionWS;
}

declare class MaterialExpressionCameraVectorWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionCameraVectorWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCameraVectorWS;
	static GetDefaultObject(): MaterialExpressionCameraVectorWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCameraVectorWS;
	static C(Other: UObject | any): MaterialExpressionCameraVectorWS;
}

declare class MaterialExpressionCeil extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionCeil;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCeil;
	static GetDefaultObject(): MaterialExpressionCeil;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCeil;
	static C(Other: UObject | any): MaterialExpressionCeil;
}

declare class MaterialExpressionParameter extends MaterialExpression { 
	ParameterName: string;
	ExpressionGUID: Guid;
	Group: string;
	SortPriority: number;
	static Load(ResourceName: string): MaterialExpressionParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParameter;
	static GetDefaultObject(): MaterialExpressionParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParameter;
	static C(Other: UObject | any): MaterialExpressionParameter;
}

declare class MaterialExpressionVectorParameter extends MaterialExpressionParameter { 
	DefaultValue: LinearColor;
	bUseCustomPrimitiveData: boolean;
	PrimitiveDataIndex: number;
	ChannelNames: ParameterChannelNames;
	static Load(ResourceName: string): MaterialExpressionVectorParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVectorParameter;
	static GetDefaultObject(): MaterialExpressionVectorParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVectorParameter;
	static C(Other: UObject | any): MaterialExpressionVectorParameter;
}

declare type EChannelMaskParameterColor = 'Red' | 'Green' | 'Blue' | 'Alpha' | 'EChannelMaskParameterColor_MAX';
declare var EChannelMaskParameterColor : { Red:'Red',Green:'Green',Blue:'Blue',Alpha:'Alpha',EChannelMaskParameterColor_MAX:'EChannelMaskParameterColor_MAX', };
declare class MaterialExpressionChannelMaskParameter extends MaterialExpressionVectorParameter { 
	MaskChannel: EChannelMaskParameterColor;
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionChannelMaskParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionChannelMaskParameter;
	static GetDefaultObject(): MaterialExpressionChannelMaskParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionChannelMaskParameter;
	static C(Other: UObject | any): MaterialExpressionChannelMaskParameter;
}

declare type EClampMode = 'CMODE_Clamp' | 'CMODE_ClampMin' | 'CMODE_ClampMax' | 'CMODE_MAX';
declare var EClampMode : { CMODE_Clamp:'CMODE_Clamp',CMODE_ClampMin:'CMODE_ClampMin',CMODE_ClampMax:'CMODE_ClampMax',CMODE_MAX:'CMODE_MAX', };
declare class MaterialExpressionClamp extends MaterialExpression { 
	Input: ExpressionInput;
	Min: ExpressionInput;
	Max: ExpressionInput;
	ClampMode: EClampMode;
	MinDefault: number;
	MaxDefault: number;
	static Load(ResourceName: string): MaterialExpressionClamp;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionClamp;
	static GetDefaultObject(): MaterialExpressionClamp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionClamp;
	static C(Other: UObject | any): MaterialExpressionClamp;
}

declare class MaterialExpressionClearCoatNormalCustomOutput extends MaterialExpressionCustomOutput { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionClearCoatNormalCustomOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionClearCoatNormalCustomOutput;
	static GetDefaultObject(): MaterialExpressionClearCoatNormalCustomOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionClearCoatNormalCustomOutput;
	static C(Other: UObject | any): MaterialExpressionClearCoatNormalCustomOutput;
}

declare class MaterialExpressionCloudSampleAttribute extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionCloudSampleAttribute;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCloudSampleAttribute;
	static GetDefaultObject(): MaterialExpressionCloudSampleAttribute;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCloudSampleAttribute;
	static C(Other: UObject | any): MaterialExpressionCloudSampleAttribute;
}

declare class MaterialExpressionCollectionParameter extends MaterialExpression { 
	Collection: MaterialParameterCollection;
	ParameterName: string;
	ParameterId: Guid;
	static Load(ResourceName: string): MaterialExpressionCollectionParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCollectionParameter;
	static GetDefaultObject(): MaterialExpressionCollectionParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCollectionParameter;
	static C(Other: UObject | any): MaterialExpressionCollectionParameter;
}

declare class MaterialExpressionComponentMask extends MaterialExpression { 
	Input: ExpressionInput;
	R: boolean;
	G: boolean;
	B: boolean;
	A: boolean;
	static Load(ResourceName: string): MaterialExpressionComponentMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionComponentMask;
	static GetDefaultObject(): MaterialExpressionComponentMask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionComponentMask;
	static C(Other: UObject | any): MaterialExpressionComponentMask;
}

declare class MaterialExpressionConstant extends MaterialExpression { 
	R: number;
	static Load(ResourceName: string): MaterialExpressionConstant;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstant;
	static GetDefaultObject(): MaterialExpressionConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstant;
	static C(Other: UObject | any): MaterialExpressionConstant;
}

declare class MaterialExpressionConstant2Vector extends MaterialExpression { 
	R: number;
	G: number;
	static Load(ResourceName: string): MaterialExpressionConstant2Vector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstant2Vector;
	static GetDefaultObject(): MaterialExpressionConstant2Vector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstant2Vector;
	static C(Other: UObject | any): MaterialExpressionConstant2Vector;
}

declare class MaterialExpressionConstant3Vector extends MaterialExpression { 
	Constant: LinearColor;
	static Load(ResourceName: string): MaterialExpressionConstant3Vector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstant3Vector;
	static GetDefaultObject(): MaterialExpressionConstant3Vector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstant3Vector;
	static C(Other: UObject | any): MaterialExpressionConstant3Vector;
}

declare class MaterialExpressionConstant4Vector extends MaterialExpression { 
	Constant: LinearColor;
	static Load(ResourceName: string): MaterialExpressionConstant4Vector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstant4Vector;
	static GetDefaultObject(): MaterialExpressionConstant4Vector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstant4Vector;
	static C(Other: UObject | any): MaterialExpressionConstant4Vector;
}

declare class MaterialExpressionConstantBiasScale extends MaterialExpression { 
	Input: ExpressionInput;
	Bias: number;
	Scale: number;
	static Load(ResourceName: string): MaterialExpressionConstantBiasScale;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstantBiasScale;
	static GetDefaultObject(): MaterialExpressionConstantBiasScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstantBiasScale;
	static C(Other: UObject | any): MaterialExpressionConstantBiasScale;
}

declare class MaterialExpressionCosine extends MaterialExpression { 
	Input: ExpressionInput;
	Period: number;
	static Load(ResourceName: string): MaterialExpressionCosine;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCosine;
	static GetDefaultObject(): MaterialExpressionCosine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCosine;
	static C(Other: UObject | any): MaterialExpressionCosine;
}

declare class MaterialExpressionCrossProduct extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionCrossProduct;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCrossProduct;
	static GetDefaultObject(): MaterialExpressionCrossProduct;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCrossProduct;
	static C(Other: UObject | any): MaterialExpressionCrossProduct;
}

declare class MaterialExpressionScalarParameter extends MaterialExpressionParameter { 
	DefaultValue: number;
	bUseCustomPrimitiveData: boolean;
	PrimitiveDataIndex: number;
	SliderMin: number;
	SliderMax: number;
	static Load(ResourceName: string): MaterialExpressionScalarParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionScalarParameter;
	static GetDefaultObject(): MaterialExpressionScalarParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionScalarParameter;
	static C(Other: UObject | any): MaterialExpressionScalarParameter;
}

declare class MaterialExpressionCurveAtlasRowParameter extends MaterialExpressionScalarParameter { 
	Curve: CurveLinearColor;
	Atlas: CurveLinearColorAtlas;
	InputTime: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionCurveAtlasRowParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCurveAtlasRowParameter;
	static GetDefaultObject(): MaterialExpressionCurveAtlasRowParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCurveAtlasRowParameter;
	static C(Other: UObject | any): MaterialExpressionCurveAtlasRowParameter;
}

declare type ECustomMaterialOutputType = 'CMOT_Float1' | 'CMOT_Float2' | 'CMOT_Float3' | 'CMOT_Float4' | 'CMOT_MaterialAttributes' | 'CMOT_MAX';
declare var ECustomMaterialOutputType : { CMOT_Float1:'CMOT_Float1',CMOT_Float2:'CMOT_Float2',CMOT_Float3:'CMOT_Float3',CMOT_Float4:'CMOT_Float4',CMOT_MaterialAttributes:'CMOT_MaterialAttributes',CMOT_MAX:'CMOT_MAX', };
declare class CustomInput { 
	InputName: string;
	Input: ExpressionInput;
	clone() : CustomInput;
	static C(Other: UObject | any): CustomInput;
}

declare class CustomOutput { 
	OutputName: string;
	OutputType: ECustomMaterialOutputType;
	clone() : CustomOutput;
	static C(Other: UObject | any): CustomOutput;
}

declare class CustomDefine { 
	DefineName: string;
	DefineValue: string;
	clone() : CustomDefine;
	static C(Other: UObject | any): CustomDefine;
}

declare class MaterialExpressionCustom extends MaterialExpression { 
	Code: string;
	OutputType: ECustomMaterialOutputType;
	Description: string;
	Inputs: CustomInput[];
	AdditionalOutputs: CustomOutput[];
	AdditionalDefines: CustomDefine[];
	IncludeFilePaths: string[];
	static Load(ResourceName: string): MaterialExpressionCustom;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCustom;
	static GetDefaultObject(): MaterialExpressionCustom;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCustom;
	static C(Other: UObject | any): MaterialExpressionCustom;
}

declare class MaterialExpressionDDX extends MaterialExpression { 
	Value: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDDX;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDDX;
	static GetDefaultObject(): MaterialExpressionDDX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDDX;
	static C(Other: UObject | any): MaterialExpressionDDX;
}

declare class MaterialExpressionDDY extends MaterialExpression { 
	Value: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDDY;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDDY;
	static GetDefaultObject(): MaterialExpressionDDY;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDDY;
	static C(Other: UObject | any): MaterialExpressionDDY;
}

declare class MaterialExpressionDecalDerivative extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionDecalDerivative;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDecalDerivative;
	static GetDefaultObject(): MaterialExpressionDecalDerivative;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDecalDerivative;
	static C(Other: UObject | any): MaterialExpressionDecalDerivative;
}

declare class MaterialExpressionDecalLifetimeOpacity extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionDecalLifetimeOpacity;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDecalLifetimeOpacity;
	static GetDefaultObject(): MaterialExpressionDecalLifetimeOpacity;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDecalLifetimeOpacity;
	static C(Other: UObject | any): MaterialExpressionDecalLifetimeOpacity;
}

declare class MaterialExpressionDecalMipmapLevel extends MaterialExpression { 
	TextureSize: ExpressionInput;
	ConstWidth: number;
	ConstHeight: number;
	static Load(ResourceName: string): MaterialExpressionDecalMipmapLevel;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDecalMipmapLevel;
	static GetDefaultObject(): MaterialExpressionDecalMipmapLevel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDecalMipmapLevel;
	static C(Other: UObject | any): MaterialExpressionDecalMipmapLevel;
}

declare class MaterialExpressionDeltaTime extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionDeltaTime;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDeltaTime;
	static GetDefaultObject(): MaterialExpressionDeltaTime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDeltaTime;
	static C(Other: UObject | any): MaterialExpressionDeltaTime;
}

declare class MaterialExpressionDepthFade extends MaterialExpression { 
	InOpacity: ExpressionInput;
	FadeDistance: ExpressionInput;
	OpacityDefault: number;
	FadeDistanceDefault: number;
	static Load(ResourceName: string): MaterialExpressionDepthFade;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDepthFade;
	static GetDefaultObject(): MaterialExpressionDepthFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDepthFade;
	static C(Other: UObject | any): MaterialExpressionDepthFade;
}

declare type EDepthOfFieldFunctionValue = 'TDOF_NearAndFarMask' | 'TDOF_NearMask' | 'TDOF_FarMask' | 'TDOF_CircleOfConfusionRadius' | 'TDOF_MAX';
declare var EDepthOfFieldFunctionValue : { TDOF_NearAndFarMask:'TDOF_NearAndFarMask',TDOF_NearMask:'TDOF_NearMask',TDOF_FarMask:'TDOF_FarMask',TDOF_CircleOfConfusionRadius:'TDOF_CircleOfConfusionRadius',TDOF_MAX:'TDOF_MAX', };
declare class MaterialExpressionDepthOfFieldFunction extends MaterialExpression { 
	FunctionValue: EDepthOfFieldFunctionValue;
	Depth: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDepthOfFieldFunction;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDepthOfFieldFunction;
	static GetDefaultObject(): MaterialExpressionDepthOfFieldFunction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDepthOfFieldFunction;
	static C(Other: UObject | any): MaterialExpressionDepthOfFieldFunction;
}

declare class MaterialExpressionDeriveNormalZ extends MaterialExpression { 
	InXY: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDeriveNormalZ;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDeriveNormalZ;
	static GetDefaultObject(): MaterialExpressionDeriveNormalZ;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDeriveNormalZ;
	static C(Other: UObject | any): MaterialExpressionDeriveNormalZ;
}

declare class MaterialExpressionDesaturation extends MaterialExpression { 
	Input: ExpressionInput;
	Fraction: ExpressionInput;
	LuminanceFactors: LinearColor;
	static Load(ResourceName: string): MaterialExpressionDesaturation;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDesaturation;
	static GetDefaultObject(): MaterialExpressionDesaturation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDesaturation;
	static C(Other: UObject | any): MaterialExpressionDesaturation;
}

declare class MaterialExpressionDistance extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDistance;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDistance;
	static GetDefaultObject(): MaterialExpressionDistance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDistance;
	static C(Other: UObject | any): MaterialExpressionDistance;
}

declare class MaterialExpressionDistanceCullFade extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionDistanceCullFade;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDistanceCullFade;
	static GetDefaultObject(): MaterialExpressionDistanceCullFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDistanceCullFade;
	static C(Other: UObject | any): MaterialExpressionDistanceCullFade;
}

declare class MaterialExpressionDistanceFieldGradient extends MaterialExpression { 
	Position: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDistanceFieldGradient;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDistanceFieldGradient;
	static GetDefaultObject(): MaterialExpressionDistanceFieldGradient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDistanceFieldGradient;
	static C(Other: UObject | any): MaterialExpressionDistanceFieldGradient;
}

declare class MaterialExpressionDistanceFieldsRenderingSwitch extends MaterialExpression { 
	No: ExpressionInput;
	Yes: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDistanceFieldsRenderingSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDistanceFieldsRenderingSwitch;
	static GetDefaultObject(): MaterialExpressionDistanceFieldsRenderingSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDistanceFieldsRenderingSwitch;
	static C(Other: UObject | any): MaterialExpressionDistanceFieldsRenderingSwitch;
}

declare class MaterialExpressionDistanceToNearestSurface extends MaterialExpression { 
	Position: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDistanceToNearestSurface;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDistanceToNearestSurface;
	static GetDefaultObject(): MaterialExpressionDistanceToNearestSurface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDistanceToNearestSurface;
	static C(Other: UObject | any): MaterialExpressionDistanceToNearestSurface;
}

declare class MaterialExpressionDivide extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	static Load(ResourceName: string): MaterialExpressionDivide;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDivide;
	static GetDefaultObject(): MaterialExpressionDivide;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDivide;
	static C(Other: UObject | any): MaterialExpressionDivide;
}

declare class MaterialExpressionDotProduct extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDotProduct;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDotProduct;
	static GetDefaultObject(): MaterialExpressionDotProduct;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDotProduct;
	static C(Other: UObject | any): MaterialExpressionDotProduct;
}

declare class MaterialExpressionDynamicParameter extends MaterialExpression { 
	ParamNames: string[];
	DefaultValue: LinearColor;
	ParameterIndex: any;
	static Load(ResourceName: string): MaterialExpressionDynamicParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDynamicParameter;
	static GetDefaultObject(): MaterialExpressionDynamicParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDynamicParameter;
	static C(Other: UObject | any): MaterialExpressionDynamicParameter;
}

declare class MaterialExpressionEyeAdaptation extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionEyeAdaptation;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionEyeAdaptation;
	static GetDefaultObject(): MaterialExpressionEyeAdaptation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionEyeAdaptation;
	static C(Other: UObject | any): MaterialExpressionEyeAdaptation;
}

declare class MaterialExpressionFeatureLevelSwitch extends MaterialExpression { 
	Default: ExpressionInput;
	Inputs: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionFeatureLevelSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFeatureLevelSwitch;
	static GetDefaultObject(): MaterialExpressionFeatureLevelSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFeatureLevelSwitch;
	static C(Other: UObject | any): MaterialExpressionFeatureLevelSwitch;
}

declare class MaterialExpressionFloor extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionFloor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFloor;
	static GetDefaultObject(): MaterialExpressionFloor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFloor;
	static C(Other: UObject | any): MaterialExpressionFloor;
}

declare class MaterialExpressionFmod extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionFmod;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFmod;
	static GetDefaultObject(): MaterialExpressionFmod;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFmod;
	static C(Other: UObject | any): MaterialExpressionFmod;
}

declare class MaterialExpressionFontSample extends MaterialExpression { 
	Font: Font;
	FontTexturePage: number;
	static Load(ResourceName: string): MaterialExpressionFontSample;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFontSample;
	static GetDefaultObject(): MaterialExpressionFontSample;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFontSample;
	static C(Other: UObject | any): MaterialExpressionFontSample;
}

declare class MaterialExpressionFontSampleParameter extends MaterialExpressionFontSample { 
	ParameterName: string;
	ExpressionGUID: Guid;
	Group: string;
	SortPriority: number;
	static Load(ResourceName: string): MaterialExpressionFontSampleParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFontSampleParameter;
	static GetDefaultObject(): MaterialExpressionFontSampleParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFontSampleParameter;
	static C(Other: UObject | any): MaterialExpressionFontSampleParameter;
}

declare class MaterialExpressionFrac extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionFrac;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFrac;
	static GetDefaultObject(): MaterialExpressionFrac;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFrac;
	static C(Other: UObject | any): MaterialExpressionFrac;
}

declare class MaterialExpressionFresnel extends MaterialExpression { 
	ExponentIn: ExpressionInput;
	Exponent: number;
	BaseReflectFractionIn: ExpressionInput;
	BaseReflectFraction: number;
	Normal: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionFresnel;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFresnel;
	static GetDefaultObject(): MaterialExpressionFresnel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFresnel;
	static C(Other: UObject | any): MaterialExpressionFresnel;
}

declare class MaterialExpressionGetMaterialAttributes extends MaterialExpression { 
	MaterialAttributes: MaterialAttributesInput;
	AttributeGetTypes: Guid[];
	static Load(ResourceName: string): MaterialExpressionGetMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionGetMaterialAttributes;
	static GetDefaultObject(): MaterialExpressionGetMaterialAttributes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionGetMaterialAttributes;
	static C(Other: UObject | any): MaterialExpressionGetMaterialAttributes;
}

declare class MaterialExpressionGIReplace extends MaterialExpression { 
	Default: ExpressionInput;
	StaticIndirect: ExpressionInput;
	DynamicIndirect: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionGIReplace;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionGIReplace;
	static GetDefaultObject(): MaterialExpressionGIReplace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionGIReplace;
	static C(Other: UObject | any): MaterialExpressionGIReplace;
}

declare class MaterialExpressionHairAttributes extends MaterialExpression { 
	bUseTangentSpace: boolean;
	static Load(ResourceName: string): MaterialExpressionHairAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionHairAttributes;
	static GetDefaultObject(): MaterialExpressionHairAttributes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionHairAttributes;
	static C(Other: UObject | any): MaterialExpressionHairAttributes;
}

declare class MaterialExpressionHairColor extends MaterialExpression { 
	Melanin: ExpressionInput;
	Redness: ExpressionInput;
	DyeColor: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionHairColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionHairColor;
	static GetDefaultObject(): MaterialExpressionHairColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionHairColor;
	static C(Other: UObject | any): MaterialExpressionHairColor;
}

declare class MaterialExpressionIf extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	AGreaterThanB: ExpressionInput;
	AEqualsB: ExpressionInput;
	ALessThanB: ExpressionInput;
	EqualsThreshold: number;
	ConstB: number;
	ConstAEqualsB: number;
	static Load(ResourceName: string): MaterialExpressionIf;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionIf;
	static GetDefaultObject(): MaterialExpressionIf;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionIf;
	static C(Other: UObject | any): MaterialExpressionIf;
}

declare class MaterialExpressionInverseLinearInterpolate extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	Value: ExpressionInput;
	ConstA: number;
	ConstB: number;
	ConstValue: number;
	bClampResult: boolean;
	static Load(ResourceName: string): MaterialExpressionInverseLinearInterpolate;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionInverseLinearInterpolate;
	static GetDefaultObject(): MaterialExpressionInverseLinearInterpolate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionInverseLinearInterpolate;
	static C(Other: UObject | any): MaterialExpressionInverseLinearInterpolate;
}

declare class MaterialExpressionLightmapUVs extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionLightmapUVs;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLightmapUVs;
	static GetDefaultObject(): MaterialExpressionLightmapUVs;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLightmapUVs;
	static C(Other: UObject | any): MaterialExpressionLightmapUVs;
}

declare class MaterialExpressionLightmassReplace extends MaterialExpression { 
	Realtime: ExpressionInput;
	Lightmass: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionLightmassReplace;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLightmassReplace;
	static GetDefaultObject(): MaterialExpressionLightmassReplace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLightmassReplace;
	static C(Other: UObject | any): MaterialExpressionLightmassReplace;
}

declare class MaterialExpressionLightVector extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionLightVector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLightVector;
	static GetDefaultObject(): MaterialExpressionLightVector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLightVector;
	static C(Other: UObject | any): MaterialExpressionLightVector;
}

declare class MaterialExpressionLinearInterpolate extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	Alpha: ExpressionInput;
	ConstA: number;
	ConstB: number;
	ConstAlpha: number;
	static Load(ResourceName: string): MaterialExpressionLinearInterpolate;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLinearInterpolate;
	static GetDefaultObject(): MaterialExpressionLinearInterpolate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLinearInterpolate;
	static C(Other: UObject | any): MaterialExpressionLinearInterpolate;
}

declare class MaterialExpressionLogarithm10 extends MaterialExpression { 
	X: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionLogarithm10;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLogarithm10;
	static GetDefaultObject(): MaterialExpressionLogarithm10;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLogarithm10;
	static C(Other: UObject | any): MaterialExpressionLogarithm10;
}

declare class MaterialExpressionLogarithm2 extends MaterialExpression { 
	X: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionLogarithm2;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLogarithm2;
	static GetDefaultObject(): MaterialExpressionLogarithm2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLogarithm2;
	static C(Other: UObject | any): MaterialExpressionLogarithm2;
}

declare class MaterialExpressionMakeMaterialAttributes extends MaterialExpression { 
	BaseColor: ExpressionInput;
	Metallic: ExpressionInput;
	Specular: ExpressionInput;
	Roughness: ExpressionInput;
	Anisotropy: ExpressionInput;
	EmissiveColor: ExpressionInput;
	Opacity: ExpressionInput;
	OpacityMask: ExpressionInput;
	Normal: ExpressionInput;
	Tangent: ExpressionInput;
	WorldPositionOffset: ExpressionInput;
	WorldDisplacement: ExpressionInput;
	TessellationMultiplier: ExpressionInput;
	SubsurfaceColor: ExpressionInput;
	ClearCoat: ExpressionInput;
	ClearCoatRoughness: ExpressionInput;
	AmbientOcclusion: ExpressionInput;
	Refraction: ExpressionInput;
	CustomizedUVs: ExpressionInput;
	PixelDepthOffset: ExpressionInput;
	ShadingModel: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionMakeMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMakeMaterialAttributes;
	static GetDefaultObject(): MaterialExpressionMakeMaterialAttributes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMakeMaterialAttributes;
	static C(Other: UObject | any): MaterialExpressionMakeMaterialAttributes;
}

declare class MaterialExpressionMapARPassthroughCameraUV extends MaterialExpression { 
	Coordinates: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionMapARPassthroughCameraUV;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMapARPassthroughCameraUV;
	static GetDefaultObject(): MaterialExpressionMapARPassthroughCameraUV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMapARPassthroughCameraUV;
	static C(Other: UObject | any): MaterialExpressionMapARPassthroughCameraUV;
}

declare class MaterialExpressionMaterialAttributeLayers extends MaterialExpression { 
	ParameterName: string;
	ExpressionGUID: Guid;
	Input: MaterialAttributesInput;
	DefaultLayers: MaterialLayersFunctions;
	LayerCallers: MaterialExpressionMaterialFunctionCall[];
	NumActiveLayerCallers: number;
	BlendCallers: MaterialExpressionMaterialFunctionCall[];
	NumActiveBlendCallers: number;
	bIsLayerGraphBuilt: boolean;
	static Load(ResourceName: string): MaterialExpressionMaterialAttributeLayers;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMaterialAttributeLayers;
	static GetDefaultObject(): MaterialExpressionMaterialAttributeLayers;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMaterialAttributeLayers;
	static C(Other: UObject | any): MaterialExpressionMaterialAttributeLayers;
}

declare class MaterialExpressionMaterialLayerOutput extends MaterialExpressionFunctionOutput { 
	static Load(ResourceName: string): MaterialExpressionMaterialLayerOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMaterialLayerOutput;
	static GetDefaultObject(): MaterialExpressionMaterialLayerOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMaterialLayerOutput;
	static C(Other: UObject | any): MaterialExpressionMaterialLayerOutput;
}

declare class MaterialExpressionMaterialProxyReplace extends MaterialExpression { 
	Realtime: ExpressionInput;
	MaterialProxy: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionMaterialProxyReplace;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMaterialProxyReplace;
	static GetDefaultObject(): MaterialExpressionMaterialProxyReplace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMaterialProxyReplace;
	static C(Other: UObject | any): MaterialExpressionMaterialProxyReplace;
}

declare class MaterialExpressionMax extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	static Load(ResourceName: string): MaterialExpressionMax;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMax;
	static GetDefaultObject(): MaterialExpressionMax;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMax;
	static C(Other: UObject | any): MaterialExpressionMax;
}

declare class MaterialExpressionMin extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	static Load(ResourceName: string): MaterialExpressionMin;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMin;
	static GetDefaultObject(): MaterialExpressionMin;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMin;
	static C(Other: UObject | any): MaterialExpressionMin;
}

declare class MaterialExpressionMultiply extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	static Load(ResourceName: string): MaterialExpressionMultiply;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMultiply;
	static GetDefaultObject(): MaterialExpressionMultiply;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMultiply;
	static C(Other: UObject | any): MaterialExpressionMultiply;
}

declare class MaterialExpressionRerouteBase extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionRerouteBase;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRerouteBase;
	static GetDefaultObject(): MaterialExpressionRerouteBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRerouteBase;
	static C(Other: UObject | any): MaterialExpressionRerouteBase;
}

declare class MaterialExpressionNamedRerouteBase extends MaterialExpressionRerouteBase { 
	static Load(ResourceName: string): MaterialExpressionNamedRerouteBase;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionNamedRerouteBase;
	static GetDefaultObject(): MaterialExpressionNamedRerouteBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionNamedRerouteBase;
	static C(Other: UObject | any): MaterialExpressionNamedRerouteBase;
}

declare class MaterialExpressionNamedRerouteDeclaration extends MaterialExpressionNamedRerouteBase { 
	Input: ExpressionInput;
	Name: string;
	NodeColor: LinearColor;
	VariableGuid: Guid;
	static Load(ResourceName: string): MaterialExpressionNamedRerouteDeclaration;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionNamedRerouteDeclaration;
	static GetDefaultObject(): MaterialExpressionNamedRerouteDeclaration;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionNamedRerouteDeclaration;
	static C(Other: UObject | any): MaterialExpressionNamedRerouteDeclaration;
}

declare class MaterialExpressionNamedRerouteUsage extends MaterialExpressionNamedRerouteBase { 
	Declaration: MaterialExpressionNamedRerouteDeclaration;
	DeclarationGuid: Guid;
	static Load(ResourceName: string): MaterialExpressionNamedRerouteUsage;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionNamedRerouteUsage;
	static GetDefaultObject(): MaterialExpressionNamedRerouteUsage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionNamedRerouteUsage;
	static C(Other: UObject | any): MaterialExpressionNamedRerouteUsage;
}

declare type ENoiseFunction = 'NOISEFUNCTION_SimplexTex' | 'NOISEFUNCTION_GradientTex' | 'NOISEFUNCTION_GradientTex3D' | 'NOISEFUNCTION_GradientALU' | 'NOISEFUNCTION_ValueALU' | 'NOISEFUNCTION_VoronoiALU' | 'NOISEFUNCTION_MAX';
declare var ENoiseFunction : { NOISEFUNCTION_SimplexTex:'NOISEFUNCTION_SimplexTex',NOISEFUNCTION_GradientTex:'NOISEFUNCTION_GradientTex',NOISEFUNCTION_GradientTex3D:'NOISEFUNCTION_GradientTex3D',NOISEFUNCTION_GradientALU:'NOISEFUNCTION_GradientALU',NOISEFUNCTION_ValueALU:'NOISEFUNCTION_ValueALU',NOISEFUNCTION_VoronoiALU:'NOISEFUNCTION_VoronoiALU',NOISEFUNCTION_MAX:'NOISEFUNCTION_MAX', };
declare class MaterialExpressionNoise extends MaterialExpression { 
	Position: ExpressionInput;
	FilterWidth: ExpressionInput;
	Scale: number;
	Quality: number;
	NoiseFunction: ENoiseFunction;
	bTurbulence: boolean;
	Levels: number;
	OutputMin: number;
	OutputMax: number;
	LevelScale: number;
	bTiling: boolean;
	RepeatSize: any;
	static Load(ResourceName: string): MaterialExpressionNoise;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionNoise;
	static GetDefaultObject(): MaterialExpressionNoise;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionNoise;
	static C(Other: UObject | any): MaterialExpressionNoise;
}

declare class MaterialExpressionNormalize extends MaterialExpression { 
	VectorInput: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionNormalize;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionNormalize;
	static GetDefaultObject(): MaterialExpressionNormalize;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionNormalize;
	static C(Other: UObject | any): MaterialExpressionNormalize;
}

declare class MaterialExpressionObjectBounds extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionObjectBounds;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionObjectBounds;
	static GetDefaultObject(): MaterialExpressionObjectBounds;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionObjectBounds;
	static C(Other: UObject | any): MaterialExpressionObjectBounds;
}

declare class MaterialExpressionObjectOrientation extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionObjectOrientation;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionObjectOrientation;
	static GetDefaultObject(): MaterialExpressionObjectOrientation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionObjectOrientation;
	static C(Other: UObject | any): MaterialExpressionObjectOrientation;
}

declare class MaterialExpressionObjectPositionWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionObjectPositionWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionObjectPositionWS;
	static GetDefaultObject(): MaterialExpressionObjectPositionWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionObjectPositionWS;
	static C(Other: UObject | any): MaterialExpressionObjectPositionWS;
}

declare class MaterialExpressionObjectRadius extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionObjectRadius;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionObjectRadius;
	static GetDefaultObject(): MaterialExpressionObjectRadius;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionObjectRadius;
	static C(Other: UObject | any): MaterialExpressionObjectRadius;
}

declare class MaterialExpressionOneMinus extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionOneMinus;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionOneMinus;
	static GetDefaultObject(): MaterialExpressionOneMinus;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionOneMinus;
	static C(Other: UObject | any): MaterialExpressionOneMinus;
}

declare class MaterialExpressionPanner extends MaterialExpression { 
	Coordinate: ExpressionInput;
	Time: ExpressionInput;
	Speed: ExpressionInput;
	SpeedX: number;
	SpeedY: number;
	ConstCoordinate: any;
	bFractionalPart: boolean;
	static Load(ResourceName: string): MaterialExpressionPanner;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPanner;
	static GetDefaultObject(): MaterialExpressionPanner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPanner;
	static C(Other: UObject | any): MaterialExpressionPanner;
}

declare class MaterialExpressionParticleColor extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleColor;
	static GetDefaultObject(): MaterialExpressionParticleColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleColor;
	static C(Other: UObject | any): MaterialExpressionParticleColor;
}

declare class MaterialExpressionParticleDirection extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleDirection;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleDirection;
	static GetDefaultObject(): MaterialExpressionParticleDirection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleDirection;
	static C(Other: UObject | any): MaterialExpressionParticleDirection;
}

declare class MaterialExpressionParticleMacroUV extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleMacroUV;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleMacroUV;
	static GetDefaultObject(): MaterialExpressionParticleMacroUV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleMacroUV;
	static C(Other: UObject | any): MaterialExpressionParticleMacroUV;
}

declare class MaterialExpressionParticleMotionBlurFade extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleMotionBlurFade;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleMotionBlurFade;
	static GetDefaultObject(): MaterialExpressionParticleMotionBlurFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleMotionBlurFade;
	static C(Other: UObject | any): MaterialExpressionParticleMotionBlurFade;
}

declare class MaterialExpressionParticlePositionWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticlePositionWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticlePositionWS;
	static GetDefaultObject(): MaterialExpressionParticlePositionWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticlePositionWS;
	static C(Other: UObject | any): MaterialExpressionParticlePositionWS;
}

declare class MaterialExpressionParticleRadius extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleRadius;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleRadius;
	static GetDefaultObject(): MaterialExpressionParticleRadius;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleRadius;
	static C(Other: UObject | any): MaterialExpressionParticleRadius;
}

declare class MaterialExpressionParticleRandom extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleRandom;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleRandom;
	static GetDefaultObject(): MaterialExpressionParticleRandom;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleRandom;
	static C(Other: UObject | any): MaterialExpressionParticleRandom;
}

declare class MaterialExpressionParticleRelativeTime extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleRelativeTime;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleRelativeTime;
	static GetDefaultObject(): MaterialExpressionParticleRelativeTime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleRelativeTime;
	static C(Other: UObject | any): MaterialExpressionParticleRelativeTime;
}

declare class MaterialExpressionParticleSize extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleSize;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleSize;
	static GetDefaultObject(): MaterialExpressionParticleSize;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleSize;
	static C(Other: UObject | any): MaterialExpressionParticleSize;
}

declare class MaterialExpressionParticleSpeed extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleSpeed;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleSpeed;
	static GetDefaultObject(): MaterialExpressionParticleSpeed;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleSpeed;
	static C(Other: UObject | any): MaterialExpressionParticleSpeed;
}

declare class MaterialExpressionParticleSubUV extends MaterialExpressionTextureSample { 
	bBlend: boolean;
	static Load(ResourceName: string): MaterialExpressionParticleSubUV;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleSubUV;
	static GetDefaultObject(): MaterialExpressionParticleSubUV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleSubUV;
	static C(Other: UObject | any): MaterialExpressionParticleSubUV;
}

declare class MaterialExpressionParticleSubUVProperties extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleSubUVProperties;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleSubUVProperties;
	static GetDefaultObject(): MaterialExpressionParticleSubUVProperties;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleSubUVProperties;
	static C(Other: UObject | any): MaterialExpressionParticleSubUVProperties;
}

declare class MaterialExpressionPerInstanceCustomData extends MaterialExpression { 
	DefaultValue: ExpressionInput;
	ConstDefaultValue: number;
	DataIndex: any;
	static Load(ResourceName: string): MaterialExpressionPerInstanceCustomData;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPerInstanceCustomData;
	static GetDefaultObject(): MaterialExpressionPerInstanceCustomData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPerInstanceCustomData;
	static C(Other: UObject | any): MaterialExpressionPerInstanceCustomData;
}

declare class MaterialExpressionPerInstanceFadeAmount extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPerInstanceFadeAmount;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPerInstanceFadeAmount;
	static GetDefaultObject(): MaterialExpressionPerInstanceFadeAmount;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPerInstanceFadeAmount;
	static C(Other: UObject | any): MaterialExpressionPerInstanceFadeAmount;
}

declare class MaterialExpressionPerInstanceRandom extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPerInstanceRandom;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPerInstanceRandom;
	static GetDefaultObject(): MaterialExpressionPerInstanceRandom;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPerInstanceRandom;
	static C(Other: UObject | any): MaterialExpressionPerInstanceRandom;
}

declare class MaterialExpressionPixelDepth extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPixelDepth;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPixelDepth;
	static GetDefaultObject(): MaterialExpressionPixelDepth;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPixelDepth;
	static C(Other: UObject | any): MaterialExpressionPixelDepth;
}

declare class MaterialExpressionPixelNormalWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPixelNormalWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPixelNormalWS;
	static GetDefaultObject(): MaterialExpressionPixelNormalWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPixelNormalWS;
	static C(Other: UObject | any): MaterialExpressionPixelNormalWS;
}

declare class MaterialExpressionPower extends MaterialExpression { 
	Base: ExpressionInput;
	Exponent: ExpressionInput;
	ConstExponent: number;
	static Load(ResourceName: string): MaterialExpressionPower;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPower;
	static GetDefaultObject(): MaterialExpressionPower;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPower;
	static C(Other: UObject | any): MaterialExpressionPower;
}

declare class MaterialExpressionPrecomputedAOMask extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPrecomputedAOMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPrecomputedAOMask;
	static GetDefaultObject(): MaterialExpressionPrecomputedAOMask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPrecomputedAOMask;
	static C(Other: UObject | any): MaterialExpressionPrecomputedAOMask;
}

declare class MaterialExpressionPreSkinnedLocalBounds extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPreSkinnedLocalBounds;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPreSkinnedLocalBounds;
	static GetDefaultObject(): MaterialExpressionPreSkinnedLocalBounds;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPreSkinnedLocalBounds;
	static C(Other: UObject | any): MaterialExpressionPreSkinnedLocalBounds;
}

declare class MaterialExpressionPreSkinnedNormal extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPreSkinnedNormal;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPreSkinnedNormal;
	static GetDefaultObject(): MaterialExpressionPreSkinnedNormal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPreSkinnedNormal;
	static C(Other: UObject | any): MaterialExpressionPreSkinnedNormal;
}

declare class MaterialExpressionPreSkinnedPosition extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPreSkinnedPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPreSkinnedPosition;
	static GetDefaultObject(): MaterialExpressionPreSkinnedPosition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPreSkinnedPosition;
	static C(Other: UObject | any): MaterialExpressionPreSkinnedPosition;
}

declare class MaterialExpressionPreviousFrameSwitch extends MaterialExpression { 
	CurrentFrame: ExpressionInput;
	PreviousFrame: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionPreviousFrameSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPreviousFrameSwitch;
	static GetDefaultObject(): MaterialExpressionPreviousFrameSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPreviousFrameSwitch;
	static C(Other: UObject | any): MaterialExpressionPreviousFrameSwitch;
}

declare class MaterialExpressionQualitySwitch extends MaterialExpression { 
	Default: ExpressionInput;
	Inputs: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionQualitySwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionQualitySwitch;
	static GetDefaultObject(): MaterialExpressionQualitySwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionQualitySwitch;
	static C(Other: UObject | any): MaterialExpressionQualitySwitch;
}

declare class MaterialExpressionRayTracingQualitySwitch extends MaterialExpression { 
	Normal: ExpressionInput;
	RayTraced: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionRayTracingQualitySwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRayTracingQualitySwitch;
	static GetDefaultObject(): MaterialExpressionRayTracingQualitySwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRayTracingQualitySwitch;
	static C(Other: UObject | any): MaterialExpressionRayTracingQualitySwitch;
}

declare class MaterialExpressionReflectionCapturePassSwitch extends MaterialExpression { 
	Default: ExpressionInput;
	Reflection: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionReflectionCapturePassSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionReflectionCapturePassSwitch;
	static GetDefaultObject(): MaterialExpressionReflectionCapturePassSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionReflectionCapturePassSwitch;
	static C(Other: UObject | any): MaterialExpressionReflectionCapturePassSwitch;
}

declare class MaterialExpressionReflectionVectorWS extends MaterialExpression { 
	CustomWorldNormal: ExpressionInput;
	bNormalizeCustomWorldNormal: boolean;
	static Load(ResourceName: string): MaterialExpressionReflectionVectorWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionReflectionVectorWS;
	static GetDefaultObject(): MaterialExpressionReflectionVectorWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionReflectionVectorWS;
	static C(Other: UObject | any): MaterialExpressionReflectionVectorWS;
}

declare class MaterialExpressionReroute extends MaterialExpressionRerouteBase { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionReroute;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionReroute;
	static GetDefaultObject(): MaterialExpressionReroute;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionReroute;
	static C(Other: UObject | any): MaterialExpressionReroute;
}

declare class MaterialExpressionRotateAboutAxis extends MaterialExpression { 
	NormalizedRotationAxis: ExpressionInput;
	RotationAngle: ExpressionInput;
	PivotPoint: ExpressionInput;
	Position: ExpressionInput;
	Period: number;
	static Load(ResourceName: string): MaterialExpressionRotateAboutAxis;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRotateAboutAxis;
	static GetDefaultObject(): MaterialExpressionRotateAboutAxis;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRotateAboutAxis;
	static C(Other: UObject | any): MaterialExpressionRotateAboutAxis;
}

declare class MaterialExpressionRotator extends MaterialExpression { 
	Coordinate: ExpressionInput;
	Time: ExpressionInput;
	CenterX: number;
	CenterY: number;
	Speed: number;
	ConstCoordinate: any;
	static Load(ResourceName: string): MaterialExpressionRotator;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRotator;
	static GetDefaultObject(): MaterialExpressionRotator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRotator;
	static C(Other: UObject | any): MaterialExpressionRotator;
}

declare class MaterialExpressionRound extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionRound;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRound;
	static GetDefaultObject(): MaterialExpressionRound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRound;
	static C(Other: UObject | any): MaterialExpressionRound;
}

declare class MaterialExpressionRuntimeVirtualTextureOutput extends MaterialExpressionCustomOutput { 
	BaseColor: ExpressionInput;
	Specular: ExpressionInput;
	Roughness: ExpressionInput;
	Normal: ExpressionInput;
	WorldHeight: ExpressionInput;
	Opacity: ExpressionInput;
	mask: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionRuntimeVirtualTextureOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRuntimeVirtualTextureOutput;
	static GetDefaultObject(): MaterialExpressionRuntimeVirtualTextureOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRuntimeVirtualTextureOutput;
	static C(Other: UObject | any): MaterialExpressionRuntimeVirtualTextureOutput;
}

declare class MaterialExpressionRuntimeVirtualTextureReplace extends MaterialExpression { 
	Default: ExpressionInput;
	VirtualTextureOutput: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionRuntimeVirtualTextureReplace;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRuntimeVirtualTextureReplace;
	static GetDefaultObject(): MaterialExpressionRuntimeVirtualTextureReplace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRuntimeVirtualTextureReplace;
	static C(Other: UObject | any): MaterialExpressionRuntimeVirtualTextureReplace;
}

declare type ERuntimeVirtualTextureMipValueMode = 'RVTMVM_None' | 'RVTMVM_MipLevel' | 'RVTMVM_MipBias' | 'RVTMVM_MAX';
declare var ERuntimeVirtualTextureMipValueMode : { RVTMVM_None:'RVTMVM_None',RVTMVM_MipLevel:'RVTMVM_MipLevel',RVTMVM_MipBias:'RVTMVM_MipBias',RVTMVM_MAX:'RVTMVM_MAX', };
declare type ERuntimeVirtualTextureTextureAddressMode = 'RVTTA_Clamp' | 'RVTTA_Wrap' | 'RVTTA_MAX';
declare var ERuntimeVirtualTextureTextureAddressMode : { RVTTA_Clamp:'RVTTA_Clamp',RVTTA_Wrap:'RVTTA_Wrap',RVTTA_MAX:'RVTTA_MAX', };
declare class MaterialExpressionRuntimeVirtualTextureSample extends MaterialExpression { 
	Coordinates: ExpressionInput;
	WorldPosition: ExpressionInput;
	MipValue: ExpressionInput;
	VirtualTexture: RuntimeVirtualTexture;
	MaterialType: ERuntimeVirtualTextureMaterialType;
	bSinglePhysicalSpace: boolean;
	bAdaptive: boolean;
	MipValueMode: ERuntimeVirtualTextureMipValueMode;
	TextureAddressMode: ERuntimeVirtualTextureTextureAddressMode;
	static Load(ResourceName: string): MaterialExpressionRuntimeVirtualTextureSample;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRuntimeVirtualTextureSample;
	static GetDefaultObject(): MaterialExpressionRuntimeVirtualTextureSample;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRuntimeVirtualTextureSample;
	static C(Other: UObject | any): MaterialExpressionRuntimeVirtualTextureSample;
}

declare class MaterialExpressionRuntimeVirtualTextureSampleParameter extends MaterialExpressionRuntimeVirtualTextureSample { 
	ParameterName: string;
	ExpressionGUID: Guid;
	Group: string;
	SortPriority: number;
	static Load(ResourceName: string): MaterialExpressionRuntimeVirtualTextureSampleParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRuntimeVirtualTextureSampleParameter;
	static GetDefaultObject(): MaterialExpressionRuntimeVirtualTextureSampleParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRuntimeVirtualTextureSampleParameter;
	static C(Other: UObject | any): MaterialExpressionRuntimeVirtualTextureSampleParameter;
}

declare type EFieldVectorType = 'Vector_LinearForce' | 'Vector_LinearVelocity' | 'Vector_AngularVelocity' | 'Vector_AngularTorque' | 'Vector_PositionTarget' | 'Vector_TargetMax' | 'Vector_MAX';
declare var EFieldVectorType : { Vector_LinearForce:'Vector_LinearForce',Vector_LinearVelocity:'Vector_LinearVelocity',Vector_AngularVelocity:'Vector_AngularVelocity',Vector_AngularTorque:'Vector_AngularTorque',Vector_PositionTarget:'Vector_PositionTarget',Vector_TargetMax:'Vector_TargetMax',Vector_MAX:'Vector_MAX', };
declare class MaterialExpressionSamplePhysicsVectorField extends MaterialExpression { 
	WorldPosition: ExpressionInput;
	FieldTarget: EFieldVectorType;
	static Load(ResourceName: string): MaterialExpressionSamplePhysicsVectorField;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSamplePhysicsVectorField;
	static GetDefaultObject(): MaterialExpressionSamplePhysicsVectorField;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSamplePhysicsVectorField;
	static C(Other: UObject | any): MaterialExpressionSamplePhysicsVectorField;
}

declare type EFieldScalarType = 'Scalar_ExternalClusterStrain' | 'Scalar_Kill' | 'Scalar_DisableThreshold' | 'Scalar_SleepingThreshold' | 'Scalar_InternalClusterStrain' | 'Scalar_DynamicConstraint' | 'Scalar_TargetMax' | 'Scalar_MAX';
declare var EFieldScalarType : { Scalar_ExternalClusterStrain:'Scalar_ExternalClusterStrain',Scalar_Kill:'Scalar_Kill',Scalar_DisableThreshold:'Scalar_DisableThreshold',Scalar_SleepingThreshold:'Scalar_SleepingThreshold',Scalar_InternalClusterStrain:'Scalar_InternalClusterStrain',Scalar_DynamicConstraint:'Scalar_DynamicConstraint',Scalar_TargetMax:'Scalar_TargetMax',Scalar_MAX:'Scalar_MAX', };
declare class MaterialExpressionSamplePhysicsScalarField extends MaterialExpression { 
	WorldPosition: ExpressionInput;
	FieldTarget: EFieldScalarType;
	static Load(ResourceName: string): MaterialExpressionSamplePhysicsScalarField;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSamplePhysicsScalarField;
	static GetDefaultObject(): MaterialExpressionSamplePhysicsScalarField;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSamplePhysicsScalarField;
	static C(Other: UObject | any): MaterialExpressionSamplePhysicsScalarField;
}

declare type EFieldIntegerType = 'Integer_DynamicState' | 'Integer_ActivateDisabled' | 'Integer_CollisionGroup' | 'Integer_PositionAnimated' | 'Integer_PositionStatic' | 'Integer_TargetMax' | 'Integer_MAX';
declare var EFieldIntegerType : { Integer_DynamicState:'Integer_DynamicState',Integer_ActivateDisabled:'Integer_ActivateDisabled',Integer_CollisionGroup:'Integer_CollisionGroup',Integer_PositionAnimated:'Integer_PositionAnimated',Integer_PositionStatic:'Integer_PositionStatic',Integer_TargetMax:'Integer_TargetMax',Integer_MAX:'Integer_MAX', };
declare class MaterialExpressionSamplePhysicsIntegerField extends MaterialExpression { 
	WorldPosition: ExpressionInput;
	FieldTarget: EFieldIntegerType;
	static Load(ResourceName: string): MaterialExpressionSamplePhysicsIntegerField;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSamplePhysicsIntegerField;
	static GetDefaultObject(): MaterialExpressionSamplePhysicsIntegerField;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSamplePhysicsIntegerField;
	static C(Other: UObject | any): MaterialExpressionSamplePhysicsIntegerField;
}

declare class MaterialExpressionSaturate extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionSaturate;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSaturate;
	static GetDefaultObject(): MaterialExpressionSaturate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSaturate;
	static C(Other: UObject | any): MaterialExpressionSaturate;
}

declare type EMaterialSceneAttributeInputMode = 'Coordinates' | 'OffsetFraction' | 'EMaterialSceneAttributeInputMode_MAX';
declare var EMaterialSceneAttributeInputMode : { Coordinates:'Coordinates',OffsetFraction:'OffsetFraction',EMaterialSceneAttributeInputMode_MAX:'EMaterialSceneAttributeInputMode_MAX', };
declare class MaterialExpressionSceneColor extends MaterialExpression { 
	InputMode: EMaterialSceneAttributeInputMode;
	Input: ExpressionInput;
	OffsetFraction: ExpressionInput;
	ConstInput: Vector2D;
	static Load(ResourceName: string): MaterialExpressionSceneColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneColor;
	static GetDefaultObject(): MaterialExpressionSceneColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneColor;
	static C(Other: UObject | any): MaterialExpressionSceneColor;
}

declare class MaterialExpressionSceneDepth extends MaterialExpression { 
	InputMode: EMaterialSceneAttributeInputMode;
	Input: ExpressionInput;
	Coordinates: ExpressionInput;
	ConstInput: Vector2D;
	static Load(ResourceName: string): MaterialExpressionSceneDepth;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneDepth;
	static GetDefaultObject(): MaterialExpressionSceneDepth;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneDepth;
	static C(Other: UObject | any): MaterialExpressionSceneDepth;
}

declare class MaterialExpressionSceneDepthWithoutWater extends MaterialExpression { 
	InputMode: EMaterialSceneAttributeInputMode;
	Input: ExpressionInput;
	ConstInput: Vector2D;
	FallbackDepth: number;
	static Load(ResourceName: string): MaterialExpressionSceneDepthWithoutWater;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneDepthWithoutWater;
	static GetDefaultObject(): MaterialExpressionSceneDepthWithoutWater;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneDepthWithoutWater;
	static C(Other: UObject | any): MaterialExpressionSceneDepthWithoutWater;
}

declare class MaterialExpressionSceneTexelSize extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionSceneTexelSize;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneTexelSize;
	static GetDefaultObject(): MaterialExpressionSceneTexelSize;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneTexelSize;
	static C(Other: UObject | any): MaterialExpressionSceneTexelSize;
}

declare type ESceneTextureId = 'PPI_SceneColor' | 'PPI_SceneDepth' | 'PPI_DiffuseColor' | 'PPI_SpecularColor' | 'PPI_SubsurfaceColor' | 'PPI_BaseColor' | 'PPI_Specular' | 'PPI_Metallic' | 'PPI_WorldNormal' | 'PPI_SeparateTranslucency' | 'PPI_Opacity' | 'PPI_Roughness' | 'PPI_MaterialAO' | 'PPI_CustomDepth' | 'PPI_PostProcessInput0' | 'PPI_PostProcessInput1' | 'PPI_PostProcessInput2' | 'PPI_PostProcessInput3' | 'PPI_PostProcessInput4' | 'PPI_PostProcessInput5' | 'PPI_PostProcessInput6' | 'PPI_DecalMask' | 'PPI_ShadingModelColor' | 'PPI_ShadingModelID' | 'PPI_AmbientOcclusion' | 'PPI_CustomStencil' | 'PPI_StoredBaseColor' | 'PPI_StoredSpecular' | 'PPI_Velocity' | 'PPI_WorldTangent' | 'PPI_Anisotropy' | 'PPI_MAX';
declare var ESceneTextureId : { PPI_SceneColor:'PPI_SceneColor',PPI_SceneDepth:'PPI_SceneDepth',PPI_DiffuseColor:'PPI_DiffuseColor',PPI_SpecularColor:'PPI_SpecularColor',PPI_SubsurfaceColor:'PPI_SubsurfaceColor',PPI_BaseColor:'PPI_BaseColor',PPI_Specular:'PPI_Specular',PPI_Metallic:'PPI_Metallic',PPI_WorldNormal:'PPI_WorldNormal',PPI_SeparateTranslucency:'PPI_SeparateTranslucency',PPI_Opacity:'PPI_Opacity',PPI_Roughness:'PPI_Roughness',PPI_MaterialAO:'PPI_MaterialAO',PPI_CustomDepth:'PPI_CustomDepth',PPI_PostProcessInput0:'PPI_PostProcessInput0',PPI_PostProcessInput1:'PPI_PostProcessInput1',PPI_PostProcessInput2:'PPI_PostProcessInput2',PPI_PostProcessInput3:'PPI_PostProcessInput3',PPI_PostProcessInput4:'PPI_PostProcessInput4',PPI_PostProcessInput5:'PPI_PostProcessInput5',PPI_PostProcessInput6:'PPI_PostProcessInput6',PPI_DecalMask:'PPI_DecalMask',PPI_ShadingModelColor:'PPI_ShadingModelColor',PPI_ShadingModelID:'PPI_ShadingModelID',PPI_AmbientOcclusion:'PPI_AmbientOcclusion',PPI_CustomStencil:'PPI_CustomStencil',PPI_StoredBaseColor:'PPI_StoredBaseColor',PPI_StoredSpecular:'PPI_StoredSpecular',PPI_Velocity:'PPI_Velocity',PPI_WorldTangent:'PPI_WorldTangent',PPI_Anisotropy:'PPI_Anisotropy',PPI_MAX:'PPI_MAX', };
declare class MaterialExpressionSceneTexture extends MaterialExpression { 
	Coordinates: ExpressionInput;
	SceneTextureId: ESceneTextureId;
	bFiltered: boolean;
	static Load(ResourceName: string): MaterialExpressionSceneTexture;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneTexture;
	static GetDefaultObject(): MaterialExpressionSceneTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneTexture;
	static C(Other: UObject | any): MaterialExpressionSceneTexture;
}

declare class MaterialExpressionScreenPosition extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionScreenPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionScreenPosition;
	static GetDefaultObject(): MaterialExpressionScreenPosition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionScreenPosition;
	static C(Other: UObject | any): MaterialExpressionScreenPosition;
}

declare class MaterialExpressionSetMaterialAttributes extends MaterialExpression { 
	Inputs: ExpressionInput[];
	AttributeSetTypes: Guid[];
	static Load(ResourceName: string): MaterialExpressionSetMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSetMaterialAttributes;
	static GetDefaultObject(): MaterialExpressionSetMaterialAttributes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSetMaterialAttributes;
	static C(Other: UObject | any): MaterialExpressionSetMaterialAttributes;
}

declare class MaterialExpressionShaderStageSwitch extends MaterialExpression { 
	PixelShader: ExpressionInput;
	VertexShader: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionShaderStageSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionShaderStageSwitch;
	static GetDefaultObject(): MaterialExpressionShaderStageSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionShaderStageSwitch;
	static C(Other: UObject | any): MaterialExpressionShaderStageSwitch;
}

declare class MaterialExpressionShadingModel extends MaterialExpression { 
	ShadingModel: EMaterialShadingModel;
	static Load(ResourceName: string): MaterialExpressionShadingModel;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionShadingModel;
	static GetDefaultObject(): MaterialExpressionShadingModel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionShadingModel;
	static C(Other: UObject | any): MaterialExpressionShadingModel;
}

declare class MaterialExpressionShadingPathSwitch extends MaterialExpression { 
	Default: ExpressionInput;
	Inputs: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionShadingPathSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionShadingPathSwitch;
	static GetDefaultObject(): MaterialExpressionShadingPathSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionShadingPathSwitch;
	static C(Other: UObject | any): MaterialExpressionShadingPathSwitch;
}

declare class MaterialExpressionShadowReplace extends MaterialExpression { 
	Default: ExpressionInput;
	Shadow: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionShadowReplace;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionShadowReplace;
	static GetDefaultObject(): MaterialExpressionShadowReplace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionShadowReplace;
	static C(Other: UObject | any): MaterialExpressionShadowReplace;
}

declare class MaterialExpressionSign extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionSign;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSign;
	static GetDefaultObject(): MaterialExpressionSign;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSign;
	static C(Other: UObject | any): MaterialExpressionSign;
}

declare class MaterialExpressionSine extends MaterialExpression { 
	Input: ExpressionInput;
	Period: number;
	static Load(ResourceName: string): MaterialExpressionSine;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSine;
	static GetDefaultObject(): MaterialExpressionSine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSine;
	static C(Other: UObject | any): MaterialExpressionSine;
}

declare class MaterialExpressionSingleLayerWaterMaterialOutput extends MaterialExpressionCustomOutput { 
	ScatteringCoefficients: ExpressionInput;
	AbsorptionCoefficients: ExpressionInput;
	PhaseG: ExpressionInput;
	ColorScaleBehindWater: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionSingleLayerWaterMaterialOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSingleLayerWaterMaterialOutput;
	static GetDefaultObject(): MaterialExpressionSingleLayerWaterMaterialOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSingleLayerWaterMaterialOutput;
	static C(Other: UObject | any): MaterialExpressionSingleLayerWaterMaterialOutput;
}

declare class MaterialExpressionSkinningVertexOffsets extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionSkinningVertexOffsets;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSkinningVertexOffsets;
	static GetDefaultObject(): MaterialExpressionSkinningVertexOffsets;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSkinningVertexOffsets;
	static C(Other: UObject | any): MaterialExpressionSkinningVertexOffsets;
}

declare class MaterialExpressionSkyAtmosphereLightDirection extends MaterialExpression { 
	LightIndex: number;
	static Load(ResourceName: string): MaterialExpressionSkyAtmosphereLightDirection;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSkyAtmosphereLightDirection;
	static GetDefaultObject(): MaterialExpressionSkyAtmosphereLightDirection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSkyAtmosphereLightDirection;
	static C(Other: UObject | any): MaterialExpressionSkyAtmosphereLightDirection;
}

declare class MaterialExpressionSkyAtmosphereLightIlluminance extends MaterialExpression { 
	LightIndex: number;
	WorldPosition: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionSkyAtmosphereLightIlluminance;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSkyAtmosphereLightIlluminance;
	static GetDefaultObject(): MaterialExpressionSkyAtmosphereLightIlluminance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSkyAtmosphereLightIlluminance;
	static C(Other: UObject | any): MaterialExpressionSkyAtmosphereLightIlluminance;
}

declare class MaterialExpressionSkyAtmosphereLightDiskLuminance extends MaterialExpression { 
	LightIndex: number;
	static Load(ResourceName: string): MaterialExpressionSkyAtmosphereLightDiskLuminance;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSkyAtmosphereLightDiskLuminance;
	static GetDefaultObject(): MaterialExpressionSkyAtmosphereLightDiskLuminance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSkyAtmosphereLightDiskLuminance;
	static C(Other: UObject | any): MaterialExpressionSkyAtmosphereLightDiskLuminance;
}

declare class MaterialExpressionSkyAtmosphereAerialPerspective extends MaterialExpression { 
	WorldPosition: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionSkyAtmosphereAerialPerspective;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSkyAtmosphereAerialPerspective;
	static GetDefaultObject(): MaterialExpressionSkyAtmosphereAerialPerspective;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSkyAtmosphereAerialPerspective;
	static C(Other: UObject | any): MaterialExpressionSkyAtmosphereAerialPerspective;
}

declare class MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance;
	static GetDefaultObject(): MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance;
	static C(Other: UObject | any): MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance;
}

declare class MaterialExpressionSkyAtmosphereViewLuminance extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionSkyAtmosphereViewLuminance;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSkyAtmosphereViewLuminance;
	static GetDefaultObject(): MaterialExpressionSkyAtmosphereViewLuminance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSkyAtmosphereViewLuminance;
	static C(Other: UObject | any): MaterialExpressionSkyAtmosphereViewLuminance;
}

declare class MaterialExpressionSmoothStep extends MaterialExpression { 
	Min: ExpressionInput;
	Max: ExpressionInput;
	Value: ExpressionInput;
	ConstMin: number;
	ConstMax: number;
	ConstValue: number;
	static Load(ResourceName: string): MaterialExpressionSmoothStep;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSmoothStep;
	static GetDefaultObject(): MaterialExpressionSmoothStep;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSmoothStep;
	static C(Other: UObject | any): MaterialExpressionSmoothStep;
}

declare class MaterialExpressionSobol extends MaterialExpression { 
	Cell: ExpressionInput;
	index: ExpressionInput;
	Seed: ExpressionInput;
	ConstIndex: any;
	ConstSeed: Vector2D;
	static Load(ResourceName: string): MaterialExpressionSobol;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSobol;
	static GetDefaultObject(): MaterialExpressionSobol;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSobol;
	static C(Other: UObject | any): MaterialExpressionSobol;
}

declare type ESpeedTreeGeometryType = 'STG_Branch' | 'STG_Frond' | 'STG_Leaf' | 'STG_FacingLeaf' | 'STG_Billboard' | 'STG_MAX';
declare var ESpeedTreeGeometryType : { STG_Branch:'STG_Branch',STG_Frond:'STG_Frond',STG_Leaf:'STG_Leaf',STG_FacingLeaf:'STG_FacingLeaf',STG_Billboard:'STG_Billboard',STG_MAX:'STG_MAX', };
declare type ESpeedTreeWindType = 'STW_None' | 'STW_Fastest' | 'STW_Fast' | 'STW_Better' | 'STW_Best' | 'STW_Palm' | 'STW_BestPlus' | 'STW_MAX';
declare var ESpeedTreeWindType : { STW_None:'STW_None',STW_Fastest:'STW_Fastest',STW_Fast:'STW_Fast',STW_Better:'STW_Better',STW_Best:'STW_Best',STW_Palm:'STW_Palm',STW_BestPlus:'STW_BestPlus',STW_MAX:'STW_MAX', };
declare type ESpeedTreeLODType = 'STLOD_Pop' | 'STLOD_Smooth' | 'STLOD_MAX';
declare var ESpeedTreeLODType : { STLOD_Pop:'STLOD_Pop',STLOD_Smooth:'STLOD_Smooth',STLOD_MAX:'STLOD_MAX', };
declare class MaterialExpressionSpeedTree extends MaterialExpression { 
	GeometryInput: ExpressionInput;
	WindInput: ExpressionInput;
	LODInput: ExpressionInput;
	ExtraBendWS: ExpressionInput;
	GeometryType: ESpeedTreeGeometryType;
	WindType: ESpeedTreeWindType;
	LODType: ESpeedTreeLODType;
	BillboardThreshold: number;
	bAccurateWindVelocities: boolean;
	static Load(ResourceName: string): MaterialExpressionSpeedTree;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSpeedTree;
	static GetDefaultObject(): MaterialExpressionSpeedTree;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSpeedTree;
	static C(Other: UObject | any): MaterialExpressionSpeedTree;
}

declare class MaterialExpressionSphereMask extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	Radius: ExpressionInput;
	Hardness: ExpressionInput;
	AttenuationRadius: number;
	HardnessPercent: number;
	static Load(ResourceName: string): MaterialExpressionSphereMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSphereMask;
	static GetDefaultObject(): MaterialExpressionSphereMask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSphereMask;
	static C(Other: UObject | any): MaterialExpressionSphereMask;
}

declare class MaterialExpressionSphericalParticleOpacity extends MaterialExpression { 
	Density: ExpressionInput;
	ConstantDensity: number;
	static Load(ResourceName: string): MaterialExpressionSphericalParticleOpacity;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSphericalParticleOpacity;
	static GetDefaultObject(): MaterialExpressionSphericalParticleOpacity;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSphericalParticleOpacity;
	static C(Other: UObject | any): MaterialExpressionSphericalParticleOpacity;
}

declare class MaterialExpressionSquareRoot extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionSquareRoot;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSquareRoot;
	static GetDefaultObject(): MaterialExpressionSquareRoot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSquareRoot;
	static C(Other: UObject | any): MaterialExpressionSquareRoot;
}

declare class MaterialExpressionStaticBool extends MaterialExpression { 
	Value: boolean;
	static Load(ResourceName: string): MaterialExpressionStaticBool;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticBool;
	static GetDefaultObject(): MaterialExpressionStaticBool;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticBool;
	static C(Other: UObject | any): MaterialExpressionStaticBool;
}

declare class MaterialExpressionStaticBoolParameter extends MaterialExpressionParameter { 
	DefaultValue: boolean;
	static Load(ResourceName: string): MaterialExpressionStaticBoolParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticBoolParameter;
	static GetDefaultObject(): MaterialExpressionStaticBoolParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticBoolParameter;
	static C(Other: UObject | any): MaterialExpressionStaticBoolParameter;
}

declare class MaterialExpressionStaticComponentMaskParameter extends MaterialExpressionParameter { 
	Input: ExpressionInput;
	DefaultR: boolean;
	DefaultG: boolean;
	DefaultB: boolean;
	DefaultA: boolean;
	static Load(ResourceName: string): MaterialExpressionStaticComponentMaskParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticComponentMaskParameter;
	static GetDefaultObject(): MaterialExpressionStaticComponentMaskParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticComponentMaskParameter;
	static C(Other: UObject | any): MaterialExpressionStaticComponentMaskParameter;
}

declare class MaterialExpressionStaticSwitch extends MaterialExpression { 
	DefaultValue: boolean;
	A: ExpressionInput;
	B: ExpressionInput;
	Value: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionStaticSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticSwitch;
	static GetDefaultObject(): MaterialExpressionStaticSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticSwitch;
	static C(Other: UObject | any): MaterialExpressionStaticSwitch;
}

declare class MaterialExpressionStaticSwitchParameter extends MaterialExpressionStaticBoolParameter { 
	A: ExpressionInput;
	B: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionStaticSwitchParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticSwitchParameter;
	static GetDefaultObject(): MaterialExpressionStaticSwitchParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticSwitchParameter;
	static C(Other: UObject | any): MaterialExpressionStaticSwitchParameter;
}

declare class MaterialExpressionStep extends MaterialExpression { 
	Y: ExpressionInput;
	X: ExpressionInput;
	ConstY: number;
	ConstX: number;
	static Load(ResourceName: string): MaterialExpressionStep;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStep;
	static GetDefaultObject(): MaterialExpressionStep;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStep;
	static C(Other: UObject | any): MaterialExpressionStep;
}

declare class MaterialExpressionSubtract extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	static Load(ResourceName: string): MaterialExpressionSubtract;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSubtract;
	static GetDefaultObject(): MaterialExpressionSubtract;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSubtract;
	static C(Other: UObject | any): MaterialExpressionSubtract;
}

declare class MaterialExpressionTangent extends MaterialExpression { 
	Input: ExpressionInput;
	Period: number;
	static Load(ResourceName: string): MaterialExpressionTangent;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTangent;
	static GetDefaultObject(): MaterialExpressionTangent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTangent;
	static C(Other: UObject | any): MaterialExpressionTangent;
}

declare class MaterialExpressionTangentOutput extends MaterialExpressionCustomOutput { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionTangentOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTangentOutput;
	static GetDefaultObject(): MaterialExpressionTangentOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTangentOutput;
	static C(Other: UObject | any): MaterialExpressionTangentOutput;
}

declare class MaterialExpressionTemporalSobol extends MaterialExpression { 
	index: ExpressionInput;
	Seed: ExpressionInput;
	ConstIndex: any;
	ConstSeed: Vector2D;
	static Load(ResourceName: string): MaterialExpressionTemporalSobol;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTemporalSobol;
	static GetDefaultObject(): MaterialExpressionTemporalSobol;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTemporalSobol;
	static C(Other: UObject | any): MaterialExpressionTemporalSobol;
}

declare class MaterialExpressionTextureCoordinate extends MaterialExpression { 
	CoordinateIndex: number;
	UTiling: number;
	VTiling: number;
	UnMirrorU: boolean;
	UnMirrorV: boolean;
	static Load(ResourceName: string): MaterialExpressionTextureCoordinate;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureCoordinate;
	static GetDefaultObject(): MaterialExpressionTextureCoordinate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureCoordinate;
	static C(Other: UObject | any): MaterialExpressionTextureCoordinate;
}

declare class MaterialExpressionTextureObject extends MaterialExpressionTextureBase { 
	static Load(ResourceName: string): MaterialExpressionTextureObject;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureObject;
	static GetDefaultObject(): MaterialExpressionTextureObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureObject;
	static C(Other: UObject | any): MaterialExpressionTextureObject;
}

declare class MaterialExpressionTextureObjectParameter extends MaterialExpressionTextureSampleParameter { 
	static Load(ResourceName: string): MaterialExpressionTextureObjectParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureObjectParameter;
	static GetDefaultObject(): MaterialExpressionTextureObjectParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureObjectParameter;
	static C(Other: UObject | any): MaterialExpressionTextureObjectParameter;
}

declare type EMaterialExposedTextureProperty = 'TMTM_TextureSize' | 'TMTM_TexelSize' | 'TMTM_MAX';
declare var EMaterialExposedTextureProperty : { TMTM_TextureSize:'TMTM_TextureSize',TMTM_TexelSize:'TMTM_TexelSize',TMTM_MAX:'TMTM_MAX', };
declare class MaterialExpressionTextureProperty extends MaterialExpression { 
	TextureObject: ExpressionInput;
	Property: EMaterialExposedTextureProperty;
	static Load(ResourceName: string): MaterialExpressionTextureProperty;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureProperty;
	static GetDefaultObject(): MaterialExpressionTextureProperty;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureProperty;
	static C(Other: UObject | any): MaterialExpressionTextureProperty;
}

declare class MaterialExpressionTextureSampleParameter2DArray extends MaterialExpressionTextureSampleParameter { 
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameter2DArray;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameter2DArray;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameter2DArray;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameter2DArray;
	static C(Other: UObject | any): MaterialExpressionTextureSampleParameter2DArray;
}

declare class MaterialExpressionTextureSampleParameterCube extends MaterialExpressionTextureSampleParameter { 
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameterCube;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameterCube;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameterCube;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameterCube;
	static C(Other: UObject | any): MaterialExpressionTextureSampleParameterCube;
}

declare class MaterialExpressionTextureSampleParameterSubUV extends MaterialExpressionTextureSampleParameter2D { 
	bBlend: boolean;
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameterSubUV;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameterSubUV;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameterSubUV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameterSubUV;
	static C(Other: UObject | any): MaterialExpressionTextureSampleParameterSubUV;
}

declare class MaterialExpressionTextureSampleParameterVolume extends MaterialExpressionTextureSampleParameter { 
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameterVolume;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameterVolume;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameterVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameterVolume;
	static C(Other: UObject | any): MaterialExpressionTextureSampleParameterVolume;
}

declare class MaterialExpressionThinTranslucentMaterialOutput extends MaterialExpressionCustomOutput { 
	TransmittanceColor: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionThinTranslucentMaterialOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionThinTranslucentMaterialOutput;
	static GetDefaultObject(): MaterialExpressionThinTranslucentMaterialOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionThinTranslucentMaterialOutput;
	static C(Other: UObject | any): MaterialExpressionThinTranslucentMaterialOutput;
}

declare class MaterialExpressionTime extends MaterialExpression { 
	bIgnorePause: boolean;
	bOverride_Period: boolean;
	Period: number;
	static Load(ResourceName: string): MaterialExpressionTime;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTime;
	static GetDefaultObject(): MaterialExpressionTime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTime;
	static C(Other: UObject | any): MaterialExpressionTime;
}

declare type EMaterialVectorCoordTransformSource = 'TRANSFORMSOURCE_Tangent' | 'TRANSFORMSOURCE_Local' | 'TRANSFORMSOURCE_World' | 'TRANSFORMSOURCE_View' | 'TRANSFORMSOURCE_Camera' | 'TRANSFORMSOURCE_ParticleWorld' | 'TRANSFORMSOURCE_MAX';
declare var EMaterialVectorCoordTransformSource : { TRANSFORMSOURCE_Tangent:'TRANSFORMSOURCE_Tangent',TRANSFORMSOURCE_Local:'TRANSFORMSOURCE_Local',TRANSFORMSOURCE_World:'TRANSFORMSOURCE_World',TRANSFORMSOURCE_View:'TRANSFORMSOURCE_View',TRANSFORMSOURCE_Camera:'TRANSFORMSOURCE_Camera',TRANSFORMSOURCE_ParticleWorld:'TRANSFORMSOURCE_ParticleWorld',TRANSFORMSOURCE_MAX:'TRANSFORMSOURCE_MAX', };
declare type EMaterialVectorCoordTransform = 'TRANSFORM_Tangent' | 'TRANSFORM_Local' | 'TRANSFORM_World' | 'TRANSFORM_View' | 'TRANSFORM_Camera' | 'TRANSFORM_ParticleWorld' | 'TRANSFORM_MAX';
declare var EMaterialVectorCoordTransform : { TRANSFORM_Tangent:'TRANSFORM_Tangent',TRANSFORM_Local:'TRANSFORM_Local',TRANSFORM_World:'TRANSFORM_World',TRANSFORM_View:'TRANSFORM_View',TRANSFORM_Camera:'TRANSFORM_Camera',TRANSFORM_ParticleWorld:'TRANSFORM_ParticleWorld',TRANSFORM_MAX:'TRANSFORM_MAX', };
declare class MaterialExpressionTransform extends MaterialExpression { 
	Input: ExpressionInput;
	TransformSourceType: EMaterialVectorCoordTransformSource;
	TransformType: EMaterialVectorCoordTransform;
	static Load(ResourceName: string): MaterialExpressionTransform;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTransform;
	static GetDefaultObject(): MaterialExpressionTransform;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTransform;
	static C(Other: UObject | any): MaterialExpressionTransform;
}

declare type EMaterialPositionTransformSource = 'TRANSFORMPOSSOURCE_Local' | 'TRANSFORMPOSSOURCE_World' | 'TRANSFORMPOSSOURCE_TranslatedWorld' | 'TRANSFORMPOSSOURCE_View' | 'TRANSFORMPOSSOURCE_Camera' | 'TRANSFORMPOSSOURCE_Particle' | 'TRANSFORMPOSSOURCE_MAX';
declare var EMaterialPositionTransformSource : { TRANSFORMPOSSOURCE_Local:'TRANSFORMPOSSOURCE_Local',TRANSFORMPOSSOURCE_World:'TRANSFORMPOSSOURCE_World',TRANSFORMPOSSOURCE_TranslatedWorld:'TRANSFORMPOSSOURCE_TranslatedWorld',TRANSFORMPOSSOURCE_View:'TRANSFORMPOSSOURCE_View',TRANSFORMPOSSOURCE_Camera:'TRANSFORMPOSSOURCE_Camera',TRANSFORMPOSSOURCE_Particle:'TRANSFORMPOSSOURCE_Particle',TRANSFORMPOSSOURCE_MAX:'TRANSFORMPOSSOURCE_MAX', };
declare class MaterialExpressionTransformPosition extends MaterialExpression { 
	Input: ExpressionInput;
	TransformSourceType: EMaterialPositionTransformSource;
	TransformType: EMaterialPositionTransformSource;
	static Load(ResourceName: string): MaterialExpressionTransformPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTransformPosition;
	static GetDefaultObject(): MaterialExpressionTransformPosition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTransformPosition;
	static C(Other: UObject | any): MaterialExpressionTransformPosition;
}

declare class MaterialExpressionTruncate extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionTruncate;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTruncate;
	static GetDefaultObject(): MaterialExpressionTruncate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTruncate;
	static C(Other: UObject | any): MaterialExpressionTruncate;
}

declare class MaterialExpressionTwoSidedSign extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionTwoSidedSign;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTwoSidedSign;
	static GetDefaultObject(): MaterialExpressionTwoSidedSign;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTwoSidedSign;
	static C(Other: UObject | any): MaterialExpressionTwoSidedSign;
}

declare type EVectorNoiseFunction = 'VNF_CellnoiseALU' | 'VNF_VectorALU' | 'VNF_GradientALU' | 'VNF_CurlALU' | 'VNF_VoronoiALU' | 'VNF_MAX';
declare var EVectorNoiseFunction : { VNF_CellnoiseALU:'VNF_CellnoiseALU',VNF_VectorALU:'VNF_VectorALU',VNF_GradientALU:'VNF_GradientALU',VNF_CurlALU:'VNF_CurlALU',VNF_VoronoiALU:'VNF_VoronoiALU',VNF_MAX:'VNF_MAX', };
declare class MaterialExpressionVectorNoise extends MaterialExpression { 
	Position: ExpressionInput;
	NoiseFunction: EVectorNoiseFunction;
	Quality: number;
	bTiling: boolean;
	TileSize: any;
	static Load(ResourceName: string): MaterialExpressionVectorNoise;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVectorNoise;
	static GetDefaultObject(): MaterialExpressionVectorNoise;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVectorNoise;
	static C(Other: UObject | any): MaterialExpressionVectorNoise;
}

declare class MaterialExpressionVertexColor extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionVertexColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexColor;
	static GetDefaultObject(): MaterialExpressionVertexColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexColor;
	static C(Other: UObject | any): MaterialExpressionVertexColor;
}

declare class MaterialExpressionVertexInterpolator extends MaterialExpressionCustomOutput { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionVertexInterpolator;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexInterpolator;
	static GetDefaultObject(): MaterialExpressionVertexInterpolator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexInterpolator;
	static C(Other: UObject | any): MaterialExpressionVertexInterpolator;
}

declare class MaterialExpressionVertexNormalWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionVertexNormalWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexNormalWS;
	static GetDefaultObject(): MaterialExpressionVertexNormalWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexNormalWS;
	static C(Other: UObject | any): MaterialExpressionVertexNormalWS;
}

declare class MaterialExpressionVertexTangentWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionVertexTangentWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexTangentWS;
	static GetDefaultObject(): MaterialExpressionVertexTangentWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexTangentWS;
	static C(Other: UObject | any): MaterialExpressionVertexTangentWS;
}

declare type EMaterialExposedViewProperty = 'MEVP_BufferSize' | 'MEVP_FieldOfView' | 'MEVP_TanHalfFieldOfView' | 'MEVP_ViewSize' | 'MEVP_WorldSpaceViewPosition' | 'MEVP_WorldSpaceCameraPosition' | 'MEVP_ViewportOffset' | 'MEVP_TemporalSampleCount' | 'MEVP_TemporalSampleIndex' | 'MEVP_TemporalSampleOffset' | 'MEVP_RuntimeVirtualTextureOutputLevel' | 'MEVP_RuntimeVirtualTextureOutputDerivative' | 'MEVP_PreExposure' | 'MEVP_RuntimeVirtualTextureMaxLevel' | 'MEVP_MAX';
declare var EMaterialExposedViewProperty : { MEVP_BufferSize:'MEVP_BufferSize',MEVP_FieldOfView:'MEVP_FieldOfView',MEVP_TanHalfFieldOfView:'MEVP_TanHalfFieldOfView',MEVP_ViewSize:'MEVP_ViewSize',MEVP_WorldSpaceViewPosition:'MEVP_WorldSpaceViewPosition',MEVP_WorldSpaceCameraPosition:'MEVP_WorldSpaceCameraPosition',MEVP_ViewportOffset:'MEVP_ViewportOffset',MEVP_TemporalSampleCount:'MEVP_TemporalSampleCount',MEVP_TemporalSampleIndex:'MEVP_TemporalSampleIndex',MEVP_TemporalSampleOffset:'MEVP_TemporalSampleOffset',MEVP_RuntimeVirtualTextureOutputLevel:'MEVP_RuntimeVirtualTextureOutputLevel',MEVP_RuntimeVirtualTextureOutputDerivative:'MEVP_RuntimeVirtualTextureOutputDerivative',MEVP_PreExposure:'MEVP_PreExposure',MEVP_RuntimeVirtualTextureMaxLevel:'MEVP_RuntimeVirtualTextureMaxLevel',MEVP_MAX:'MEVP_MAX', };
declare class MaterialExpressionViewProperty extends MaterialExpression { 
	Property: EMaterialExposedViewProperty;
	static Load(ResourceName: string): MaterialExpressionViewProperty;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionViewProperty;
	static GetDefaultObject(): MaterialExpressionViewProperty;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionViewProperty;
	static C(Other: UObject | any): MaterialExpressionViewProperty;
}

declare class MaterialExpressionViewSize extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionViewSize;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionViewSize;
	static GetDefaultObject(): MaterialExpressionViewSize;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionViewSize;
	static C(Other: UObject | any): MaterialExpressionViewSize;
}

declare class MaterialExpressionVirtualTextureFeatureSwitch extends MaterialExpression { 
	No: ExpressionInput;
	Yes: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionVirtualTextureFeatureSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVirtualTextureFeatureSwitch;
	static GetDefaultObject(): MaterialExpressionVirtualTextureFeatureSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVirtualTextureFeatureSwitch;
	static C(Other: UObject | any): MaterialExpressionVirtualTextureFeatureSwitch;
}

declare class MaterialExpressionVolumetricAdvancedMaterialInput extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionVolumetricAdvancedMaterialInput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVolumetricAdvancedMaterialInput;
	static GetDefaultObject(): MaterialExpressionVolumetricAdvancedMaterialInput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVolumetricAdvancedMaterialInput;
	static C(Other: UObject | any): MaterialExpressionVolumetricAdvancedMaterialInput;
}

declare class MaterialExpressionVolumetricAdvancedMaterialOutput extends MaterialExpressionCustomOutput { 
	PhaseG: ExpressionInput;
	PhaseG2: ExpressionInput;
	PhaseBlend: ExpressionInput;
	MultiScatteringContribution: ExpressionInput;
	MultiScatteringOcclusion: ExpressionInput;
	MultiScatteringEccentricity: ExpressionInput;
	ConservativeDensity: ExpressionInput;
	ConstPhaseG: number;
	ConstPhaseG2: number;
	ConstPhaseBlend: number;
	PerSamplePhaseEvaluation: boolean;
	MultiScatteringApproximationOctaveCount: any;
	ConstMultiScatteringContribution: number;
	ConstMultiScatteringOcclusion: number;
	ConstMultiScatteringEccentricity: number;
	bGroundContribution: boolean;
	bGrayScaleMaterial: boolean;
	bRayMarchVolumeShadow: boolean;
	static Load(ResourceName: string): MaterialExpressionVolumetricAdvancedMaterialOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVolumetricAdvancedMaterialOutput;
	static GetDefaultObject(): MaterialExpressionVolumetricAdvancedMaterialOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVolumetricAdvancedMaterialOutput;
	static C(Other: UObject | any): MaterialExpressionVolumetricAdvancedMaterialOutput;
}

declare type EWorldPositionIncludedOffsets = 'WPT_Default' | 'WPT_ExcludeAllShaderOffsets' | 'WPT_CameraRelative' | 'WPT_CameraRelativeNoOffsets' | 'WPT_MAX';
declare var EWorldPositionIncludedOffsets : { WPT_Default:'WPT_Default',WPT_ExcludeAllShaderOffsets:'WPT_ExcludeAllShaderOffsets',WPT_CameraRelative:'WPT_CameraRelative',WPT_CameraRelativeNoOffsets:'WPT_CameraRelativeNoOffsets',WPT_MAX:'WPT_MAX', };
declare class MaterialExpressionWorldPosition extends MaterialExpression { 
	WorldPositionShaderOffset: EWorldPositionIncludedOffsets;
	static Load(ResourceName: string): MaterialExpressionWorldPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionWorldPosition;
	static GetDefaultObject(): MaterialExpressionWorldPosition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionWorldPosition;
	static C(Other: UObject | any): MaterialExpressionWorldPosition;
}

declare class MaterialFunctionMaterialLayer extends MaterialFunction { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayer;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayer;
	static GetDefaultObject(): MaterialFunctionMaterialLayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayer;
	static C(Other: UObject | any): MaterialFunctionMaterialLayer;
}

declare class MaterialFunctionMaterialLayerInstance extends MaterialFunctionInstance { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerInstance;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerInstance;
	static GetDefaultObject(): MaterialFunctionMaterialLayerInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerInstance;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerInstance;
}

declare class MaterialFunctionMaterialLayerBlend extends MaterialFunction { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerBlend;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerBlend;
	static GetDefaultObject(): MaterialFunctionMaterialLayerBlend;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerBlend;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerBlend;
}

declare class MaterialFunctionMaterialLayerBlendInstance extends MaterialFunctionInstance { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerBlendInstance;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerBlendInstance;
	static GetDefaultObject(): MaterialFunctionMaterialLayerBlendInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerBlendInstance;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerBlendInstance;
}

declare class MaterialInstanceActor extends Actor { 
	TargetActors: Actor[];
	static GetDefaultObject(): MaterialInstanceActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceActor;
	static C(Other: UObject | any): MaterialInstanceActor;
}

declare class MatineeActorCameraAnim extends MatineeActor { 
	CameraAnim: CameraAnim;
	static GetDefaultObject(): MatineeActorCameraAnim;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeActorCameraAnim;
	static C(Other: UObject | any): MatineeActorCameraAnim;
}

declare class MatineeAnimInterface extends Interface { 
	static Load(ResourceName: string): MatineeAnimInterface;
	static Find(Outer: UObject, ResourceName: string): MatineeAnimInterface;
	static GetDefaultObject(): MatineeAnimInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeAnimInterface;
	static C(Other: UObject | any): MatineeAnimInterface;
}

declare class MatineeInterface extends Interface { 
	static Load(ResourceName: string): MatineeInterface;
	static Find(Outer: UObject, ResourceName: string): MatineeInterface;
	static GetDefaultObject(): MatineeInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeInterface;
	static C(Other: UObject | any): MatineeInterface;
}

declare class MeshMergeCullingVolume extends Volume { 
	static GetDefaultObject(): MeshMergeCullingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshMergeCullingVolume;
	static C(Other: UObject | any): MeshMergeCullingVolume;
}

declare class MeshSimplificationSettings extends DeveloperSettings { 
	MeshReductionModuleName: string;
	static Load(ResourceName: string): MeshSimplificationSettings;
	static Find(Outer: UObject, ResourceName: string): MeshSimplificationSettings;
	static GetDefaultObject(): MeshSimplificationSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshSimplificationSettings;
	static C(Other: UObject | any): MeshSimplificationSettings;
}

declare class MeshVertexPainterKismetLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MeshVertexPainterKismetLibrary;
	static Find(Outer: UObject, ResourceName: string): MeshVertexPainterKismetLibrary;
	static GetDefaultObject(): MeshVertexPainterKismetLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshVertexPainterKismetLibrary;
	static RemovePaintedVertices(StaticMeshComponent: StaticMeshComponent): void;
	static PaintVerticesSingleColor(StaticMeshComponent: StaticMeshComponent,FillColor: LinearColor,bConvertToSRGB: boolean): void;
	static PaintVerticesLerpAlongAxis(StaticMeshComponent: StaticMeshComponent,StartColor: LinearColor,EndColor: LinearColor,Axis: EVertexPaintAxis,bConvertToSRGB: boolean): void;
	static C(Other: UObject | any): MeshVertexPainterKismetLibrary;
}

declare class PurchaseInfo { 
	Identifier: string;
	DisplayName: string;
	DisplayDescription: string;
	DisplayPrice: string;
	clone() : PurchaseInfo;
	static C(Other: UObject | any): PurchaseInfo;
}

declare class MicroTransactionBase extends PlatformInterfaceBase { 
	AvailableProducts: PurchaseInfo[];
	LastError: string;
	LastErrorSolution: string;
	static Load(ResourceName: string): MicroTransactionBase;
	static Find(Outer: UObject, ResourceName: string): MicroTransactionBase;
	static GetDefaultObject(): MicroTransactionBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MicroTransactionBase;
	static C(Other: UObject | any): MicroTransactionBase;
}

declare class NavAgentInterface extends Interface { 
	static Load(ResourceName: string): NavAgentInterface;
	static Find(Outer: UObject, ResourceName: string): NavAgentInterface;
	static GetDefaultObject(): NavAgentInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAgentInterface;
	static C(Other: UObject | any): NavAgentInterface;
}

declare class NavEdgeProviderInterface extends Interface { 
	static Load(ResourceName: string): NavEdgeProviderInterface;
	static Find(Outer: UObject, ResourceName: string): NavEdgeProviderInterface;
	static GetDefaultObject(): NavEdgeProviderInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavEdgeProviderInterface;
	static C(Other: UObject | any): NavEdgeProviderInterface;
}

declare class NavigationDataInterface extends Interface { 
	static Load(ResourceName: string): NavigationDataInterface;
	static Find(Outer: UObject, ResourceName: string): NavigationDataInterface;
	static GetDefaultObject(): NavigationDataInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationDataInterface;
	static C(Other: UObject | any): NavigationDataInterface;
}

declare class NullNavSysConfig extends NavigationSystemConfig { 
	static Load(ResourceName: string): NullNavSysConfig;
	static Find(Outer: UObject, ResourceName: string): NullNavSysConfig;
	static GetDefaultObject(): NullNavSysConfig;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NullNavSysConfig;
	static C(Other: UObject | any): NullNavSysConfig;
}

declare class NavPathObserverInterface extends Interface { 
	static Load(ResourceName: string): NavPathObserverInterface;
	static Find(Outer: UObject, ResourceName: string): NavPathObserverInterface;
	static GetDefaultObject(): NavPathObserverInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavPathObserverInterface;
	static C(Other: UObject | any): NavPathObserverInterface;
}

declare class NavRelevantInterface extends Interface { 
	static Load(ResourceName: string): NavRelevantInterface;
	static Find(Outer: UObject, ResourceName: string): NavRelevantInterface;
	static GetDefaultObject(): NavRelevantInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavRelevantInterface;
	static C(Other: UObject | any): NavRelevantInterface;
}

declare class SimulatedClientNetConnection extends NetConnection { 
	static Load(ResourceName: string): SimulatedClientNetConnection;
	static Find(Outer: UObject, ResourceName: string): SimulatedClientNetConnection;
	static GetDefaultObject(): SimulatedClientNetConnection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SimulatedClientNetConnection;
	static C(Other: UObject | any): SimulatedClientNetConnection;
}

declare class NetPushModelHelpers extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): NetPushModelHelpers;
	static Find(Outer: UObject, ResourceName: string): NetPushModelHelpers;
	static GetDefaultObject(): NetPushModelHelpers;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetPushModelHelpers;
	static MarkPropertyDirtyFromRepIndex(UObject: UObject,RepIndex: number,PropertyName: string): void;
	static MarkPropertyDirty(UObject: UObject,PropertyName: string): void;
	static C(Other: UObject | any): NetPushModelHelpers;
}

declare class NetworkPredictionInterface extends Interface { 
	static Load(ResourceName: string): NetworkPredictionInterface;
	static Find(Outer: UObject, ResourceName: string): NetworkPredictionInterface;
	static GetDefaultObject(): NetworkPredictionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetworkPredictionInterface;
	static C(Other: UObject | any): NetworkPredictionInterface;
}

declare class NetworkEmulationProfileDescription { 
	ProfileName: string;
	Tooltip: string;
	clone() : NetworkEmulationProfileDescription;
	static C(Other: UObject | any): NetworkEmulationProfileDescription;
}

declare class NetworkSettings extends DeveloperSettings { 
	bVerifyPeer: boolean;
	bEnableMultiplayerWorldOriginRebasing: boolean;
	MaxRepArraySize: number;
	MaxRepArrayMemory: number;
	NetworkEmulationProfiles: NetworkEmulationProfileDescription[];
	static Load(ResourceName: string): NetworkSettings;
	static Find(Outer: UObject, ResourceName: string): NetworkSettings;
	static GetDefaultObject(): NetworkSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetworkSettings;
	static C(Other: UObject | any): NetworkSettings;
}

declare class NodeMappingProviderInterface extends Interface { 
	static Load(ResourceName: string): NodeMappingProviderInterface;
	static Find(Outer: UObject, ResourceName: string): NodeMappingProviderInterface;
	static GetDefaultObject(): NodeMappingProviderInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NodeMappingProviderInterface;
	static C(Other: UObject | any): NodeMappingProviderInterface;
}

declare class Note extends Actor { 
	text: string;
	SpriteComponent: BillboardComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): Note;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Note;
	static C(Other: UObject | any): Note;
}

declare class ObjectLibrary extends UObject { 
	ObjectBaseClass: UnrealEngineClass;
	bHasBlueprintClasses: boolean;
	Objects: UObject[];
	WeakObjects: any[];
	bUseWeakReferences: boolean;
	bIsFullyLoaded: boolean;
	static Load(ResourceName: string): ObjectLibrary;
	static Find(Outer: UObject, ResourceName: string): ObjectLibrary;
	static GetDefaultObject(): ObjectLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectLibrary;
	static C(Other: UObject | any): ObjectLibrary;
}

declare class ObjectReferencer extends UObject { 
	ReferencedObjects: UObject[];
	static Load(ResourceName: string): ObjectReferencer;
	static Find(Outer: UObject, ResourceName: string): ObjectReferencer;
	static GetDefaultObject(): ObjectReferencer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectReferencer;
	static C(Other: UObject | any): ObjectReferencer;
}

declare class ObjectTraceWorldSubsystem extends WorldSubsystem { 
	static Load(ResourceName: string): ObjectTraceWorldSubsystem;
	static Find(Outer: UObject, ResourceName: string): ObjectTraceWorldSubsystem;
	static GetDefaultObject(): ObjectTraceWorldSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectTraceWorldSubsystem;
	static C(Other: UObject | any): ObjectTraceWorldSubsystem;
}

declare class OnlineBlueprintCallProxyBase extends BlueprintAsyncActionBase { 
	static Load(ResourceName: string): OnlineBlueprintCallProxyBase;
	static Find(Outer: UObject, ResourceName: string): OnlineBlueprintCallProxyBase;
	static GetDefaultObject(): OnlineBlueprintCallProxyBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBlueprintCallProxyBase;
	static C(Other: UObject | any): OnlineBlueprintCallProxyBase;
}

declare class OnlineEngineInterface extends UObject { 
	static Load(ResourceName: string): OnlineEngineInterface;
	static Find(Outer: UObject, ResourceName: string): OnlineEngineInterface;
	static GetDefaultObject(): OnlineEngineInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineEngineInterface;
	static C(Other: UObject | any): OnlineEngineInterface;
}

declare class PackageMapClient extends PackageMap { 
	static Load(ResourceName: string): PackageMapClient;
	static Find(Outer: UObject, ResourceName: string): PackageMapClient;
	static GetDefaultObject(): PackageMapClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageMapClient;
	static C(Other: UObject | any): PackageMapClient;
}

declare class PainCausingVolume extends PhysicsVolume { 
	bPainCausing: boolean;
	DamagePerSec: number;
	DamageType: UnrealEngineClass;
	PainInterval: number;
	bEntryPain: boolean;
	BACKUP_bPainCausing: boolean;
	DamageInstigator: Controller;
	static GetDefaultObject(): PainCausingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PainCausingVolume;
	static C(Other: UObject | any): PainCausingVolume;
}

declare class ParticleModuleAccelerationBase extends ParticleModule { 
	bAlwaysInWorldSpace: boolean;
	static Load(ResourceName: string): ParticleModuleAccelerationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationBase;
	static GetDefaultObject(): ParticleModuleAccelerationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationBase;
	static C(Other: UObject | any): ParticleModuleAccelerationBase;
}

declare class ParticleModuleAcceleration extends ParticleModuleAccelerationBase { 
	Acceleration: RawDistributionVector;
	bApplyOwnerScale: boolean;
	static Load(ResourceName: string): ParticleModuleAcceleration;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAcceleration;
	static GetDefaultObject(): ParticleModuleAcceleration;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAcceleration;
	static C(Other: UObject | any): ParticleModuleAcceleration;
}

declare class ParticleModuleAccelerationConstant extends ParticleModuleAccelerationBase { 
	Acceleration: Vector;
	static Load(ResourceName: string): ParticleModuleAccelerationConstant;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationConstant;
	static GetDefaultObject(): ParticleModuleAccelerationConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationConstant;
	static C(Other: UObject | any): ParticleModuleAccelerationConstant;
}

declare class ParticleModuleAccelerationDrag extends ParticleModuleAccelerationBase { 
	DragCoefficient: DistributionFloat;
	DragCoefficientRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleAccelerationDrag;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationDrag;
	static GetDefaultObject(): ParticleModuleAccelerationDrag;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationDrag;
	static C(Other: UObject | any): ParticleModuleAccelerationDrag;
}

declare class ParticleModuleAccelerationDragScaleOverLife extends ParticleModuleAccelerationBase { 
	DragScale: DistributionFloat;
	DragScaleRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleAccelerationDragScaleOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationDragScaleOverLife;
	static GetDefaultObject(): ParticleModuleAccelerationDragScaleOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationDragScaleOverLife;
	static C(Other: UObject | any): ParticleModuleAccelerationDragScaleOverLife;
}

declare class ParticleModuleAccelerationOverLifetime extends ParticleModuleAccelerationBase { 
	AccelOverLife: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleAccelerationOverLifetime;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationOverLifetime;
	static GetDefaultObject(): ParticleModuleAccelerationOverLifetime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationOverLifetime;
	static C(Other: UObject | any): ParticleModuleAccelerationOverLifetime;
}

declare class ParticleModuleAttractorBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleAttractorBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorBase;
	static GetDefaultObject(): ParticleModuleAttractorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorBase;
	static C(Other: UObject | any): ParticleModuleAttractorBase;
}

declare class ParticleModuleAttractorLine extends ParticleModuleAttractorBase { 
	EndPoint0: Vector;
	EndPoint1: Vector;
	Range: RawDistributionFloat;
	Strength: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleAttractorLine;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorLine;
	static GetDefaultObject(): ParticleModuleAttractorLine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorLine;
	static C(Other: UObject | any): ParticleModuleAttractorLine;
}

declare type EAttractorParticleSelectionMethod = 'EAPSM_Random' | 'EAPSM_Sequential' | 'EAPSM_MAX';
declare var EAttractorParticleSelectionMethod : { EAPSM_Random:'EAPSM_Random',EAPSM_Sequential:'EAPSM_Sequential',EAPSM_MAX:'EAPSM_MAX', };
declare class ParticleModuleAttractorParticle extends ParticleModuleAttractorBase { 
	EmitterName: string;
	Range: RawDistributionFloat;
	bStrengthByDistance: boolean;
	Strength: RawDistributionFloat;
	bAffectBaseVelocity: boolean;
	SelectionMethod: EAttractorParticleSelectionMethod;
	bRenewSource: boolean;
	bInheritSourceVel: boolean;
	LastSelIndex: number;
	static Load(ResourceName: string): ParticleModuleAttractorParticle;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorParticle;
	static GetDefaultObject(): ParticleModuleAttractorParticle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorParticle;
	static C(Other: UObject | any): ParticleModuleAttractorParticle;
}

declare class ParticleModuleAttractorPoint extends ParticleModuleAttractorBase { 
	Position: RawDistributionVector;
	Range: RawDistributionFloat;
	Strength: RawDistributionFloat;
	StrengthByDistance: boolean;
	bAffectBaseVelocity: boolean;
	bOverrideVelocity: boolean;
	bUseWorldSpacePosition: boolean;
	Positive_X: boolean;
	Positive_Y: boolean;
	Positive_Z: boolean;
	Negative_X: boolean;
	Negative_Y: boolean;
	Negative_Z: boolean;
	static Load(ResourceName: string): ParticleModuleAttractorPoint;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorPoint;
	static GetDefaultObject(): ParticleModuleAttractorPoint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorPoint;
	static C(Other: UObject | any): ParticleModuleAttractorPoint;
}

declare class ParticleModuleAttractorPointGravity extends ParticleModuleAttractorBase { 
	Position: Vector;
	Radius: number;
	Strength: DistributionFloat;
	StrengthRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleAttractorPointGravity;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorPointGravity;
	static GetDefaultObject(): ParticleModuleAttractorPointGravity;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorPointGravity;
	static C(Other: UObject | any): ParticleModuleAttractorPointGravity;
}

declare class ParticleModuleBeamBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleBeamBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamBase;
	static GetDefaultObject(): ParticleModuleBeamBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamBase;
	static C(Other: UObject | any): ParticleModuleBeamBase;
}

declare type BeamModifierType = 'PEB2MT_Source' | 'PEB2MT_Target' | 'PEB2MT_MAX';
declare var BeamModifierType : { PEB2MT_Source:'PEB2MT_Source',PEB2MT_Target:'PEB2MT_Target',PEB2MT_MAX:'PEB2MT_MAX', };
declare class BeamModifierOptions { 
	bModify: boolean;
	bScale: boolean;
	bLock: boolean;
	clone() : BeamModifierOptions;
	static C(Other: UObject | any): BeamModifierOptions;
}

declare class ParticleModuleBeamModifier extends ParticleModuleBeamBase { 
	ModifierType: BeamModifierType;
	PositionOptions: BeamModifierOptions;
	Position: RawDistributionVector;
	TangentOptions: BeamModifierOptions;
	Tangent: RawDistributionVector;
	bAbsoluteTangent: boolean;
	StrengthOptions: BeamModifierOptions;
	Strength: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleBeamModifier;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamModifier;
	static GetDefaultObject(): ParticleModuleBeamModifier;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamModifier;
	static C(Other: UObject | any): ParticleModuleBeamModifier;
}

declare class ParticleModuleBeamNoise extends ParticleModuleBeamBase { 
	bLowFreq_Enabled: boolean;
	Frequency: number;
	Frequency_LowRange: number;
	NoiseRange: RawDistributionVector;
	NoiseRangeScale: RawDistributionFloat;
	bNRScaleEmitterTime: boolean;
	NoiseSpeed: RawDistributionVector;
	bSmooth: boolean;
	NoiseLockRadius: number;
	bNoiseLock: boolean;
	bOscillate: boolean;
	NoiseLockTime: number;
	NoiseTension: number;
	bUseNoiseTangents: boolean;
	NoiseTangentStrength: RawDistributionFloat;
	NoiseTessellation: number;
	bTargetNoise: boolean;
	FrequencyDistance: number;
	bApplyNoiseScale: boolean;
	NoiseScale: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleBeamNoise;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamNoise;
	static GetDefaultObject(): ParticleModuleBeamNoise;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamNoise;
	static C(Other: UObject | any): ParticleModuleBeamNoise;
}

declare type Beam2SourceTargetMethod = 'PEB2STM_Default' | 'PEB2STM_UserSet' | 'PEB2STM_Emitter' | 'PEB2STM_Particle' | 'PEB2STM_Actor' | 'PEB2STM_MAX';
declare var Beam2SourceTargetMethod : { PEB2STM_Default:'PEB2STM_Default',PEB2STM_UserSet:'PEB2STM_UserSet',PEB2STM_Emitter:'PEB2STM_Emitter',PEB2STM_Particle:'PEB2STM_Particle',PEB2STM_Actor:'PEB2STM_Actor',PEB2STM_MAX:'PEB2STM_MAX', };
declare type Beam2SourceTargetTangentMethod = 'PEB2STTM_Direct' | 'PEB2STTM_UserSet' | 'PEB2STTM_Distribution' | 'PEB2STTM_Emitter' | 'PEB2STTM_MAX';
declare var Beam2SourceTargetTangentMethod : { PEB2STTM_Direct:'PEB2STTM_Direct',PEB2STTM_UserSet:'PEB2STTM_UserSet',PEB2STTM_Distribution:'PEB2STTM_Distribution',PEB2STTM_Emitter:'PEB2STTM_Emitter',PEB2STTM_MAX:'PEB2STTM_MAX', };
declare class ParticleModuleBeamSource extends ParticleModuleBeamBase { 
	SourceMethod: Beam2SourceTargetMethod;
	SourceName: string;
	bSourceAbsolute: boolean;
	Source: RawDistributionVector;
	bLockSource: boolean;
	SourceTangentMethod: Beam2SourceTargetTangentMethod;
	SourceTangent: RawDistributionVector;
	bLockSourceTangent: boolean;
	SourceStrength: RawDistributionFloat;
	bLockSourceStength: boolean;
	static Load(ResourceName: string): ParticleModuleBeamSource;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamSource;
	static GetDefaultObject(): ParticleModuleBeamSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamSource;
	static C(Other: UObject | any): ParticleModuleBeamSource;
}

declare class ParticleModuleBeamTarget extends ParticleModuleBeamBase { 
	TargetMethod: Beam2SourceTargetMethod;
	TargetName: string;
	Target: RawDistributionVector;
	bTargetAbsolute: boolean;
	bLockTarget: boolean;
	TargetTangentMethod: Beam2SourceTargetTangentMethod;
	TargetTangent: RawDistributionVector;
	bLockTargetTangent: boolean;
	TargetStrength: RawDistributionFloat;
	bLockTargetStength: boolean;
	LockRadius: number;
	static Load(ResourceName: string): ParticleModuleBeamTarget;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamTarget;
	static GetDefaultObject(): ParticleModuleBeamTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamTarget;
	static C(Other: UObject | any): ParticleModuleBeamTarget;
}

declare class ParticleModuleCameraBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleCameraBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCameraBase;
	static GetDefaultObject(): ParticleModuleCameraBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCameraBase;
	static C(Other: UObject | any): ParticleModuleCameraBase;
}

declare type EParticleCameraOffsetUpdateMethod = 'EPCOUM_DirectSet' | 'EPCOUM_Additive' | 'EPCOUM_Scalar' | 'EPCOUM_MAX';
declare var EParticleCameraOffsetUpdateMethod : { EPCOUM_DirectSet:'EPCOUM_DirectSet',EPCOUM_Additive:'EPCOUM_Additive',EPCOUM_Scalar:'EPCOUM_Scalar',EPCOUM_MAX:'EPCOUM_MAX', };
declare class ParticleModuleCameraOffset extends ParticleModuleCameraBase { 
	CameraOffset: RawDistributionFloat;
	bSpawnTimeOnly: boolean;
	UpdateMethod: EParticleCameraOffsetUpdateMethod;
	static Load(ResourceName: string): ParticleModuleCameraOffset;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCameraOffset;
	static GetDefaultObject(): ParticleModuleCameraOffset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCameraOffset;
	static C(Other: UObject | any): ParticleModuleCameraOffset;
}

declare class ParticleModuleCollisionBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleCollisionBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollisionBase;
	static GetDefaultObject(): ParticleModuleCollisionBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollisionBase;
	static C(Other: UObject | any): ParticleModuleCollisionBase;
}

declare type EParticleCollisionComplete = 'EPCC_Kill' | 'EPCC_Freeze' | 'EPCC_HaltCollisions' | 'EPCC_FreezeTranslation' | 'EPCC_FreezeRotation' | 'EPCC_FreezeMovement' | 'EPCC_MAX';
declare var EParticleCollisionComplete : { EPCC_Kill:'EPCC_Kill',EPCC_Freeze:'EPCC_Freeze',EPCC_HaltCollisions:'EPCC_HaltCollisions',EPCC_FreezeTranslation:'EPCC_FreezeTranslation',EPCC_FreezeRotation:'EPCC_FreezeRotation',EPCC_FreezeMovement:'EPCC_FreezeMovement',EPCC_MAX:'EPCC_MAX', };
declare class ParticleModuleCollision extends ParticleModuleCollisionBase { 
	DampingFactor: RawDistributionVector;
	DampingFactorRotation: RawDistributionVector;
	MaxCollisions: RawDistributionFloat;
	CollisionCompletionOption: EParticleCollisionComplete;
	CollisionTypes: EObjectTypeQuery[];
	bApplyPhysics: boolean;
	bIgnoreTriggerVolumes: boolean;
	ParticleMass: RawDistributionFloat;
	DirScalar: number;
	bPawnsDoNotDecrementCount: boolean;
	bOnlyVerticalNormalsDecrementCount: boolean;
	VerticalFudgeFactor: number;
	DelayAmount: RawDistributionFloat;
	bDropDetail: boolean;
	bCollideOnlyIfVisible: boolean;
	bIgnoreSourceActor: boolean;
	MaxCollisionDistance: number;
	static Load(ResourceName: string): ParticleModuleCollision;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollision;
	static GetDefaultObject(): ParticleModuleCollision;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollision;
	static C(Other: UObject | any): ParticleModuleCollision;
}

declare type EParticleCollisionResponse = 'Bounce' | 'Stop' | 'Kill' | 'EParticleCollisionResponse_MAX';
declare var EParticleCollisionResponse : { Bounce:'Bounce',Stop:'Stop',Kill:'Kill',EParticleCollisionResponse_MAX:'EParticleCollisionResponse_MAX', };
declare type EParticleCollisionMode = 'SceneDepth' | 'DistanceField' | 'EParticleCollisionMode_MAX';
declare var EParticleCollisionMode : { SceneDepth:'SceneDepth',DistanceField:'DistanceField',EParticleCollisionMode_MAX:'EParticleCollisionMode_MAX', };
declare class ParticleModuleCollisionGPU extends ParticleModuleCollisionBase { 
	Resilience: RawDistributionFloat;
	ResilienceScaleOverLife: RawDistributionFloat;
	Friction: number;
	RandomSpread: number;
	RandomDistribution: number;
	RadiusScale: number;
	RadiusBias: number;
	Response: EParticleCollisionResponse;
	CollisionMode: EParticleCollisionMode;
	static Load(ResourceName: string): ParticleModuleCollisionGPU;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollisionGPU;
	static GetDefaultObject(): ParticleModuleCollisionGPU;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollisionGPU;
	static C(Other: UObject | any): ParticleModuleCollisionGPU;
}

declare class ParticleModuleColorBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleColorBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorBase;
	static GetDefaultObject(): ParticleModuleColorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorBase;
	static C(Other: UObject | any): ParticleModuleColorBase;
}

declare class ParticleModuleColor extends ParticleModuleColorBase { 
	StartColor: RawDistributionVector;
	StartAlpha: RawDistributionFloat;
	bClampAlpha: boolean;
	static Load(ResourceName: string): ParticleModuleColor;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColor;
	static GetDefaultObject(): ParticleModuleColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColor;
	static C(Other: UObject | any): ParticleModuleColor;
}

declare class ParticleRandomSeedInfo { 
	ParameterName: string;
	bGetSeedFromInstance: boolean;
	bInstanceSeedIsIndex: boolean;
	bResetSeedOnEmitterLooping: boolean;
	bRandomlySelectSeedArray: boolean;
	RandomSeeds: number[];
	clone() : ParticleRandomSeedInfo;
	static C(Other: UObject | any): ParticleRandomSeedInfo;
}

declare class ParticleModuleColor_Seeded extends ParticleModuleColor { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleColor_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColor_Seeded;
	static GetDefaultObject(): ParticleModuleColor_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColor_Seeded;
	static C(Other: UObject | any): ParticleModuleColor_Seeded;
}

declare class ParticleModuleColorOverLife extends ParticleModuleColorBase { 
	ColorOverLife: RawDistributionVector;
	AlphaOverLife: RawDistributionFloat;
	bClampAlpha: boolean;
	static Load(ResourceName: string): ParticleModuleColorOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorOverLife;
	static GetDefaultObject(): ParticleModuleColorOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorOverLife;
	static C(Other: UObject | any): ParticleModuleColorOverLife;
}

declare class ParticleModuleColorScaleOverLife extends ParticleModuleColorBase { 
	ColorScaleOverLife: RawDistributionVector;
	AlphaScaleOverLife: RawDistributionFloat;
	bEmitterTime: boolean;
	static Load(ResourceName: string): ParticleModuleColorScaleOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorScaleOverLife;
	static GetDefaultObject(): ParticleModuleColorScaleOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorScaleOverLife;
	static C(Other: UObject | any): ParticleModuleColorScaleOverLife;
}

declare class ParticleModuleEventReceiverKillParticles extends ParticleModuleEventReceiverBase { 
	bStopSpawning: boolean;
	static Load(ResourceName: string): ParticleModuleEventReceiverKillParticles;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventReceiverKillParticles;
	static GetDefaultObject(): ParticleModuleEventReceiverKillParticles;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventReceiverKillParticles;
	static C(Other: UObject | any): ParticleModuleEventReceiverKillParticles;
}

declare class ParticleModuleEventReceiverSpawn extends ParticleModuleEventReceiverBase { 
	SpawnCount: RawDistributionFloat;
	bUseParticleTime: boolean;
	bUsePSysLocation: boolean;
	bInheritVelocity: boolean;
	InheritVelocityScale: RawDistributionVector;
	PhysicalMaterials: PhysicalMaterial[];
	bBanPhysicalMaterials: boolean;
	static Load(ResourceName: string): ParticleModuleEventReceiverSpawn;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventReceiverSpawn;
	static GetDefaultObject(): ParticleModuleEventReceiverSpawn;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventReceiverSpawn;
	static C(Other: UObject | any): ParticleModuleEventReceiverSpawn;
}

declare class ParticleModuleKillBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleKillBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillBase;
	static GetDefaultObject(): ParticleModuleKillBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillBase;
	static C(Other: UObject | any): ParticleModuleKillBase;
}

declare class ParticleModuleKillBox extends ParticleModuleKillBase { 
	LowerLeftCorner: RawDistributionVector;
	UpperRightCorner: RawDistributionVector;
	bAbsolute: boolean;
	bKillInside: boolean;
	bAxisAlignedAndFixedSize: boolean;
	static Load(ResourceName: string): ParticleModuleKillBox;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillBox;
	static GetDefaultObject(): ParticleModuleKillBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillBox;
	static C(Other: UObject | any): ParticleModuleKillBox;
}

declare class ParticleModuleKillHeight extends ParticleModuleKillBase { 
	Height: RawDistributionFloat;
	bAbsolute: boolean;
	bFloor: boolean;
	bApplyPSysScale: boolean;
	static Load(ResourceName: string): ParticleModuleKillHeight;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillHeight;
	static GetDefaultObject(): ParticleModuleKillHeight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillHeight;
	static C(Other: UObject | any): ParticleModuleKillHeight;
}

declare class ParticleModuleLifetimeBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleLifetimeBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetimeBase;
	static GetDefaultObject(): ParticleModuleLifetimeBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetimeBase;
	static C(Other: UObject | any): ParticleModuleLifetimeBase;
}

declare class ParticleModuleLifetime extends ParticleModuleLifetimeBase { 
	LifeTime: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleLifetime;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetime;
	static GetDefaultObject(): ParticleModuleLifetime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetime;
	static C(Other: UObject | any): ParticleModuleLifetime;
}

declare class ParticleModuleLifetime_Seeded extends ParticleModuleLifetime { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLifetime_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetime_Seeded;
	static GetDefaultObject(): ParticleModuleLifetime_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetime_Seeded;
	static C(Other: UObject | any): ParticleModuleLifetime_Seeded;
}

declare class ParticleModuleLightBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleLightBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLightBase;
	static GetDefaultObject(): ParticleModuleLightBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLightBase;
	static C(Other: UObject | any): ParticleModuleLightBase;
}

declare class ParticleModuleLight extends ParticleModuleLightBase { 
	bUseInverseSquaredFalloff: boolean;
	bAffectsTranslucency: boolean;
	bPreviewLightRadius: boolean;
	SpawnFraction: number;
	ColorScaleOverLife: RawDistributionVector;
	BrightnessOverLife: RawDistributionFloat;
	RadiusScale: RawDistributionFloat;
	LightExponent: RawDistributionFloat;
	LightingChannels: LightingChannels;
	VolumetricScatteringIntensity: number;
	bHighQualityLights: boolean;
	bShadowCastingLights: boolean;
	static Load(ResourceName: string): ParticleModuleLight;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLight;
	static GetDefaultObject(): ParticleModuleLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLight;
	static C(Other: UObject | any): ParticleModuleLight;
}

declare class ParticleModuleLight_Seeded extends ParticleModuleLight { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLight_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLight_Seeded;
	static GetDefaultObject(): ParticleModuleLight_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLight_Seeded;
	static C(Other: UObject | any): ParticleModuleLight_Seeded;
}

declare class ParticleModuleLocationBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleLocationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationBase;
	static GetDefaultObject(): ParticleModuleLocationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationBase;
	static C(Other: UObject | any): ParticleModuleLocationBase;
}

declare class ParticleModuleLocation extends ParticleModuleLocationBase { 
	StartLocation: RawDistributionVector;
	DistributeOverNPoints: number;
	DistributeThreshold: number;
	static Load(ResourceName: string): ParticleModuleLocation;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocation;
	static GetDefaultObject(): ParticleModuleLocation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocation;
	static C(Other: UObject | any): ParticleModuleLocation;
}

declare class ParticleModuleLocation_Seeded extends ParticleModuleLocation { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLocation_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocation_Seeded;
	static GetDefaultObject(): ParticleModuleLocation_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocation_Seeded;
	static C(Other: UObject | any): ParticleModuleLocation_Seeded;
}

declare type ELocationBoneSocketSource = 'BONESOCKETSOURCE_Bones' | 'BONESOCKETSOURCE_Sockets' | 'BONESOCKETSOURCE_MAX';
declare var ELocationBoneSocketSource : { BONESOCKETSOURCE_Bones:'BONESOCKETSOURCE_Bones',BONESOCKETSOURCE_Sockets:'BONESOCKETSOURCE_Sockets',BONESOCKETSOURCE_MAX:'BONESOCKETSOURCE_MAX', };
declare class LocationBoneSocketInfo { 
	BoneSocketName: string;
	Offset: Vector;
	clone() : LocationBoneSocketInfo;
	static C(Other: UObject | any): LocationBoneSocketInfo;
}

declare type ELocationBoneSocketSelectionMethod = 'BONESOCKETSEL_Sequential' | 'BONESOCKETSEL_Random' | 'BONESOCKETSEL_MAX';
declare var ELocationBoneSocketSelectionMethod : { BONESOCKETSEL_Sequential:'BONESOCKETSEL_Sequential',BONESOCKETSEL_Random:'BONESOCKETSEL_Random',BONESOCKETSEL_MAX:'BONESOCKETSEL_MAX', };
declare class ParticleModuleLocationBoneSocket extends ParticleModuleLocationBase { 
	SourceType: ELocationBoneSocketSource;
	UniversalOffset: Vector;
	SourceLocations: LocationBoneSocketInfo[];
	SelectionMethod: ELocationBoneSocketSelectionMethod;
	bUpdatePositionEachFrame: boolean;
	bOrientMeshEmitters: boolean;
	bInheritBoneVelocity: boolean;
	InheritVelocityScale: number;
	SkelMeshActorParamName: string;
	NumPreSelectedIndices: number;
	EditorSkelMesh: SkeletalMesh;
	static Load(ResourceName: string): ParticleModuleLocationBoneSocket;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationBoneSocket;
	static GetDefaultObject(): ParticleModuleLocationBoneSocket;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationBoneSocket;
	static C(Other: UObject | any): ParticleModuleLocationBoneSocket;
}

declare class ParticleModuleLocationDirect extends ParticleModuleLocationBase { 
	Location: RawDistributionVector;
	LocationOffset: RawDistributionVector;
	ScaleFactor: RawDistributionVector;
	Direction: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleLocationDirect;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationDirect;
	static GetDefaultObject(): ParticleModuleLocationDirect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationDirect;
	static C(Other: UObject | any): ParticleModuleLocationDirect;
}

declare type ELocationEmitterSelectionMethod = 'ELESM_Random' | 'ELESM_Sequential' | 'ELESM_MAX';
declare var ELocationEmitterSelectionMethod : { ELESM_Random:'ELESM_Random',ELESM_Sequential:'ELESM_Sequential',ELESM_MAX:'ELESM_MAX', };
declare class ParticleModuleLocationEmitter extends ParticleModuleLocationBase { 
	EmitterName: string;
	SelectionMethod: ELocationEmitterSelectionMethod;
	InheritSourceVelocity: boolean;
	InheritSourceVelocityScale: number;
	bInheritSourceRotation: boolean;
	InheritSourceRotationScale: number;
	static Load(ResourceName: string): ParticleModuleLocationEmitter;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationEmitter;
	static GetDefaultObject(): ParticleModuleLocationEmitter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationEmitter;
	static C(Other: UObject | any): ParticleModuleLocationEmitter;
}

declare class ParticleModuleLocationEmitterDirect extends ParticleModuleLocationBase { 
	EmitterName: string;
	static Load(ResourceName: string): ParticleModuleLocationEmitterDirect;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationEmitterDirect;
	static GetDefaultObject(): ParticleModuleLocationEmitterDirect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationEmitterDirect;
	static C(Other: UObject | any): ParticleModuleLocationEmitterDirect;
}

declare class ParticleModuleLocationPrimitiveBase extends ParticleModuleLocationBase { 
	Positive_X: boolean;
	Positive_Y: boolean;
	Positive_Z: boolean;
	Negative_X: boolean;
	Negative_Y: boolean;
	Negative_Z: boolean;
	SurfaceOnly: boolean;
	Velocity: boolean;
	VelocityScale: RawDistributionFloat;
	StartLocation: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveBase;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveBase;
	static C(Other: UObject | any): ParticleModuleLocationPrimitiveBase;
}

declare type CylinderHeightAxis = 'PMLPC_HEIGHTAXIS_X' | 'PMLPC_HEIGHTAXIS_Y' | 'PMLPC_HEIGHTAXIS_Z' | 'PMLPC_HEIGHTAXIS_MAX';
declare var CylinderHeightAxis : { PMLPC_HEIGHTAXIS_X:'PMLPC_HEIGHTAXIS_X',PMLPC_HEIGHTAXIS_Y:'PMLPC_HEIGHTAXIS_Y',PMLPC_HEIGHTAXIS_Z:'PMLPC_HEIGHTAXIS_Z',PMLPC_HEIGHTAXIS_MAX:'PMLPC_HEIGHTAXIS_MAX', };
declare class ParticleModuleLocationPrimitiveCylinder extends ParticleModuleLocationPrimitiveBase { 
	RadialVelocity: boolean;
	StartRadius: RawDistributionFloat;
	StartHeight: RawDistributionFloat;
	HeightAxis: CylinderHeightAxis;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveCylinder;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveCylinder;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveCylinder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveCylinder;
	static C(Other: UObject | any): ParticleModuleLocationPrimitiveCylinder;
}

declare class ParticleModuleLocationPrimitiveCylinder_Seeded extends ParticleModuleLocationPrimitiveCylinder { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveCylinder_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveCylinder_Seeded;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveCylinder_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveCylinder_Seeded;
	static C(Other: UObject | any): ParticleModuleLocationPrimitiveCylinder_Seeded;
}

declare class ParticleModuleLocationPrimitiveSphere extends ParticleModuleLocationPrimitiveBase { 
	StartRadius: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveSphere;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveSphere;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveSphere;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveSphere;
	static C(Other: UObject | any): ParticleModuleLocationPrimitiveSphere;
}

declare class ParticleModuleLocationPrimitiveSphere_Seeded extends ParticleModuleLocationPrimitiveSphere { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveSphere_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveSphere_Seeded;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveSphere_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveSphere_Seeded;
	static C(Other: UObject | any): ParticleModuleLocationPrimitiveSphere_Seeded;
}

declare class ParticleModuleLocationPrimitiveTriangle extends ParticleModuleLocationBase { 
	StartOffset: RawDistributionVector;
	Height: RawDistributionFloat;
	Angle: RawDistributionFloat;
	Thickness: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveTriangle;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveTriangle;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveTriangle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveTriangle;
	static C(Other: UObject | any): ParticleModuleLocationPrimitiveTriangle;
}

declare type ELocationSkelVertSurfaceSource = 'VERTSURFACESOURCE_Vert' | 'VERTSURFACESOURCE_Surface' | 'VERTSURFACESOURCE_MAX';
declare var ELocationSkelVertSurfaceSource : { VERTSURFACESOURCE_Vert:'VERTSURFACESOURCE_Vert',VERTSURFACESOURCE_Surface:'VERTSURFACESOURCE_Surface',VERTSURFACESOURCE_MAX:'VERTSURFACESOURCE_MAX', };
declare class ParticleModuleLocationSkelVertSurface extends ParticleModuleLocationBase { 
	SourceType: ELocationSkelVertSurfaceSource;
	UniversalOffset: Vector;
	bUpdatePositionEachFrame: boolean;
	bOrientMeshEmitters: boolean;
	bInheritBoneVelocity: boolean;
	InheritVelocityScale: number;
	SkelMeshActorParamName: string;
	EditorSkelMesh: SkeletalMesh;
	ValidAssociatedBones: string[];
	bEnforceNormalCheck: boolean;
	NormalToCompare: Vector;
	NormalCheckToleranceDegrees: number;
	NormalCheckTolerance: number;
	ValidMaterialIndices: number[];
	bInheritVertexColor: boolean;
	bInheritUV: boolean;
	InheritUVChannel: any;
	static Load(ResourceName: string): ParticleModuleLocationSkelVertSurface;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationSkelVertSurface;
	static GetDefaultObject(): ParticleModuleLocationSkelVertSurface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationSkelVertSurface;
	static C(Other: UObject | any): ParticleModuleLocationSkelVertSurface;
}

declare class ParticleModuleLocationWorldOffset extends ParticleModuleLocation { 
	static Load(ResourceName: string): ParticleModuleLocationWorldOffset;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationWorldOffset;
	static GetDefaultObject(): ParticleModuleLocationWorldOffset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationWorldOffset;
	static C(Other: UObject | any): ParticleModuleLocationWorldOffset;
}

declare class ParticleModuleLocationWorldOffset_Seeded extends ParticleModuleLocationWorldOffset { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLocationWorldOffset_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationWorldOffset_Seeded;
	static GetDefaultObject(): ParticleModuleLocationWorldOffset_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationWorldOffset_Seeded;
	static C(Other: UObject | any): ParticleModuleLocationWorldOffset_Seeded;
}

declare class ParticleModuleMaterialBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleMaterialBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMaterialBase;
	static GetDefaultObject(): ParticleModuleMaterialBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMaterialBase;
	static C(Other: UObject | any): ParticleModuleMaterialBase;
}

declare class ParticleModuleMeshMaterial extends ParticleModuleMaterialBase { 
	MeshMaterials: MaterialInterface[];
	static Load(ResourceName: string): ParticleModuleMeshMaterial;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshMaterial;
	static GetDefaultObject(): ParticleModuleMeshMaterial;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshMaterial;
	static C(Other: UObject | any): ParticleModuleMeshMaterial;
}

declare class ParticleModuleRotationBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleRotationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationBase;
	static GetDefaultObject(): ParticleModuleRotationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationBase;
	static C(Other: UObject | any): ParticleModuleRotationBase;
}

declare class ParticleModuleMeshRotation extends ParticleModuleRotationBase { 
	StartRotation: RawDistributionVector;
	bInheritParent: boolean;
	static Load(ResourceName: string): ParticleModuleMeshRotation;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotation;
	static GetDefaultObject(): ParticleModuleMeshRotation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotation;
	static C(Other: UObject | any): ParticleModuleMeshRotation;
}

declare class ParticleModuleMeshRotation_Seeded extends ParticleModuleMeshRotation { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleMeshRotation_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotation_Seeded;
	static GetDefaultObject(): ParticleModuleMeshRotation_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotation_Seeded;
	static C(Other: UObject | any): ParticleModuleMeshRotation_Seeded;
}

declare class ParticleModuleRotationRateBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleRotationRateBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRateBase;
	static GetDefaultObject(): ParticleModuleRotationRateBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRateBase;
	static C(Other: UObject | any): ParticleModuleRotationRateBase;
}

declare class ParticleModuleMeshRotationRate extends ParticleModuleRotationRateBase { 
	StartRotationRate: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleMeshRotationRate;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRate;
	static GetDefaultObject(): ParticleModuleMeshRotationRate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRate;
	static C(Other: UObject | any): ParticleModuleMeshRotationRate;
}

declare class ParticleModuleMeshRotationRate_Seeded extends ParticleModuleMeshRotationRate { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleMeshRotationRate_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRate_Seeded;
	static GetDefaultObject(): ParticleModuleMeshRotationRate_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRate_Seeded;
	static C(Other: UObject | any): ParticleModuleMeshRotationRate_Seeded;
}

declare class ParticleModuleMeshRotationRateMultiplyLife extends ParticleModuleRotationRateBase { 
	LifeMultiplier: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleMeshRotationRateMultiplyLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRateMultiplyLife;
	static GetDefaultObject(): ParticleModuleMeshRotationRateMultiplyLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRateMultiplyLife;
	static C(Other: UObject | any): ParticleModuleMeshRotationRateMultiplyLife;
}

declare class ParticleModuleMeshRotationRateOverLife extends ParticleModuleRotationRateBase { 
	RotRate: RawDistributionVector;
	bScaleRotRate: boolean;
	static Load(ResourceName: string): ParticleModuleMeshRotationRateOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRateOverLife;
	static GetDefaultObject(): ParticleModuleMeshRotationRateOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRateOverLife;
	static C(Other: UObject | any): ParticleModuleMeshRotationRateOverLife;
}

declare class ParticleModuleOrientationBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleOrientationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrientationBase;
	static GetDefaultObject(): ParticleModuleOrientationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrientationBase;
	static C(Other: UObject | any): ParticleModuleOrientationBase;
}

declare type EParticleAxisLock = 'EPAL_NONE' | 'EPAL_X' | 'EPAL_Y' | 'EPAL_Z' | 'EPAL_NEGATIVE_X' | 'EPAL_NEGATIVE_Y' | 'EPAL_NEGATIVE_Z' | 'EPAL_ROTATE_X' | 'EPAL_ROTATE_Y' | 'EPAL_ROTATE_Z' | 'EPAL_MAX';
declare var EParticleAxisLock : { EPAL_NONE:'EPAL_NONE',EPAL_X:'EPAL_X',EPAL_Y:'EPAL_Y',EPAL_Z:'EPAL_Z',EPAL_NEGATIVE_X:'EPAL_NEGATIVE_X',EPAL_NEGATIVE_Y:'EPAL_NEGATIVE_Y',EPAL_NEGATIVE_Z:'EPAL_NEGATIVE_Z',EPAL_ROTATE_X:'EPAL_ROTATE_X',EPAL_ROTATE_Y:'EPAL_ROTATE_Y',EPAL_ROTATE_Z:'EPAL_ROTATE_Z',EPAL_MAX:'EPAL_MAX', };
declare class ParticleModuleOrientationAxisLock extends ParticleModuleOrientationBase { 
	LockAxisFlags: EParticleAxisLock;
	static Load(ResourceName: string): ParticleModuleOrientationAxisLock;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrientationAxisLock;
	static GetDefaultObject(): ParticleModuleOrientationAxisLock;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrientationAxisLock;
	static C(Other: UObject | any): ParticleModuleOrientationAxisLock;
}

declare class ParticleModuleParameterBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleParameterBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterBase;
	static GetDefaultObject(): ParticleModuleParameterBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterBase;
	static C(Other: UObject | any): ParticleModuleParameterBase;
}

declare type EEmitterDynamicParameterValue = 'EDPV_UserSet' | 'EDPV_AutoSet' | 'EDPV_VelocityX' | 'EDPV_VelocityY' | 'EDPV_VelocityZ' | 'EDPV_VelocityMag' | 'EDPV_MAX';
declare var EEmitterDynamicParameterValue : { EDPV_UserSet:'EDPV_UserSet',EDPV_AutoSet:'EDPV_AutoSet',EDPV_VelocityX:'EDPV_VelocityX',EDPV_VelocityY:'EDPV_VelocityY',EDPV_VelocityZ:'EDPV_VelocityZ',EDPV_VelocityMag:'EDPV_VelocityMag',EDPV_MAX:'EDPV_MAX', };
declare class EmitterDynamicParameter { 
	ParamName: string;
	bUseEmitterTime: boolean;
	bSpawnTimeOnly: boolean;
	ValueMethod: EEmitterDynamicParameterValue;
	bScaleVelocityByParamValue: boolean;
	ParamValue: RawDistributionFloat;
	clone() : EmitterDynamicParameter;
	static C(Other: UObject | any): EmitterDynamicParameter;
}

declare class ParticleModuleParameterDynamic extends ParticleModuleParameterBase { 
	DynamicParams: EmitterDynamicParameter[];
	UpdateFlags: number;
	bUsesVelocity: boolean;
	static Load(ResourceName: string): ParticleModuleParameterDynamic;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterDynamic;
	static GetDefaultObject(): ParticleModuleParameterDynamic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterDynamic;
	static C(Other: UObject | any): ParticleModuleParameterDynamic;
}

declare class ParticleModuleParameterDynamic_Seeded extends ParticleModuleParameterDynamic { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleParameterDynamic_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterDynamic_Seeded;
	static GetDefaultObject(): ParticleModuleParameterDynamic_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterDynamic_Seeded;
	static C(Other: UObject | any): ParticleModuleParameterDynamic_Seeded;
}

declare class ParticleModulePivotOffset extends ParticleModuleLocationBase { 
	PivotOffset: Vector2D;
	static Load(ResourceName: string): ParticleModulePivotOffset;
	static Find(Outer: UObject, ResourceName: string): ParticleModulePivotOffset;
	static GetDefaultObject(): ParticleModulePivotOffset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModulePivotOffset;
	static C(Other: UObject | any): ParticleModulePivotOffset;
}

declare class ParticleModuleRotation extends ParticleModuleRotationBase { 
	StartRotation: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleRotation;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotation;
	static GetDefaultObject(): ParticleModuleRotation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotation;
	static C(Other: UObject | any): ParticleModuleRotation;
}

declare class ParticleModuleRotation_Seeded extends ParticleModuleRotation { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleRotation_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotation_Seeded;
	static GetDefaultObject(): ParticleModuleRotation_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotation_Seeded;
	static C(Other: UObject | any): ParticleModuleRotation_Seeded;
}

declare class ParticleModuleRotationOverLifetime extends ParticleModuleRotationBase { 
	RotationOverLife: RawDistributionFloat;
	Scale: boolean;
	static Load(ResourceName: string): ParticleModuleRotationOverLifetime;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationOverLifetime;
	static GetDefaultObject(): ParticleModuleRotationOverLifetime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationOverLifetime;
	static C(Other: UObject | any): ParticleModuleRotationOverLifetime;
}

declare class ParticleModuleRotationRate extends ParticleModuleRotationRateBase { 
	StartRotationRate: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleRotationRate;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRate;
	static GetDefaultObject(): ParticleModuleRotationRate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRate;
	static C(Other: UObject | any): ParticleModuleRotationRate;
}

declare class ParticleModuleRotationRate_Seeded extends ParticleModuleRotationRate { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleRotationRate_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRate_Seeded;
	static GetDefaultObject(): ParticleModuleRotationRate_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRate_Seeded;
	static C(Other: UObject | any): ParticleModuleRotationRate_Seeded;
}

declare class ParticleModuleRotationRateMultiplyLife extends ParticleModuleRotationRateBase { 
	LifeMultiplier: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleRotationRateMultiplyLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRateMultiplyLife;
	static GetDefaultObject(): ParticleModuleRotationRateMultiplyLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRateMultiplyLife;
	static C(Other: UObject | any): ParticleModuleRotationRateMultiplyLife;
}

declare class ParticleModuleSizeBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleSizeBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeBase;
	static GetDefaultObject(): ParticleModuleSizeBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeBase;
	static C(Other: UObject | any): ParticleModuleSizeBase;
}

declare class ParticleModuleSize extends ParticleModuleSizeBase { 
	StartSize: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleSize;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSize;
	static GetDefaultObject(): ParticleModuleSize;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSize;
	static C(Other: UObject | any): ParticleModuleSize;
}

declare class ParticleModuleSize_Seeded extends ParticleModuleSize { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleSize_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSize_Seeded;
	static GetDefaultObject(): ParticleModuleSize_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSize_Seeded;
	static C(Other: UObject | any): ParticleModuleSize_Seeded;
}

declare class ParticleModuleSizeMultiplyLife extends ParticleModuleSizeBase { 
	LifeMultiplier: RawDistributionVector;
	MultiplyX: boolean;
	MultiplyY: boolean;
	MultiplyZ: boolean;
	static Load(ResourceName: string): ParticleModuleSizeMultiplyLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeMultiplyLife;
	static GetDefaultObject(): ParticleModuleSizeMultiplyLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeMultiplyLife;
	static C(Other: UObject | any): ParticleModuleSizeMultiplyLife;
}

declare class ParticleModuleSizeScale extends ParticleModuleSizeBase { 
	SizeScale: RawDistributionVector;
	EnableX: boolean;
	EnableY: boolean;
	EnableZ: boolean;
	static Load(ResourceName: string): ParticleModuleSizeScale;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeScale;
	static GetDefaultObject(): ParticleModuleSizeScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeScale;
	static C(Other: UObject | any): ParticleModuleSizeScale;
}

declare class ParticleModuleSizeScaleBySpeed extends ParticleModuleSizeBase { 
	SpeedScale: Vector2D;
	MaxScale: Vector2D;
	static Load(ResourceName: string): ParticleModuleSizeScaleBySpeed;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeScaleBySpeed;
	static GetDefaultObject(): ParticleModuleSizeScaleBySpeed;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeScaleBySpeed;
	static C(Other: UObject | any): ParticleModuleSizeScaleBySpeed;
}

declare class ParticleModuleSourceMovement extends ParticleModuleLocationBase { 
	SourceMovementScale: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleSourceMovement;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSourceMovement;
	static GetDefaultObject(): ParticleModuleSourceMovement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSourceMovement;
	static C(Other: UObject | any): ParticleModuleSourceMovement;
}

declare class ParticleModuleSpawnPerUnit extends ParticleModuleSpawnBase { 
	UnitScalar: number;
	MovementTolerance: number;
	SpawnPerUnit: RawDistributionFloat;
	MaxFrameDistance: number;
	bIgnoreSpawnRateWhenMoving: boolean;
	bIgnoreMovementAlongX: boolean;
	bIgnoreMovementAlongY: boolean;
	bIgnoreMovementAlongZ: boolean;
	static Load(ResourceName: string): ParticleModuleSpawnPerUnit;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSpawnPerUnit;
	static GetDefaultObject(): ParticleModuleSpawnPerUnit;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSpawnPerUnit;
	static C(Other: UObject | any): ParticleModuleSpawnPerUnit;
}

declare class ParticleModuleSubUVBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleSubUVBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSubUVBase;
	static GetDefaultObject(): ParticleModuleSubUVBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSubUVBase;
	static C(Other: UObject | any): ParticleModuleSubUVBase;
}

declare class SubUVAnimation extends UObject { 
	SubUVTexture: Texture2D;
	SubImages_Horizontal: number;
	SubImages_Vertical: number;
	BoundingMode: ESubUVBoundingVertexCount;
	OpacitySourceMode: EOpacitySourceMode;
	AlphaThreshold: number;
	static Load(ResourceName: string): SubUVAnimation;
	static Find(Outer: UObject, ResourceName: string): SubUVAnimation;
	static GetDefaultObject(): SubUVAnimation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubUVAnimation;
	static C(Other: UObject | any): SubUVAnimation;
}

declare class ParticleModuleSubUV extends ParticleModuleSubUVBase { 
	Animation: SubUVAnimation;
	SubImageIndex: RawDistributionFloat;
	bUseRealTime: boolean;
	static Load(ResourceName: string): ParticleModuleSubUV;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSubUV;
	static GetDefaultObject(): ParticleModuleSubUV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSubUV;
	static C(Other: UObject | any): ParticleModuleSubUV;
}

declare class ParticleModuleSubUVMovie extends ParticleModuleSubUV { 
	bUseEmitterTime: boolean;
	FrameRate: RawDistributionFloat;
	StartingFrame: number;
	static Load(ResourceName: string): ParticleModuleSubUVMovie;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSubUVMovie;
	static GetDefaultObject(): ParticleModuleSubUVMovie;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSubUVMovie;
	static C(Other: UObject | any): ParticleModuleSubUVMovie;
}

declare class ParticleModuleTrailBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleTrailBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTrailBase;
	static GetDefaultObject(): ParticleModuleTrailBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTrailBase;
	static C(Other: UObject | any): ParticleModuleTrailBase;
}

declare type ETrail2SourceMethod = 'PET2SRCM_Default' | 'PET2SRCM_Particle' | 'PET2SRCM_Actor' | 'PET2SRCM_MAX';
declare var ETrail2SourceMethod : { PET2SRCM_Default:'PET2SRCM_Default',PET2SRCM_Particle:'PET2SRCM_Particle',PET2SRCM_Actor:'PET2SRCM_Actor',PET2SRCM_MAX:'PET2SRCM_MAX', };
declare type EParticleSourceSelectionMethod = 'EPSSM_Random' | 'EPSSM_Sequential' | 'EPSSM_MAX';
declare var EParticleSourceSelectionMethod : { EPSSM_Random:'EPSSM_Random',EPSSM_Sequential:'EPSSM_Sequential',EPSSM_MAX:'EPSSM_MAX', };
declare class ParticleModuleTrailSource extends ParticleModuleTrailBase { 
	SourceMethod: ETrail2SourceMethod;
	SourceName: string;
	SourceStrength: RawDistributionFloat;
	bLockSourceStength: boolean;
	SourceOffsetCount: number;
	SourceOffsetDefaults: Vector[];
	SelectionMethod: EParticleSourceSelectionMethod;
	bInheritRotation: boolean;
	static Load(ResourceName: string): ParticleModuleTrailSource;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTrailSource;
	static GetDefaultObject(): ParticleModuleTrailSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTrailSource;
	static C(Other: UObject | any): ParticleModuleTrailSource;
}

declare class ParticleModuleTypeDataAnimTrail extends ParticleModuleTypeDataBase { 
	bDeadTrailsOnDeactivate: boolean;
	bEnablePreviousTangentRecalculation: boolean;
	bTangentRecalculationEveryFrame: boolean;
	TilingDistance: number;
	DistanceTessellationStepSize: number;
	TangentTessellationStepSize: number;
	WidthTessellationStepSize: number;
	static Load(ResourceName: string): ParticleModuleTypeDataAnimTrail;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataAnimTrail;
	static GetDefaultObject(): ParticleModuleTypeDataAnimTrail;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataAnimTrail;
	static C(Other: UObject | any): ParticleModuleTypeDataAnimTrail;
}

declare type EBeam2Method = 'PEB2M_Distance' | 'PEB2M_Target' | 'PEB2M_Branch' | 'PEB2M_MAX';
declare var EBeam2Method : { PEB2M_Distance:'PEB2M_Distance',PEB2M_Target:'PEB2M_Target',PEB2M_Branch:'PEB2M_Branch',PEB2M_MAX:'PEB2M_MAX', };
declare type EBeamTaperMethod = 'PEBTM_None' | 'PEBTM_Full' | 'PEBTM_Partial' | 'PEBTM_MAX';
declare var EBeamTaperMethod : { PEBTM_None:'PEBTM_None',PEBTM_Full:'PEBTM_Full',PEBTM_Partial:'PEBTM_Partial',PEBTM_MAX:'PEBTM_MAX', };
declare class ParticleModuleTypeDataBeam2 extends ParticleModuleTypeDataBase { 
	BeamMethod: EBeam2Method;
	TextureTile: number;
	TextureTileDistance: number;
	Sheets: number;
	MaxBeamCount: number;
	Speed: number;
	InterpolationPoints: number;
	bAlwaysOn: boolean;
	UpVectorStepSize: number;
	BranchParentName: string;
	Distance: RawDistributionFloat;
	TaperMethod: EBeamTaperMethod;
	TaperFactor: RawDistributionFloat;
	TaperScale: RawDistributionFloat;
	RenderGeometry: boolean;
	RenderDirectLine: boolean;
	RenderLines: boolean;
	RenderTessellation: boolean;
	static Load(ResourceName: string): ParticleModuleTypeDataBeam2;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataBeam2;
	static GetDefaultObject(): ParticleModuleTypeDataBeam2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataBeam2;
	static C(Other: UObject | any): ParticleModuleTypeDataBeam2;
}

declare class VectorField extends UObject { 
	Bounds: Box;
	Intensity: number;
	static Load(ResourceName: string): VectorField;
	static Find(Outer: UObject, ResourceName: string): VectorField;
	static GetDefaultObject(): VectorField;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorField;
	static C(Other: UObject | any): VectorField;
}

declare class GPUSpriteLocalVectorFieldInfo { 
	Field: VectorField;
	Transform: Transform;
	MinInitialRotation: Rotator;
	MaxInitialRotation: Rotator;
	RotationRate: Rotator;
	Intensity: number;
	Tightness: number;
	bIgnoreComponentTransform: boolean;
	bTileX: boolean;
	bTileY: boolean;
	bTileZ: boolean;
	bUseFixDT: boolean;
	clone() : GPUSpriteLocalVectorFieldInfo;
	static C(Other: UObject | any): GPUSpriteLocalVectorFieldInfo;
}

declare class FloatDistribution { 
	Table: DistributionLookupTable;
	clone() : FloatDistribution;
	static C(Other: UObject | any): FloatDistribution;
}

declare class GPUSpriteEmitterInfo { 
	RequiredModule: ParticleModuleRequired;
	SpawnModule: ParticleModuleSpawn;
	SpawnPerUnitModule: ParticleModuleSpawnPerUnit;
	SpawnModules: ParticleModule[];
	LocalVectorField: GPUSpriteLocalVectorFieldInfo;
	VectorFieldScale: FloatDistribution;
	DragCoefficient: FloatDistribution;
	PointAttractorStrength: FloatDistribution;
	Resilience: FloatDistribution;
	ConstantAcceleration: Vector;
	PointAttractorPosition: Vector;
	PointAttractorRadiusSq: number;
	OrbitOffsetBase: Vector;
	OrbitOffsetRange: Vector;
	InvMaxSize: Vector2D;
	InvRotationRateScale: number;
	MaxLifetime: number;
	MaxParticleCount: number;
	ScreenAlignment: EParticleScreenAlignment;
	LockAxisFlag: EParticleAxisLock;
	bEnableCollision: boolean;
	CollisionMode: EParticleCollisionMode;
	bRemoveHMDRoll: boolean;
	MinFacingCameraBlendDistance: number;
	MaxFacingCameraBlendDistance: number;
	DynamicColor: RawDistributionVector;
	DynamicAlpha: RawDistributionFloat;
	DynamicColorScale: RawDistributionVector;
	DynamicAlphaScale: RawDistributionFloat;
	clone() : GPUSpriteEmitterInfo;
	static C(Other: UObject | any): GPUSpriteEmitterInfo;
}

declare class GPUSpriteResourceData { 
	QuantizedColorSamples: Color[];
	QuantizedMiscSamples: Color[];
	QuantizedSimulationAttrSamples: Color[];
	ColorScale: Vector4;
	ColorBias: Vector4;
	MiscScale: Vector4;
	MiscBias: Vector4;
	SimulationAttrCurveScale: Vector4;
	SimulationAttrCurveBias: Vector4;
	SubImageSize: Vector4;
	SizeBySpeed: Vector4;
	ConstantAcceleration: Vector;
	OrbitOffsetBase: Vector;
	OrbitOffsetRange: Vector;
	OrbitFrequencyBase: Vector;
	OrbitFrequencyRange: Vector;
	OrbitPhaseBase: Vector;
	OrbitPhaseRange: Vector;
	GlobalVectorFieldScale: number;
	GlobalVectorFieldTightness: number;
	PerParticleVectorFieldScale: number;
	PerParticleVectorFieldBias: number;
	DragCoefficientScale: number;
	DragCoefficientBias: number;
	ResilienceScale: number;
	ResilienceBias: number;
	CollisionRadiusScale: number;
	CollisionRadiusBias: number;
	CollisionTimeBias: number;
	CollisionRandomSpread: number;
	CollisionRandomDistribution: number;
	OneMinusFriction: number;
	RotationRateScale: number;
	CameraMotionBlurAmount: number;
	ScreenAlignment: EParticleScreenAlignment;
	LockAxisFlag: EParticleAxisLock;
	PivotOffset: Vector2D;
	bRemoveHMDRoll: boolean;
	MinFacingCameraBlendDistance: number;
	MaxFacingCameraBlendDistance: number;
	clone() : GPUSpriteResourceData;
	static C(Other: UObject | any): GPUSpriteResourceData;
}

declare class ParticleModuleTypeDataGpu extends ParticleModuleTypeDataBase { 
	EmitterInfo: GPUSpriteEmitterInfo;
	ResourceData: GPUSpriteResourceData;
	CameraMotionBlurAmount: number;
	bClearExistingParticlesOnInit: boolean;
	static Load(ResourceName: string): ParticleModuleTypeDataGpu;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataGpu;
	static GetDefaultObject(): ParticleModuleTypeDataGpu;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataGpu;
	static C(Other: UObject | any): ParticleModuleTypeDataGpu;
}

declare type EMeshScreenAlignment = 'PSMA_MeshFaceCameraWithRoll' | 'PSMA_MeshFaceCameraWithSpin' | 'PSMA_MeshFaceCameraWithLockedAxis' | 'PSMA_MAX';
declare var EMeshScreenAlignment : { PSMA_MeshFaceCameraWithRoll:'PSMA_MeshFaceCameraWithRoll',PSMA_MeshFaceCameraWithSpin:'PSMA_MeshFaceCameraWithSpin',PSMA_MeshFaceCameraWithLockedAxis:'PSMA_MeshFaceCameraWithLockedAxis',PSMA_MAX:'PSMA_MAX', };
declare type EMeshCameraFacingUpAxis = 'CameraFacing_NoneUP' | 'CameraFacing_ZUp' | 'CameraFacing_NegativeZUp' | 'CameraFacing_YUp' | 'CameraFacing_NegativeYUp' | 'CameraFacing_MAX';
declare var EMeshCameraFacingUpAxis : { CameraFacing_NoneUP:'CameraFacing_NoneUP',CameraFacing_ZUp:'CameraFacing_ZUp',CameraFacing_NegativeZUp:'CameraFacing_NegativeZUp',CameraFacing_YUp:'CameraFacing_YUp',CameraFacing_NegativeYUp:'CameraFacing_NegativeYUp',CameraFacing_MAX:'CameraFacing_MAX', };
declare type EMeshCameraFacingOptions = 'XAxisFacing_NoUp' | 'XAxisFacing_ZUp' | 'XAxisFacing_NegativeZUp' | 'XAxisFacing_YUp' | 'XAxisFacing_NegativeYUp' | 'LockedAxis_ZAxisFacing' | 'LockedAxis_NegativeZAxisFacing' | 'LockedAxis_YAxisFacing' | 'LockedAxis_NegativeYAxisFacing' | 'VelocityAligned_ZAxisFacing' | 'VelocityAligned_NegativeZAxisFacing' | 'VelocityAligned_YAxisFacing' | 'VelocityAligned_NegativeYAxisFacing' | 'EMeshCameraFacingOptions_MAX';
declare var EMeshCameraFacingOptions : { XAxisFacing_NoUp:'XAxisFacing_NoUp',XAxisFacing_ZUp:'XAxisFacing_ZUp',XAxisFacing_NegativeZUp:'XAxisFacing_NegativeZUp',XAxisFacing_YUp:'XAxisFacing_YUp',XAxisFacing_NegativeYUp:'XAxisFacing_NegativeYUp',LockedAxis_ZAxisFacing:'LockedAxis_ZAxisFacing',LockedAxis_NegativeZAxisFacing:'LockedAxis_NegativeZAxisFacing',LockedAxis_YAxisFacing:'LockedAxis_YAxisFacing',LockedAxis_NegativeYAxisFacing:'LockedAxis_NegativeYAxisFacing',VelocityAligned_ZAxisFacing:'VelocityAligned_ZAxisFacing',VelocityAligned_NegativeZAxisFacing:'VelocityAligned_NegativeZAxisFacing',VelocityAligned_YAxisFacing:'VelocityAligned_YAxisFacing',VelocityAligned_NegativeYAxisFacing:'VelocityAligned_NegativeYAxisFacing',EMeshCameraFacingOptions_MAX:'EMeshCameraFacingOptions_MAX', };
declare class ParticleModuleTypeDataMesh extends ParticleModuleTypeDataBase { 
	Mesh: StaticMesh;
	LODSizeScale: number;
	bUseStaticMeshLODs: boolean;
	CastShadows: boolean;
	DoCollisions: boolean;
	MeshAlignment: EMeshScreenAlignment;
	bOverrideMaterial: boolean;
	bOverrideDefaultMotionBlurSettings: boolean;
	bEnableMotionBlur: boolean;
	RollPitchYawRange: RawDistributionVector;
	AxisLockOption: EParticleAxisLock;
	bCameraFacing: boolean;
	CameraFacingUpAxisOption: EMeshCameraFacingUpAxis;
	CameraFacingOption: EMeshCameraFacingOptions;
	bApplyParticleRotationAsSpin: boolean;
	bFaceCameraDirectionRatherThanPosition: boolean;
	bCollisionsConsiderPartilceSize: boolean;
	static Load(ResourceName: string): ParticleModuleTypeDataMesh;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataMesh;
	static GetDefaultObject(): ParticleModuleTypeDataMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataMesh;
	static C(Other: UObject | any): ParticleModuleTypeDataMesh;
}

declare type ETrailsRenderAxisOption = 'Trails_CameraUp' | 'Trails_SourceUp' | 'Trails_WorldUp' | 'Trails_MAX';
declare var ETrailsRenderAxisOption : { Trails_CameraUp:'Trails_CameraUp',Trails_SourceUp:'Trails_SourceUp',Trails_WorldUp:'Trails_WorldUp',Trails_MAX:'Trails_MAX', };
declare class ParticleModuleTypeDataRibbon extends ParticleModuleTypeDataBase { 
	MaxTessellationBetweenParticles: number;
	SheetsPerTrail: number;
	MaxTrailCount: number;
	MaxParticleInTrailCount: number;
	bDeadTrailsOnDeactivate: boolean;
	bDeadTrailsOnSourceLoss: boolean;
	bClipSourceSegement: boolean;
	bEnablePreviousTangentRecalculation: boolean;
	bTangentRecalculationEveryFrame: boolean;
	bSpawnInitialParticle: boolean;
	RenderAxis: ETrailsRenderAxisOption;
	TangentSpawningScalar: number;
	bRenderGeometry: boolean;
	bRenderSpawnPoints: boolean;
	bRenderTangents: boolean;
	bRenderTessellation: boolean;
	TilingDistance: number;
	DistanceTessellationStepSize: number;
	bEnableTangentDiffInterpScale: boolean;
	TangentTessellationScalar: number;
	static Load(ResourceName: string): ParticleModuleTypeDataRibbon;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataRibbon;
	static GetDefaultObject(): ParticleModuleTypeDataRibbon;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataRibbon;
	static C(Other: UObject | any): ParticleModuleTypeDataRibbon;
}

declare class ParticleModuleVectorFieldBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleVectorFieldBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldBase;
	static GetDefaultObject(): ParticleModuleVectorFieldBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldBase;
	static C(Other: UObject | any): ParticleModuleVectorFieldBase;
}

declare class ParticleModuleVectorFieldGlobal extends ParticleModuleVectorFieldBase { 
	bOverrideGlobalVectorFieldTightness: boolean;
	GlobalVectorFieldScale: number;
	GlobalVectorFieldTightness: number;
	static Load(ResourceName: string): ParticleModuleVectorFieldGlobal;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldGlobal;
	static GetDefaultObject(): ParticleModuleVectorFieldGlobal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldGlobal;
	static C(Other: UObject | any): ParticleModuleVectorFieldGlobal;
}

declare class ParticleModuleVectorFieldLocal extends ParticleModuleVectorFieldBase { 
	VectorField: VectorField;
	RelativeTranslation: Vector;
	RelativeRotation: Rotator;
	RelativeScale3D: Vector;
	Intensity: number;
	Tightness: number;
	bIgnoreComponentTransform: boolean;
	bTileX: boolean;
	bTileY: boolean;
	bTileZ: boolean;
	bUseFixDT: boolean;
	static Load(ResourceName: string): ParticleModuleVectorFieldLocal;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldLocal;
	static GetDefaultObject(): ParticleModuleVectorFieldLocal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldLocal;
	static C(Other: UObject | any): ParticleModuleVectorFieldLocal;
}

declare class ParticleModuleVectorFieldRotation extends ParticleModuleVectorFieldBase { 
	MinInitialRotation: Vector;
	MaxInitialRotation: Vector;
	static Load(ResourceName: string): ParticleModuleVectorFieldRotation;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldRotation;
	static GetDefaultObject(): ParticleModuleVectorFieldRotation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldRotation;
	static C(Other: UObject | any): ParticleModuleVectorFieldRotation;
}

declare class ParticleModuleVectorFieldRotationRate extends ParticleModuleVectorFieldBase { 
	RotationRate: Vector;
	static Load(ResourceName: string): ParticleModuleVectorFieldRotationRate;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldRotationRate;
	static GetDefaultObject(): ParticleModuleVectorFieldRotationRate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldRotationRate;
	static C(Other: UObject | any): ParticleModuleVectorFieldRotationRate;
}

declare class ParticleModuleVectorFieldScale extends ParticleModuleVectorFieldBase { 
	VectorFieldScale: DistributionFloat;
	VectorFieldScaleRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleVectorFieldScale;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldScale;
	static GetDefaultObject(): ParticleModuleVectorFieldScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldScale;
	static C(Other: UObject | any): ParticleModuleVectorFieldScale;
}

declare class ParticleModuleVectorFieldScaleOverLife extends ParticleModuleVectorFieldBase { 
	VectorFieldScaleOverLife: DistributionFloat;
	VectorFieldScaleOverLifeRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleVectorFieldScaleOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldScaleOverLife;
	static GetDefaultObject(): ParticleModuleVectorFieldScaleOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldScaleOverLife;
	static C(Other: UObject | any): ParticleModuleVectorFieldScaleOverLife;
}

declare class ParticleModuleVelocityBase extends ParticleModule { 
	bInWorldSpace: boolean;
	bApplyOwnerScale: boolean;
	static Load(ResourceName: string): ParticleModuleVelocityBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocityBase;
	static GetDefaultObject(): ParticleModuleVelocityBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocityBase;
	static C(Other: UObject | any): ParticleModuleVelocityBase;
}

declare class ParticleModuleVelocity extends ParticleModuleVelocityBase { 
	StartVelocity: RawDistributionVector;
	StartVelocityRadial: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleVelocity;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocity;
	static GetDefaultObject(): ParticleModuleVelocity;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocity;
	static C(Other: UObject | any): ParticleModuleVelocity;
}

declare class ParticleModuleVelocity_Seeded extends ParticleModuleVelocity { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleVelocity_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocity_Seeded;
	static GetDefaultObject(): ParticleModuleVelocity_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocity_Seeded;
	static C(Other: UObject | any): ParticleModuleVelocity_Seeded;
}

declare class ParticleModuleVelocityCone extends ParticleModuleVelocityBase { 
	Angle: RawDistributionFloat;
	Velocity: RawDistributionFloat;
	Direction: Vector;
	static Load(ResourceName: string): ParticleModuleVelocityCone;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocityCone;
	static GetDefaultObject(): ParticleModuleVelocityCone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocityCone;
	static C(Other: UObject | any): ParticleModuleVelocityCone;
}

declare class ParticleModuleVelocityInheritParent extends ParticleModuleVelocityBase { 
	Scale: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleVelocityInheritParent;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocityInheritParent;
	static GetDefaultObject(): ParticleModuleVelocityInheritParent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocityInheritParent;
	static C(Other: UObject | any): ParticleModuleVelocityInheritParent;
}

declare class ParticleModuleVelocityOverLifetime extends ParticleModuleVelocityBase { 
	VelOverLife: RawDistributionVector;
	Absolute: boolean;
	static Load(ResourceName: string): ParticleModuleVelocityOverLifetime;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocityOverLifetime;
	static GetDefaultObject(): ParticleModuleVelocityOverLifetime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocityOverLifetime;
	static C(Other: UObject | any): ParticleModuleVelocityOverLifetime;
}

declare class ParticleSpriteEmitter extends ParticleEmitter { 
	static Load(ResourceName: string): ParticleSpriteEmitter;
	static Find(Outer: UObject, ResourceName: string): ParticleSpriteEmitter;
	static GetDefaultObject(): ParticleSpriteEmitter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSpriteEmitter;
	static C(Other: UObject | any): ParticleSpriteEmitter;
}

declare class PathFollowingAgentInterface extends Interface { 
	static Load(ResourceName: string): PathFollowingAgentInterface;
	static Find(Outer: UObject, ResourceName: string): PathFollowingAgentInterface;
	static GetDefaultObject(): PathFollowingAgentInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PathFollowingAgentInterface;
	static C(Other: UObject | any): PathFollowingAgentInterface;
}

declare class PawnNoiseEmitterComponent extends ActorComponent { 
	bAIPerceptionSystemCompatibilityMode: boolean;
	LastRemoteNoisePosition: Vector;
	NoiseLifetime: number;
	LastRemoteNoiseVolume: number;
	LastRemoteNoiseTime: number;
	LastLocalNoiseVolume: number;
	LastLocalNoiseTime: number;
	static Load(ResourceName: string): PawnNoiseEmitterComponent;
	static Find(Outer: UObject, ResourceName: string): PawnNoiseEmitterComponent;
	static GetDefaultObject(): PawnNoiseEmitterComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnNoiseEmitterComponent;
	MakeNoise(NoiseMaker: Actor,Loudness: number,NoiseLocation: Vector): void;
	static C(Other: UObject | any): PawnNoiseEmitterComponent;
}

declare class PhysicalAnimationComponent extends ActorComponent { 
	StrengthMultiplyer: number;
	SkeletalMeshComponent: SkeletalMeshComponent;
	static Load(ResourceName: string): PhysicalAnimationComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicalAnimationComponent;
	static GetDefaultObject(): PhysicalAnimationComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalAnimationComponent;
	SetStrengthMultiplyer(InStrengthMultiplyer: number): void;
	SetSkeletalMeshComponent(InSkeletalMeshComponent: SkeletalMeshComponent): void;
	GetBodyTargetTransform(BodyName: string): Transform;
	ApplyPhysicalAnimationSettingsBelow(BodyName: string,PhysicalAnimationData: PhysicalAnimationData,bIncludeSelf: boolean): void;
	ApplyPhysicalAnimationSettings(BodyName: string,PhysicalAnimationData: PhysicalAnimationData): void;
	ApplyPhysicalAnimationProfileBelow(BodyName: string,ProfileName: string,bIncludeSelf: boolean,bClearNotFound: boolean): void;
	static C(Other: UObject | any): PhysicalAnimationComponent;
}

declare class RigidBodyBase extends Actor { 
	static GetDefaultObject(): RigidBodyBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RigidBodyBase;
	static C(Other: UObject | any): RigidBodyBase;
}

declare class ConstrainComponentPropName { 
	ComponentName: string;
	clone() : ConstrainComponentPropName;
	static C(Other: UObject | any): ConstrainComponentPropName;
}

declare type EConstraintFrame = 'Frame1' | 'Frame2' | 'EConstraintFrame_MAX';
declare var EConstraintFrame : { Frame1:'Frame1',Frame2:'Frame2',EConstraintFrame_MAX:'EConstraintFrame_MAX', };
declare class PhysicsConstraintComponent extends SceneComponent { 
	ConstraintActor1: Actor;
	ComponentName1: ConstrainComponentPropName;
	ConstraintActor2: Actor;
	ComponentName2: ConstrainComponentPropName;
	ConstraintSetup: PhysicsConstraintTemplate;
	OnConstraintBroken: UnrealEngineMulticastDelegate<(ConstraintIndex: number) => void>;
	ConstraintInstance: ConstraintInstance;
	static Load(ResourceName: string): PhysicsConstraintComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsConstraintComponent;
	static GetDefaultObject(): PhysicsConstraintComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsConstraintComponent;
	SetOrientationDriveTwistAndSwing(bEnableTwistDrive: boolean,bEnableSwingDrive: boolean): void;
	SetOrientationDriveSLERP(bEnableSLERP: boolean): void;
	SetLinearZLimit(ConstraintType: ELinearConstraintMotion,LimitSize: number): void;
	SetLinearYLimit(ConstraintType: ELinearConstraintMotion,LimitSize: number): void;
	SetLinearXLimit(ConstraintType: ELinearConstraintMotion,LimitSize: number): void;
	SetLinearVelocityTarget(InVelTarget: Vector): void;
	SetLinearVelocityDrive(bEnableDriveX: boolean,bEnableDriveY: boolean,bEnableDriveZ: boolean): void;
	SetLinearPositionTarget(InPosTarget: Vector): void;
	SetLinearPositionDrive(bEnableDriveX: boolean,bEnableDriveY: boolean,bEnableDriveZ: boolean): void;
	SetLinearPlasticity(bLinearPlasticity: boolean,LinearPlasticityThreshold: number): void;
	SetLinearDriveParams(PositionStrength: number,VelocityStrength: number,InForceLimit: number): void;
	SetLinearBreakable(bLinearBreakable: boolean,LinearBreakThreshold: number): void;
	SetDisableCollision(bDisableCollision: boolean): void;
	SetConstraintReferencePosition(Frame: EConstraintFrame,RefPosition: Vector): void;
	SetConstraintReferenceOrientation(Frame: EConstraintFrame,PriAxis: Vector,SecAxis: Vector): void;
	SetConstraintReferenceFrame(Frame: EConstraintFrame,RefFrame: Transform): void;
	SetConstrainedComponents(Component1: PrimitiveComponent,BoneName1: string,Component2: PrimitiveComponent,BoneName2: string): void;
	SetAngularVelocityTarget(InVelTarget: Vector): void;
	SetAngularVelocityDriveTwistAndSwing(bEnableTwistDrive: boolean,bEnableSwingDrive: boolean): void;
	SetAngularVelocityDriveSLERP(bEnableSLERP: boolean): void;
	SetAngularVelocityDrive(bEnableSwingDrive: boolean,bEnableTwistDrive: boolean): void;
	SetAngularTwistLimit(ConstraintType: EAngularConstraintMotion,TwistLimitAngle: number): void;
	SetAngularSwing2Limit(MotionType: EAngularConstraintMotion,Swing2LimitAngle: number): void;
	SetAngularSwing1Limit(MotionType: EAngularConstraintMotion,Swing1LimitAngle: number): void;
	SetAngularPlasticity(bAngularPlasticity: boolean,AngularPlasticityThreshold: number): void;
	SetAngularOrientationTarget(InPosTarget: Rotator): void;
	SetAngularOrientationDrive(bEnableSwingDrive: boolean,bEnableTwistDrive: boolean): void;
	SetAngularDriveParams(PositionStrength: number,VelocityStrength: number,InForceLimit: number): void;
	SetAngularDriveMode(DriveMode: EAngularDriveMode): void;
	SetAngularBreakable(bAngularBreakable: boolean,AngularBreakThreshold: number): void;
	IsBroken(): boolean;
	GetCurrentTwist(): number;
	GetCurrentSwing2(): number;
	GetCurrentSwing1(): number;
	GetConstraintForce(OutLinearForce?: Vector,OutAngularForce?: Vector): {OutLinearForce: Vector, OutAngularForce: Vector};
	BreakConstraint(): void;
	static C(Other: UObject | any): PhysicsConstraintComponent;
}

declare class PhysicsConstraintActor extends RigidBodyBase { 
	ConstraintComp: PhysicsConstraintComponent;
	ConstraintActor1: Actor;
	ConstraintActor2: Actor;
	bDisableCollision: boolean;
	static GetDefaultObject(): PhysicsConstraintActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsConstraintActor;
	static C(Other: UObject | any): PhysicsConstraintActor;
}

declare class PhysicsHandleComponent extends ActorComponent { 
	GrabbedComponent: PrimitiveComponent;
	bSoftAngularConstraint: boolean;
	bSoftLinearConstraint: boolean;
	bInterpolateTarget: boolean;
	LinearDamping: number;
	LinearStiffness: number;
	AngularDamping: number;
	AngularStiffness: number;
	InterpolationSpeed: number;
	static Load(ResourceName: string): PhysicsHandleComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsHandleComponent;
	static GetDefaultObject(): PhysicsHandleComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsHandleComponent;
	SetTargetRotation(NewRotation: Rotator): void;
	SetTargetLocationAndRotation(NewLocation: Vector,NewRotation: Rotator): void;
	SetTargetLocation(NewLocation: Vector): void;
	SetLinearStiffness(NewLinearStiffness: number): void;
	SetLinearDamping(NewLinearDamping: number): void;
	SetInterpolationSpeed(NewInterpolationSpeed: number): void;
	SetAngularStiffness(NewAngularStiffness: number): void;
	SetAngularDamping(NewAngularDamping: number): void;
	ReleaseComponent(): void;
	GrabComponentAtLocationWithRotation(Component: PrimitiveComponent,InBoneName: string,Location: Vector,Rotation: Rotator): void;
	GrabComponentAtLocation(Component: PrimitiveComponent,InBoneName: string,GrabLocation: Vector): void;
	GrabComponent(Component: PrimitiveComponent,InBoneName: string,GrabLocation: Vector,bConstrainRotation: boolean): void;
	GetTargetLocationAndRotation(TargetLocation?: Vector,TargetRotation?: Rotator): {TargetLocation: Vector, TargetRotation: Rotator};
	GetGrabbedComponent(): PrimitiveComponent;
	static C(Other: UObject | any): PhysicsHandleComponent;
}

declare class RigidBodyErrorCorrection { 
	PingExtrapolation: number;
	PingLimit: number;
	ErrorPerLinearDifference: number;
	ErrorPerAngularDifference: number;
	MaxRestoredStateError: number;
	MaxLinearHardSnapDistance: number;
	PositionLerp: number;
	AngleLerp: number;
	LinearVelocityCoefficient: number;
	AngularVelocityCoefficient: number;
	ErrorAccumulationSeconds: number;
	ErrorAccumulationDistanceSq: number;
	ErrorAccumulationSimilarity: number;
	clone() : RigidBodyErrorCorrection;
	static C(Other: UObject | any): RigidBodyErrorCorrection;
}

declare type ESettingsLockedAxis = 'None' | 'X' | 'Y' | 'Z' | 'Invalid' | 'ESettingsLockedAxis_MAX';
declare var ESettingsLockedAxis : { None:'None',X:'X',Y:'Y',Z:'Z',Invalid:'Invalid',ESettingsLockedAxis_MAX:'ESettingsLockedAxis_MAX', };
declare type ESettingsDOF = 'Full3D' | 'YZPlane' | 'XZPlane' | 'XYPlane' | 'ESettingsDOF_MAX';
declare var ESettingsDOF : { Full3D:'Full3D',YZPlane:'YZPlane',XZPlane:'XZPlane',XYPlane:'XYPlane',ESettingsDOF_MAX:'ESettingsDOF_MAX', };
declare class PhysicalSurfaceName { 
	Type: EPhysicalSurface;
	Name: string;
	clone() : PhysicalSurfaceName;
	static C(Other: UObject | any): PhysicalSurfaceName;
}

declare type EChaosThreadingMode = 'DedicatedThread' | 'TaskGraph' | 'SingleThread' | 'Num' | 'Invalid' | 'EChaosThreadingMode_MAX';
declare var EChaosThreadingMode : { DedicatedThread:'DedicatedThread',TaskGraph:'TaskGraph',SingleThread:'SingleThread',Num:'Num',Invalid:'Invalid',EChaosThreadingMode_MAX:'EChaosThreadingMode_MAX', };
declare type EChaosSolverTickMode = 'Fixed' | 'Variable' | 'VariableCapped' | 'VariableCappedWithTarget' | 'EChaosSolverTickMode_MAX';
declare var EChaosSolverTickMode : { Fixed:'Fixed',Variable:'Variable',VariableCapped:'VariableCapped',VariableCappedWithTarget:'VariableCappedWithTarget',EChaosSolverTickMode_MAX:'EChaosSolverTickMode_MAX', };
declare type EChaosBufferMode = 'Double' | 'Triple' | 'Num' | 'Invalid' | 'EChaosBufferMode_MAX';
declare var EChaosBufferMode : { Double:'Double',Triple:'Triple',Num:'Num',Invalid:'Invalid',EChaosBufferMode_MAX:'EChaosBufferMode_MAX', };
declare class ChaosPhysicsSettings { 
	DefaultThreadingModel: EChaosThreadingMode;
	DedicatedThreadTickMode: EChaosSolverTickMode;
	DedicatedThreadBufferMode: EChaosBufferMode;
	clone() : ChaosPhysicsSettings;
	static C(Other: UObject | any): ChaosPhysicsSettings;
}

declare class PhysicsSettings extends PhysicsSettingsCore { 
	PhysicErrorCorrection: RigidBodyErrorCorrection;
	LockedAxis: ESettingsLockedAxis;
	DefaultDegreesOfFreedom: ESettingsDOF;
	bSuppressFaceRemapTable: boolean;
	bSupportUVFromHitResults: boolean;
	bDisableActiveActors: boolean;
	bDisableKinematicStaticPairs: boolean;
	bDisableKinematicKinematicPairs: boolean;
	bDisableCCD: boolean;
	bEnableEnhancedDeterminism: boolean;
	AnimPhysicsMinDeltaTime: number;
	bSimulateAnimPhysicsAfterReset: boolean;
	MaxPhysicsDeltaTime: number;
	bSubstepping: boolean;
	bSubsteppingAsync: boolean;
	MaxSubstepDeltaTime: number;
	MaxSubsteps: number;
	SyncSceneSmoothingFactor: number;
	InitialAverageFrameRate: number;
	PhysXTreeRebuildRate: number;
	PhysicalSurfaces: PhysicalSurfaceName[];
	DefaultBroadphaseSettings: BroadphaseSettings;
	MinDeltaVelocityForHitEvents: number;
	ChaosSettings: ChaosPhysicsSettings;
	static Load(ResourceName: string): PhysicsSettings;
	static Find(Outer: UObject, ResourceName: string): PhysicsSettings;
	static GetDefaultObject(): PhysicsSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsSettings;
	static C(Other: UObject | any): PhysicsSettings;
}

declare class PhysicsSpringComponent extends SceneComponent { 
	SpringStiffness: number;
	SpringDamping: number;
	SpringLengthAtRest: number;
	SpringRadius: number;
	SpringChannel: ECollisionChannel;
	bIgnoreSelf: boolean;
	SpringCompression: number;
	static Load(ResourceName: string): PhysicsSpringComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsSpringComponent;
	static GetDefaultObject(): PhysicsSpringComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsSpringComponent;
	GetSpringRestingPoint(): Vector;
	GetSpringDirection(): Vector;
	GetSpringCurrentEndPoint(): Vector;
	GetNormalizedCompressionScalar(): number;
	static C(Other: UObject | any): PhysicsSpringComponent;
}

declare class PhysicsThrusterComponent extends SceneComponent { 
	ThrustStrength: number;
	static Load(ResourceName: string): PhysicsThrusterComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsThrusterComponent;
	static GetDefaultObject(): PhysicsThrusterComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsThrusterComponent;
	static C(Other: UObject | any): PhysicsThrusterComponent;
}

declare class PhysicsThruster extends RigidBodyBase { 
	ThrusterComponent: PhysicsThrusterComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): PhysicsThruster;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsThruster;
	static C(Other: UObject | any): PhysicsThruster;
}

declare class SceneCapture extends Actor { 
	MeshComp: StaticMeshComponent;
	SceneComponent: SceneComponent;
	static GetDefaultObject(): SceneCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCapture;
	static C(Other: UObject | any): SceneCapture;
}

declare type ESceneCapturePrimitiveRenderMode = 'PRM_LegacySceneCapture' | 'PRM_RenderScenePrimitives' | 'PRM_UseShowOnlyList' | 'PRM_MAX';
declare var ESceneCapturePrimitiveRenderMode : { PRM_LegacySceneCapture:'PRM_LegacySceneCapture',PRM_RenderScenePrimitives:'PRM_RenderScenePrimitives',PRM_UseShowOnlyList:'PRM_UseShowOnlyList',PRM_MAX:'PRM_MAX', };
declare type ESceneCaptureSource = 'SCS_SceneColorHDR' | 'SCS_SceneColorHDRNoAlpha' | 'SCS_FinalColorLDR' | 'SCS_SceneColorSceneDepth' | 'SCS_SceneDepth' | 'SCS_DeviceDepth' | 'SCS_Normal' | 'SCS_BaseColor' | 'SCS_FinalColorHDR' | 'SCS_FinalToneCurveHDR' | 'SCS_MAX';
declare var ESceneCaptureSource : { SCS_SceneColorHDR:'SCS_SceneColorHDR',SCS_SceneColorHDRNoAlpha:'SCS_SceneColorHDRNoAlpha',SCS_FinalColorLDR:'SCS_FinalColorLDR',SCS_SceneColorSceneDepth:'SCS_SceneColorSceneDepth',SCS_SceneDepth:'SCS_SceneDepth',SCS_DeviceDepth:'SCS_DeviceDepth',SCS_Normal:'SCS_Normal',SCS_BaseColor:'SCS_BaseColor',SCS_FinalColorHDR:'SCS_FinalColorHDR',SCS_FinalToneCurveHDR:'SCS_FinalToneCurveHDR',SCS_MAX:'SCS_MAX', };
declare class EngineShowFlagsSetting { 
	ShowFlagName: string;
	Enabled: boolean;
	clone() : EngineShowFlagsSetting;
	static C(Other: UObject | any): EngineShowFlagsSetting;
}

declare class SceneCaptureComponent extends SceneComponent { 
	PrimitiveRenderMode: ESceneCapturePrimitiveRenderMode;
	CaptureSource: ESceneCaptureSource;
	bCaptureEveryFrame: boolean;
	bCaptureOnMovement: boolean;
	bAlwaysPersistRenderingState: boolean;
	HiddenComponents: any[];
	HiddenActors: Actor[];
	ShowOnlyComponents: any[];
	ShowOnlyActors: Actor[];
	LODDistanceFactor: number;
	MaxViewDistanceOverride: number;
	CaptureSortPriority: number;
	bUseRayTracingIfEnabled: boolean;
	ShowFlagSettings: EngineShowFlagsSetting[];
	ProfilingEventName: string;
	CaptureMesh: StaticMesh;
	static Load(ResourceName: string): SceneCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponent;
	static GetDefaultObject(): SceneCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureComponent;
	ShowOnlyComponent(InComponent: PrimitiveComponent): void;
	ShowOnlyActorComponents(InActor: Actor,bIncludeFromChildActors: boolean): void;
	SetCaptureSortPriority(NewCaptureSortPriority: number): void;
	RemoveShowOnlyComponent(InComponent: PrimitiveComponent): void;
	RemoveShowOnlyActorComponents(InActor: Actor,bIncludeFromChildActors: boolean): void;
	HideComponent(InComponent: PrimitiveComponent): void;
	HideActorComponents(InActor: Actor,bIncludeFromChildActors: boolean): void;
	ClearShowOnlyComponents(): void;
	ClearHiddenComponents(): void;
	static C(Other: UObject | any): SceneCaptureComponent;
}

declare class PlanarReflectionComponent extends SceneCaptureComponent { 
	PreviewBox: BoxComponent;
	NormalDistortionStrength: number;
	PrefilterRoughness: number;
	PrefilterRoughnessDistance: number;
	ScreenPercentage: number;
	ExtraFOV: number;
	DistanceFromPlaneFadeStart: number;
	DistanceFromPlaneFadeEnd: number;
	DistanceFromPlaneFadeoutStart: number;
	DistanceFromPlaneFadeoutEnd: number;
	AngleFromPlaneFadeStart: number;
	AngleFromPlaneFadeEnd: number;
	bShowPreviewPlane: boolean;
	bRenderSceneTwoSided: boolean;
	CaptureMaterial: Material;
	static Load(ResourceName: string): PlanarReflectionComponent;
	static Find(Outer: UObject, ResourceName: string): PlanarReflectionComponent;
	static GetDefaultObject(): PlanarReflectionComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlanarReflectionComponent;
	static C(Other: UObject | any): PlanarReflectionComponent;
}

declare class PlanarReflection extends SceneCapture { 
	PlanarReflectionComponent: PlanarReflectionComponent;
	SpriteComponent: BillboardComponent;
	bShowPreviewPlane: boolean;
	static GetDefaultObject(): PlanarReflection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlanarReflection;
	OnInterpToggle(bEnable: boolean): void;
	static C(Other: UObject | any): PlanarReflection;
}

declare class PlaneReflectionCapture extends ReflectionCapture { 
	static GetDefaultObject(): PlaneReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlaneReflectionCapture;
	static C(Other: UObject | any): PlaneReflectionCapture;
}

declare class PlaneReflectionCaptureComponent extends ReflectionCaptureComponent { 
	InfluenceRadiusScale: number;
	PreviewInfluenceRadius: DrawSphereComponent;
	PreviewCaptureBox: BoxComponent;
	static Load(ResourceName: string): PlaneReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): PlaneReflectionCaptureComponent;
	static GetDefaultObject(): PlaneReflectionCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlaneReflectionCaptureComponent;
	static C(Other: UObject | any): PlaneReflectionCaptureComponent;
}

declare class PlatformEventsComponent extends ActorComponent { 
	PlatformChangedToLaptopModeDelegate: UnrealEngineMulticastDelegate<() => void>;
	PlatformChangedToTabletModeDelegate: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): PlatformEventsComponent;
	static Find(Outer: UObject, ResourceName: string): PlatformEventsComponent;
	static GetDefaultObject(): PlatformEventsComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformEventsComponent;
	SupportsConvertibleLaptops(): boolean;
	IsInTabletMode(): boolean;
	IsInLaptopMode(): boolean;
	static C(Other: UObject | any): PlatformEventsComponent;
}

declare class PlatformInterfaceWebResponse extends UObject { 
	OriginalURL: string;
	ResponseCode: number;
	Tag: number;
	StringResponse: string;
	BinaryResponse: number[];
	static Load(ResourceName: string): PlatformInterfaceWebResponse;
	static Find(Outer: UObject, ResourceName: string): PlatformInterfaceWebResponse;
	static GetDefaultObject(): PlatformInterfaceWebResponse;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformInterfaceWebResponse;
	GetNumHeaders(): number;
	GetHeaderValue(HeaderName: string): string;
	GetHeader(HeaderIndex: number,Header?: string,Value?: string): {Header: string, Value: string};
	static C(Other: UObject | any): PlatformInterfaceWebResponse;
}

declare class PlayerStart extends NavigationObjectBase { 
	PlayerStartTag: string;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): PlayerStart;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerStart;
	static C(Other: UObject | any): PlayerStart;
}

declare class PlayerStartPIE extends PlayerStart { 
	static GetDefaultObject(): PlayerStartPIE;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerStartPIE;
	static C(Other: UObject | any): PlayerStartPIE;
}

declare class PluginCommandlet extends Commandlet { 
	static Load(ResourceName: string): PluginCommandlet;
	static Find(Outer: UObject, ResourceName: string): PluginCommandlet;
	static GetDefaultObject(): PluginCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PluginCommandlet;
	static C(Other: UObject | any): PluginCommandlet;
}

declare class PointLight extends Light { 
	PointLightComponent: PointLightComponent;
	static GetDefaultObject(): PointLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PointLight;
	SetRadius(NewRadius: number): void;
	SetLightFalloffExponent(NewLightFalloffExponent: number): void;
	static C(Other: UObject | any): PointLight;
}

declare class Polys extends UObject { 
	static Load(ResourceName: string): Polys;
	static Find(Outer: UObject, ResourceName: string): Polys;
	static GetDefaultObject(): Polys;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Polys;
	static C(Other: UObject | any): Polys;
}

declare type EBoneSpaces = 'WorldSpace' | 'ComponentSpace' | 'EBoneSpaces_MAX';
declare var EBoneSpaces : { WorldSpace:'WorldSpace',ComponentSpace:'ComponentSpace',EBoneSpaces_MAX:'EBoneSpaces_MAX', };
declare class PoseableMeshComponent extends SkinnedMeshComponent { 
	static Load(ResourceName: string): PoseableMeshComponent;
	static Find(Outer: UObject, ResourceName: string): PoseableMeshComponent;
	static GetDefaultObject(): PoseableMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PoseableMeshComponent;
	SetBoneTransformByName(BoneName: string,InTransform: Transform,BoneSpace: EBoneSpaces): void;
	SetBoneScaleByName(BoneName: string,InScale3D: Vector,BoneSpace: EBoneSpaces): void;
	SetBoneRotationByName(BoneName: string,InRotation: Rotator,BoneSpace: EBoneSpaces): void;
	SetBoneLocationByName(BoneName: string,InLocation: Vector,BoneSpace: EBoneSpaces): void;
	ResetBoneTransformByName(BoneName: string): void;
	GetBoneTransformByName(BoneName: string,BoneSpace: EBoneSpaces): Transform;
	GetBoneScaleByName(BoneName: string,BoneSpace: EBoneSpaces): Vector;
	GetBoneRotationByName(BoneName: string,BoneSpace: EBoneSpaces): Rotator;
	GetBoneLocationByName(BoneName: string,BoneSpace: EBoneSpaces): Vector;
	CopyPoseFromSkeletalComponent(InComponentToCopy: SkeletalMeshComponent): void;
	static C(Other: UObject | any): PoseableMeshComponent;
}

declare class PostProcessVolume extends Volume { 
	Settings: PostProcessSettings;
	Priority: number;
	BlendRadius: number;
	BlendWeight: number;
	bEnabled: boolean;
	bUnbound: boolean;
	static GetDefaultObject(): PostProcessVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PostProcessVolume;
	static C(Other: UObject | any): PostProcessVolume;
}

declare class PrecomputedVisibilityOverrideVolume extends Volume { 
	OverrideVisibleActors: Actor[];
	OverrideInvisibleActors: Actor[];
	OverrideInvisibleLevels: string[];
	static GetDefaultObject(): PrecomputedVisibilityOverrideVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrecomputedVisibilityOverrideVolume;
	static C(Other: UObject | any): PrecomputedVisibilityOverrideVolume;
}

declare class PrecomputedVisibilityVolume extends Volume { 
	static GetDefaultObject(): PrecomputedVisibilityVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrecomputedVisibilityVolume;
	static C(Other: UObject | any): PrecomputedVisibilityVolume;
}

declare class PreviewCollectionInterface extends Interface { 
	static Load(ResourceName: string): PreviewCollectionInterface;
	static Find(Outer: UObject, ResourceName: string): PreviewCollectionInterface;
	static GetDefaultObject(): PreviewCollectionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewCollectionInterface;
	static C(Other: UObject | any): PreviewCollectionInterface;
}

declare class PreviewMeshCollectionEntry { 
	SkeletalMesh: SkeletalMesh;
	clone() : PreviewMeshCollectionEntry;
	static C(Other: UObject | any): PreviewMeshCollectionEntry;
}

declare class PreviewMeshCollection extends DataAsset { 
	Skeleton: Skeleton;
	SkeletalMeshes: PreviewMeshCollectionEntry[];
	static Load(ResourceName: string): PreviewMeshCollection;
	static Find(Outer: UObject, ResourceName: string): PreviewMeshCollection;
	static GetDefaultObject(): PreviewMeshCollection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewMeshCollection;
	static C(Other: UObject | any): PreviewMeshCollection;
}

declare class CollectionReference { 
	CollectionName: string;
	clone() : CollectionReference;
	static C(Other: UObject | any): CollectionReference;
}

declare class PrimaryAssetLabel extends PrimaryDataAsset { 
	Rules: PrimaryAssetRules;
	bLabelAssetsInMyDirectory: boolean;
	bIsRuntimeLabel: boolean;
	ExplicitAssets: UObject[];
	ExplicitBlueprints: Class[];
	AssetCollection: CollectionReference;
	static Load(ResourceName: string): PrimaryAssetLabel;
	static Find(Outer: UObject, ResourceName: string): PrimaryAssetLabel;
	static GetDefaultObject(): PrimaryAssetLabel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrimaryAssetLabel;
	static C(Other: UObject | any): PrimaryAssetLabel;
}

declare class ProjectileMovementComponent extends MovementComponent { 
	InitialSpeed: number;
	MaxSpeed: number;
	bRotationFollowsVelocity: boolean;
	bRotationRemainsVertical: boolean;
	bShouldBounce: boolean;
	bInitialVelocityInLocalSpace: boolean;
	bForceSubStepping: boolean;
	bSimulationEnabled: boolean;
	bSweepCollision: boolean;
	bIsHomingProjectile: boolean;
	bBounceAngleAffectsFriction: boolean;
	bIsSliding: boolean;
	bInterpMovement: boolean;
	bInterpRotation: boolean;
	PreviousHitTime: number;
	PreviousHitNormal: Vector;
	ProjectileGravityScale: number;
	Buoyancy: number;
	Bounciness: number;
	Friction: number;
	BounceVelocityStopSimulatingThreshold: number;
	MinFrictionFraction: number;
	OnProjectileBounce: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, ImpactVelocity: Vector) => void>;
	OnProjectileStop: UnrealEngineMulticastDelegate<(ImpactResult: HitResult) => void>;
	HomingAccelerationMagnitude: number;
	HomingTargetComponent: any;
	MaxSimulationTimeStep: number;
	MaxSimulationIterations: number;
	BounceAdditionalIterations: number;
	InterpLocationTime: number;
	InterpRotationTime: number;
	InterpLocationMaxLagDistance: number;
	InterpLocationSnapToTargetDistance: number;
	static Load(ResourceName: string): ProjectileMovementComponent;
	static Find(Outer: UObject, ResourceName: string): ProjectileMovementComponent;
	static GetDefaultObject(): ProjectileMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProjectileMovementComponent;
	StopSimulating(HitResult: HitResult): void;
	SetVelocityInLocalSpace(NewVelocity: Vector): void;
	SetInterpolatedComponent(Component: SceneComponent): void;
	ResetInterpolation(): void;
	MoveInterpolationTarget(NewLocation: Vector,NewRotation: Rotator): void;
	LimitVelocity(NewVelocity: Vector): Vector;
	IsVelocityUnderSimulationThreshold(): boolean;
	IsInterpolationComplete(): boolean;
	static C(Other: UObject | any): ProjectileMovementComponent;
}

declare class ProxyLODMeshSimplificationSettings extends DeveloperSettings { 
	ProxyLODMeshReductionModuleName: string;
	static Load(ResourceName: string): ProxyLODMeshSimplificationSettings;
	static Find(Outer: UObject, ResourceName: string): ProxyLODMeshSimplificationSettings;
	static GetDefaultObject(): ProxyLODMeshSimplificationSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProxyLODMeshSimplificationSettings;
	static C(Other: UObject | any): ProxyLODMeshSimplificationSettings;
}

declare class RadialForceComponent extends SceneComponent { 
	Radius: number;
	Falloff: ERadialImpulseFalloff;
	ImpulseStrength: number;
	bImpulseVelChange: boolean;
	bIgnoreOwningActor: boolean;
	ForceStrength: number;
	DestructibleDamage: number;
	ObjectTypesToAffect: EObjectTypeQuery[];
	static Load(ResourceName: string): RadialForceComponent;
	static Find(Outer: UObject, ResourceName: string): RadialForceComponent;
	static GetDefaultObject(): RadialForceComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RadialForceComponent;
	RemoveObjectTypeToAffect(ObjectType: EObjectTypeQuery): void;
	FireImpulse(): void;
	AddObjectTypeToAffect(ObjectType: EObjectTypeQuery): void;
	static C(Other: UObject | any): RadialForceComponent;
}

declare class RadialForceActor extends RigidBodyBase { 
	ForceComponent: RadialForceComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): RadialForceActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RadialForceActor;
	ToggleForce(): void;
	FireImpulse(): void;
	EnableForce(): void;
	DisableForce(): void;
	static C(Other: UObject | any): RadialForceActor;
}

declare class RectLightComponent extends LocalLightComponent { 
	SourceWidth: number;
	SourceHeight: number;
	BarnDoorAngle: number;
	BarnDoorLength: number;
	SourceTexture: Texture;
	static Load(ResourceName: string): RectLightComponent;
	static Find(Outer: UObject, ResourceName: string): RectLightComponent;
	static GetDefaultObject(): RectLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RectLightComponent;
	SetSourceWidth(bNewValue: number): void;
	SetSourceTexture(bNewValue: Texture): void;
	SetSourceHeight(NewValue: number): void;
	SetBarnDoorLength(NewValue: number): void;
	SetBarnDoorAngle(NewValue: number): void;
	static C(Other: UObject | any): RectLightComponent;
}

declare class RectLight extends Light { 
	RectLightComponent: RectLightComponent;
	static GetDefaultObject(): RectLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RectLight;
	static C(Other: UObject | any): RectLight;
}

declare type EMobileMSAASampleCount = 'One' | 'Two' | 'Four' | 'Eight' | 'EMobileMSAASampleCount_MAX';
declare var EMobileMSAASampleCount : { One:'One',Two:'Two',Four:'Four',Eight:'Eight',EMobileMSAASampleCount_MAX:'EMobileMSAASampleCount_MAX', };
declare type ETranslucentSortPolicy = 'SortByDistance' | 'SortByProjectedZ' | 'SortAlongAxis' | 'ETranslucentSortPolicy_MAX';
declare var ETranslucentSortPolicy : { SortByDistance:'SortByDistance',SortByProjectedZ:'SortByProjectedZ',SortAlongAxis:'SortAlongAxis',ETranslucentSortPolicy_MAX:'ETranslucentSortPolicy_MAX', };
declare type EFixedFoveationLevels = 'Disabled' | 'Low' | 'Medium' | 'High' | 'EFixedFoveationLevels_MAX';
declare var EFixedFoveationLevels : { Disabled:'Disabled',Low:'Low',Medium:'Medium',High:'High',EFixedFoveationLevels_MAX:'EFixedFoveationLevels_MAX', };
declare type ECustomDepthStencil = 'Disabled' | 'Enabled' | 'EnabledOnDemand' | 'EnabledWithStencil' | 'ECustomDepthStencil_MAX';
declare var ECustomDepthStencil : { Disabled:'Disabled',Enabled:'Enabled',EnabledOnDemand:'EnabledOnDemand',EnabledWithStencil:'EnabledWithStencil',ECustomDepthStencil_MAX:'ECustomDepthStencil_MAX', };
declare type EAlphaChannelMode = 'Disabled' | 'LinearColorSpaceOnly' | 'AllowThroughTonemapper' | 'EAlphaChannelMode_MAX';
declare var EAlphaChannelMode : { Disabled:'Disabled',LinearColorSpaceOnly:'LinearColorSpaceOnly',AllowThroughTonemapper:'AllowThroughTonemapper',EAlphaChannelMode_MAX:'EAlphaChannelMode_MAX', };
declare type EAutoExposureMethodUI = 'AEM_Histogram' | 'AEM_Basic' | 'AEM_Manual' | 'AEM_MAX';
declare var EAutoExposureMethodUI : { AEM_Histogram:'AEM_Histogram',AEM_Basic:'AEM_Basic',AEM_Manual:'AEM_Manual',AEM_MAX:'AEM_MAX', };
declare type EAntiAliasingMethod = 'AAM_None' | 'AAM_FXAA' | 'AAM_TemporalAA' | 'AAM_MSAA' | 'AAM_MAX';
declare var EAntiAliasingMethod : { AAM_None:'AAM_None',AAM_FXAA:'AAM_FXAA',AAM_TemporalAA:'AAM_TemporalAA',AAM_MSAA:'AAM_MSAA',AAM_MAX:'AAM_MAX', };
declare type EDefaultBackBufferPixelFormat = 'DBBPF_B8G8R8A8' | 'DBBPF_A16B16G16R16_DEPRECATED' | 'DBBPF_FloatRGB_DEPRECATED' | 'DBBPF_FloatRGBA' | 'DBBPF_A2B10G10R10' | 'DBBPF_MAX';
declare var EDefaultBackBufferPixelFormat : { DBBPF_B8G8R8A8:'DBBPF_B8G8R8A8',DBBPF_A16B16G16R16_DEPRECATED:'DBBPF_A16B16G16R16_DEPRECATED',DBBPF_FloatRGB_DEPRECATED:'DBBPF_FloatRGB_DEPRECATED',DBBPF_FloatRGBA:'DBBPF_FloatRGBA',DBBPF_A2B10G10R10:'DBBPF_A2B10G10R10',DBBPF_MAX:'DBBPF_MAX', };
declare type EEarlyZPass = 'None' | 'OpaqueOnly' | 'OpaqueAndMasked' | 'Auto' | 'EEarlyZPass_MAX';
declare var EEarlyZPass : { None:'None',OpaqueOnly:'OpaqueOnly',OpaqueAndMasked:'OpaqueAndMasked',Auto:'Auto',EEarlyZPass_MAX:'EEarlyZPass_MAX', };
declare type EClearSceneOptions = 'NoClear' | 'HardwareClear' | 'QuadAtMaxZ' | 'EClearSceneOptions_MAX';
declare var EClearSceneOptions : { NoClear:'NoClear',HardwareClear:'HardwareClear',QuadAtMaxZ:'QuadAtMaxZ',EClearSceneOptions_MAX:'EClearSceneOptions_MAX', };
declare type EGBufferFormat = 'Force8BitsPerChannel' | 'Default' | 'HighPrecisionNormals' | 'Force16BitsPerChannel' | 'EGBufferFormat_MAX';
declare var EGBufferFormat : { Force8BitsPerChannel:'Force8BitsPerChannel',Default:'Default',HighPrecisionNormals:'HighPrecisionNormals',Force16BitsPerChannel:'Force16BitsPerChannel',EGBufferFormat_MAX:'EGBufferFormat_MAX', };
declare type ESkinCacheDefaultBehavior = 'Exclusive' | 'Inclusive' | 'ESkinCacheDefaultBehavior_MAX';
declare var ESkinCacheDefaultBehavior : { Exclusive:'Exclusive',Inclusive:'Inclusive',ESkinCacheDefaultBehavior_MAX:'ESkinCacheDefaultBehavior_MAX', };
declare type EMobilePlanarReflectionMode = 'Usual' | 'MobilePPRExclusive' | 'MobilePPR' | 'EMobilePlanarReflectionMode_MAX';
declare var EMobilePlanarReflectionMode : { Usual:'Usual',MobilePPRExclusive:'MobilePPRExclusive',MobilePPR:'MobilePPR',EMobilePlanarReflectionMode_MAX:'EMobilePlanarReflectionMode_MAX', };
declare class RendererSettings extends DeveloperSettings { 
	bMobileDisableVertexFog: boolean;
	MaxMobileCascades: number;
	MobileMSAASampleCount: EMobileMSAASampleCount;
	bMobileAllowDitheredLODTransition: boolean;
	bMobileAllowSoftwareOcclusionCulling: boolean;
	bMobileVirtualTextures: boolean;
	bDiscardUnusedQualityLevels: boolean;
	bOcclusionCulling: boolean;
	MinScreenRadiusForLights: number;
	MinScreenRadiusForEarlyZPass: number;
	MinScreenRadiusForCSMdepth: number;
	bPrecomputedVisibilityWarning: boolean;
	bTextureStreaming: boolean;
	bUseDXT5NormalMaps: boolean;
	bVirtualTextures: boolean;
	bVirtualTextureEnableAutoImport: boolean;
	bVirtualTexturedLightmaps: boolean;
	VirtualTextureTileSize: any;
	VirtualTextureTileBorderSize: any;
	VirtualTextureFeedbackFactor: any;
	bVirtualTextureEnableCompressZlib: boolean;
	bVirtualTextureEnableCompressCrunch: boolean;
	bClearCoatEnableSecondNormal: boolean;
	ReflectionCaptureResolution: number;
	bReflectionCaptureCompression: boolean;
	ReflectionEnvironmentLightmapMixBasedOnRoughness: boolean;
	bForwardShading: boolean;
	bVertexFoggingForOpaque: boolean;
	bAllowStaticLighting: boolean;
	bUseNormalMapsForStaticLighting: boolean;
	bGenerateMeshDistanceFields: boolean;
	bEightBitMeshDistanceFields: boolean;
	bGenerateLandscapeGIData: boolean;
	bCompressMeshDistanceFields: boolean;
	TessellationAdaptivePixelsPerTriangle: number;
	bSeparateTranslucency: boolean;
	TranslucentSortPolicy: ETranslucentSortPolicy;
	TranslucentSortAxis: Vector;
	HMDFixedFoveationLevel: EFixedFoveationLevels;
	CustomDepthStencil: ECustomDepthStencil;
	bCustomDepthTaaJitter: boolean;
	bEnableAlphaChannelInPostProcessing: EAlphaChannelMode;
	bDefaultFeatureBloom: boolean;
	bDefaultFeatureAmbientOcclusion: boolean;
	bDefaultFeatureAmbientOcclusionStaticFraction: boolean;
	bDefaultFeatureAutoExposure: boolean;
	DefaultFeatureAutoExposure: EAutoExposureMethodUI;
	DefaultFeatureAutoExposureBias: number;
	bExtendDefaultLuminanceRangeInAutoExposureSettings: boolean;
	bUsePreExposure: boolean;
	bEnablePreExposureOnlyInTheEditor: boolean;
	bDefaultFeatureMotionBlur: boolean;
	bDefaultFeatureLensFlare: boolean;
	bTemporalUpsampling: boolean;
	bSSGI: boolean;
	DefaultFeatureAntiAliasing: EAntiAliasingMethod;
	DefaultLightUnits: ELightUnits;
	DefaultBackBufferPixelFormat: EDefaultBackBufferPixelFormat;
	bRenderUnbuiltPreviewShadowsInGame: boolean;
	bStencilForLODDither: boolean;
	EarlyZPass: EEarlyZPass;
	bEarlyZPassOnlyMaterialMasking: boolean;
	bDBuffer: boolean;
	ClearSceneMethod: EClearSceneOptions;
	bBasePassOutputsVelocity: boolean;
	bVertexDeformationOutputsVelocity: boolean;
	bSelectiveBasePassOutputs: boolean;
	bDefaultParticleCutouts: boolean;
	GPUSimulationTextureSizeX: number;
	GPUSimulationTextureSizeY: number;
	bGlobalClipPlane: boolean;
	GBufferFormat: EGBufferFormat;
	bUseGPUMorphTargets: boolean;
	bNvidiaAftermathEnabled: boolean;
	bMultiView: boolean;
	bMobilePostProcessing: boolean;
	bMobileMultiView: boolean;
	bMobileUseHWsRGBEncoding: boolean;
	bRoundRobinOcclusion: boolean;
	bODSCapture: boolean;
	bMeshStreaming: boolean;
	WireframeCullThreshold: number;
	bEnableRayTracing: boolean;
	bEnableRayTracingTextureLOD: boolean;
	bSupportStationarySkylight: boolean;
	bSupportLowQualityLightmaps: boolean;
	bSupportPointLightWholeSceneShadows: boolean;
	bSupportAtmosphericFog: boolean;
	bSupportSkyAtmosphere: boolean;
	bSupportSkyAtmosphereAffectsHeightFog: boolean;
	bSupportSkinCacheShaders: boolean;
	DefaultSkinCacheBehavior: ESkinCacheDefaultBehavior;
	SkinCacheSceneMemoryLimitInMB: number;
	bMobileEnableStaticAndCSMShadowReceivers: boolean;
	bMobileEnableMovableLightCSMShaderCulling: boolean;
	bMobileAllowDistanceFieldShadows: boolean;
	bMobileAllowMovableDirectionalLights: boolean;
	MobileNumDynamicPointLights: any;
	bMobileDynamicPointLightsUseStaticBranch: boolean;
	bMobileAllowMovableSpotlights: boolean;
	bMobileAllowMovableSpotlightShadows: boolean;
	bSupport16BitBoneIndex: boolean;
	bGPUSkinLimit2BoneInfluences: boolean;
	bSupportDepthOnlyIndexBuffers: boolean;
	bSupportReversedIndexBuffers: boolean;
	bLPV: boolean;
	bMobileAmbientOcclusion: boolean;
	bUseUnlimitedBoneInfluences: boolean;
	UnlimitedBonInfluencesThreshold: number;
	MaxSkinBones: PerPlatformInt;
	MobilePlanarReflectionMode: EMobilePlanarReflectionMode;
	bMobileSupportsGen4TAA: boolean;
	bStreamSkeletalMeshLODs: PerPlatformBool;
	bDiscardSkeletalMeshOptionalLODs: PerPlatformBool;
	VisualizeCalibrationColorMaterialPath: SoftObjectPath;
	VisualizeCalibrationCustomMaterialPath: SoftObjectPath;
	VisualizeCalibrationGrayscaleMaterialPath: SoftObjectPath;
	static Load(ResourceName: string): RendererSettings;
	static Find(Outer: UObject, ResourceName: string): RendererSettings;
	static GetDefaultObject(): RendererSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RendererSettings;
	static C(Other: UObject | any): RendererSettings;
}

declare class RendererOverrideSettings extends DeveloperSettings { 
	bSupportAllShaderPermutations: boolean;
	bForceRecomputeTangents: boolean;
	static Load(ResourceName: string): RendererOverrideSettings;
	static Find(Outer: UObject, ResourceName: string): RendererOverrideSettings;
	static GetDefaultObject(): RendererOverrideSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RendererOverrideSettings;
	static C(Other: UObject | any): RendererOverrideSettings;
}

declare class ReplayNetConnection extends NetConnection { 
	static Load(ResourceName: string): ReplayNetConnection;
	static Find(Outer: UObject, ResourceName: string): ReplayNetConnection;
	static GetDefaultObject(): ReplayNetConnection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReplayNetConnection;
	static C(Other: UObject | any): ReplayNetConnection;
}

declare class ReplaySubsystem extends GameInstanceSubsystem { 
	bLoadDefaultMapOnStop: boolean;
	static Load(ResourceName: string): ReplaySubsystem;
	static Find(Outer: UObject, ResourceName: string): ReplaySubsystem;
	static GetDefaultObject(): ReplaySubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReplaySubsystem;
	static C(Other: UObject | any): ReplaySubsystem;
}

declare class ReplicationConnectionDriver extends UObject { 
	static Load(ResourceName: string): ReplicationConnectionDriver;
	static Find(Outer: UObject, ResourceName: string): ReplicationConnectionDriver;
	static GetDefaultObject(): ReplicationConnectionDriver;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReplicationConnectionDriver;
	static C(Other: UObject | any): ReplicationConnectionDriver;
}

declare class RotatingMovementComponent extends MovementComponent { 
	RotationRate: Rotator;
	PivotTranslation: Vector;
	bRotationInLocalSpace: boolean;
	static Load(ResourceName: string): RotatingMovementComponent;
	static Find(Outer: UObject, ResourceName: string): RotatingMovementComponent;
	static GetDefaultObject(): RotatingMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RotatingMovementComponent;
	static C(Other: UObject | any): RotatingMovementComponent;
}

declare class RuntimeOptionsBase extends UObject { 
	static Load(ResourceName: string): RuntimeOptionsBase;
	static Find(Outer: UObject, ResourceName: string): RuntimeOptionsBase;
	static GetDefaultObject(): RuntimeOptionsBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RuntimeOptionsBase;
	static C(Other: UObject | any): RuntimeOptionsBase;
}

declare class VirtualTextureBuildSettings { 
	TileSize: number;
	TileBorderSize: number;
	bEnableCompressCrunch: boolean;
	bEnableCompressZlib: boolean;
	clone() : VirtualTextureBuildSettings;
	static C(Other: UObject | any): VirtualTextureBuildSettings;
}

declare class VirtualTexture2D extends Texture2D { 
	Settings: VirtualTextureBuildSettings;
	bContinuousUpdate: boolean;
	bSinglePhysicalSpace: boolean;
	static Load(ResourceName: string): VirtualTexture2D;
	static Find(Outer: UObject, ResourceName: string): VirtualTexture2D;
	static GetDefaultObject(): VirtualTexture2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VirtualTexture2D;
	static C(Other: UObject | any): VirtualTexture2D;
}

declare class VirtualTextureBuilder extends UObject { 
	Texture: VirtualTexture2D;
	BuildHash: any;
	static Load(ResourceName: string): VirtualTextureBuilder;
	static Find(Outer: UObject, ResourceName: string): VirtualTextureBuilder;
	static GetDefaultObject(): VirtualTextureBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VirtualTextureBuilder;
	static C(Other: UObject | any): VirtualTextureBuilder;
}

declare class RuntimeVirtualTextureComponent extends SceneComponent { 
	BoundsAlignActor: Actor;
	bSetBoundsButton: boolean;
	bSnapBoundsToLandscape: boolean;
	VirtualTexture: RuntimeVirtualTexture;
	bEnableScalability: boolean;
	ScalabilityGroup: any;
	bHidePrimitives: boolean;
	StreamingTexture: VirtualTextureBuilder;
	StreamLowMips: number;
	bBuildStreamingMipsButton: boolean;
	bEnableCompressCrunch: boolean;
	bUseStreamingLowMipsInEditor: boolean;
	bBuildDebugStreamingMips: boolean;
	static Load(ResourceName: string): RuntimeVirtualTextureComponent;
	static Find(Outer: UObject, ResourceName: string): RuntimeVirtualTextureComponent;
	static GetDefaultObject(): RuntimeVirtualTextureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RuntimeVirtualTextureComponent;
	Invalidate(WorldBounds: BoxSphereBounds): void;
	static C(Other: UObject | any): RuntimeVirtualTextureComponent;
}

declare class RuntimeVirtualTextureVolume extends Actor { 
	VirtualTextureComponent: RuntimeVirtualTextureComponent;
	Box: BoxComponent;
	static GetDefaultObject(): RuntimeVirtualTextureVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RuntimeVirtualTextureVolume;
	static C(Other: UObject | any): RuntimeVirtualTextureVolume;
}

declare class RVOAvoidanceInterface extends Interface { 
	static Load(ResourceName: string): RVOAvoidanceInterface;
	static Find(Outer: UObject, ResourceName: string): RVOAvoidanceInterface;
	static GetDefaultObject(): RVOAvoidanceInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RVOAvoidanceInterface;
	static C(Other: UObject | any): RVOAvoidanceInterface;
}

declare class Scene extends UObject { 
	static Load(ResourceName: string): Scene;
	static Find(Outer: UObject, ResourceName: string): Scene;
	static GetDefaultObject(): Scene;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Scene;
	static C(Other: UObject | any): Scene;
}

declare type ESceneCaptureCompositeMode = 'SCCM_Overwrite' | 'SCCM_Additive' | 'SCCM_Composite' | 'SCCM_MAX';
declare var ESceneCaptureCompositeMode : { SCCM_Overwrite:'SCCM_Overwrite',SCCM_Additive:'SCCM_Additive',SCCM_Composite:'SCCM_Composite',SCCM_MAX:'SCCM_MAX', };
declare class SceneCaptureComponent2D extends SceneCaptureComponent { 
	ProjectionType: ECameraProjectionMode;
	FOVAngle: number;
	OrthoWidth: number;
	TextureTarget: TextureRenderTarget2D;
	CompositeMode: ESceneCaptureCompositeMode;
	PostProcessSettings: PostProcessSettings;
	PostProcessBlendWeight: number;
	bOverride_CustomNearClippingPlane: boolean;
	CustomNearClippingPlane: number;
	bUseCustomProjectionMatrix: boolean;
	CustomProjectionMatrix: Matrix;
	bEnableClipPlane: boolean;
	ClipPlaneBase: Vector;
	ClipPlaneNormal: Vector;
	bCameraCutThisFrame: boolean;
	bConsiderUnrenderedOpaquePixelAsFullyTranslucent: boolean;
	bDisableFlipCopyGLES: boolean;
	static Load(ResourceName: string): SceneCaptureComponent2D;
	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponent2D;
	static GetDefaultObject(): SceneCaptureComponent2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureComponent2D;
	CaptureScene(): void;
	static C(Other: UObject | any): SceneCaptureComponent2D;
}

declare class SceneCapture2D extends SceneCapture { 
	CaptureComponent2D: SceneCaptureComponent2D;
	static GetDefaultObject(): SceneCapture2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCapture2D;
	OnInterpToggle(bEnable: boolean): void;
	static C(Other: UObject | any): SceneCapture2D;
}

declare class TextureRenderTargetCube extends TextureRenderTarget { 
	SizeX: number;
	ClearColor: LinearColor;
	OverrideFormat: EPixelFormat;
	bHDR: boolean;
	bForceLinearGamma: boolean;
	static Load(ResourceName: string): TextureRenderTargetCube;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetCube;
	static GetDefaultObject(): TextureRenderTargetCube;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetCube;
	static C(Other: UObject | any): TextureRenderTargetCube;
}

declare class SceneCaptureComponentCube extends SceneCaptureComponent { 
	TextureTarget: TextureRenderTargetCube;
	bCaptureRotation: boolean;
	TextureTargetLeft: TextureRenderTargetCube;
	TextureTargetRight: TextureRenderTargetCube;
	TextureTargetODS: TextureRenderTarget2D;
	IPD: number;
	static Load(ResourceName: string): SceneCaptureComponentCube;
	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponentCube;
	static GetDefaultObject(): SceneCaptureComponentCube;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureComponentCube;
	CaptureScene(): void;
	static C(Other: UObject | any): SceneCaptureComponentCube;
}

declare class SceneCaptureCube extends SceneCapture { 
	CaptureComponentCube: SceneCaptureComponentCube;
	static GetDefaultObject(): SceneCaptureCube;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureCube;
	OnInterpToggle(bEnable: boolean): void;
	static C(Other: UObject | any): SceneCaptureCube;
}

declare type EShadowMapFlags = 'SMF_None' | 'SMF_Streamed' | 'SMF_MAX';
declare var EShadowMapFlags : { SMF_None:'SMF_None',SMF_Streamed:'SMF_Streamed',SMF_MAX:'SMF_MAX', };
declare class ShadowMapTexture2D extends Texture2D { 
	ShadowmapFlags: EShadowMapFlags;
	static Load(ResourceName: string): ShadowMapTexture2D;
	static Find(Outer: UObject, ResourceName: string): ShadowMapTexture2D;
	static GetDefaultObject(): ShadowMapTexture2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShadowMapTexture2D;
	static C(Other: UObject | any): ShadowMapTexture2D;
}

declare class SkeletalMeshSimplificationSettings extends DeveloperSettings { 
	SkeletalMeshReductionModuleName: string;
	static Load(ResourceName: string): SkeletalMeshSimplificationSettings;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshSimplificationSettings;
	static GetDefaultObject(): SkeletalMeshSimplificationSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshSimplificationSettings;
	static C(Other: UObject | any): SkeletalMeshSimplificationSettings;
}

declare type ESkyAtmosphereTransformMode = 'PlanetTopAtAbsoluteWorldOrigin' | 'PlanetTopAtComponentTransform' | 'PlanetCenterAtComponentTransform' | 'ESkyAtmosphereTransformMode_MAX';
declare var ESkyAtmosphereTransformMode : { PlanetTopAtAbsoluteWorldOrigin:'PlanetTopAtAbsoluteWorldOrigin',PlanetTopAtComponentTransform:'PlanetTopAtComponentTransform',PlanetCenterAtComponentTransform:'PlanetCenterAtComponentTransform',ESkyAtmosphereTransformMode_MAX:'ESkyAtmosphereTransformMode_MAX', };
declare class TentDistribution { 
	TipAltitude: number;
	TipValue: number;
	Width: number;
	clone() : TentDistribution;
	static C(Other: UObject | any): TentDistribution;
}

declare class SkyAtmosphereComponent extends SceneComponent { 
	TransformMode: ESkyAtmosphereTransformMode;
	BottomRadius: number;
	GroundAlbedo: Color;
	AtmosphereHeight: number;
	MultiScatteringFactor: number;
	TraceSampleCountScale: number;
	RayleighScatteringScale: number;
	RayleighScattering: LinearColor;
	RayleighExponentialDistribution: number;
	MieScatteringScale: number;
	MieScattering: LinearColor;
	MieAbsorptionScale: number;
	MieAbsorption: LinearColor;
	MieAnisotropy: number;
	MieExponentialDistribution: number;
	OtherAbsorptionScale: number;
	OtherAbsorption: LinearColor;
	OtherTentDistribution: TentDistribution;
	SkyLuminanceFactor: LinearColor;
	AerialPespectiveViewDistanceScale: number;
	HeightFogContribution: number;
	TransmittanceMinLightElevationAngle: number;
	AerialPerspectiveStartDepth: number;
	bStaticLightingBuiltGUID: Guid;
	static Load(ResourceName: string): SkyAtmosphereComponent;
	static Find(Outer: UObject, ResourceName: string): SkyAtmosphereComponent;
	static GetDefaultObject(): SkyAtmosphereComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyAtmosphereComponent;
	SetSkyLuminanceFactor(NewValue: LinearColor): void;
	SetRayleighScatteringScale(NewValue: number): void;
	SetRayleighScattering(NewValue: LinearColor): void;
	SetRayleighExponentialDistribution(NewValue: number): void;
	SetOtherAbsorptionScale(NewValue: number): void;
	SetOtherAbsorption(NewValue: LinearColor): void;
	SetMultiScatteringFactor(NewValue: number): void;
	SetMieScatteringScale(NewValue: number): void;
	SetMieScattering(NewValue: LinearColor): void;
	SetMieExponentialDistribution(NewValue: number): void;
	SetMieAnisotropy(NewValue: number): void;
	SetMieAbsorptionScale(NewValue: number): void;
	SetMieAbsorption(NewValue: LinearColor): void;
	SetHeightFogContribution(NewValue: number): void;
	SetAtmosphereHeight(NewValue: number): void;
	SetAerialPespectiveViewDistanceScale(NewValue: number): void;
	OverrideAtmosphereLightDirection(AtmosphereLightIndex: number,LightDirection: Vector): void;
	GetAtmosphereTransmitanceOnGroundAtPlanetTop(DirectionalLight: DirectionalLightComponent): LinearColor;
	static C(Other: UObject | any): SkyAtmosphereComponent;
}

declare class SkyAtmosphere extends Info { 
	SkyAtmosphereComponent: SkyAtmosphereComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): SkyAtmosphere;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyAtmosphere;
	static C(Other: UObject | any): SkyAtmosphere;
}

declare class SlateTextureAtlasInterface extends Interface { 
	static Load(ResourceName: string): SlateTextureAtlasInterface;
	static Find(Outer: UObject, ResourceName: string): SlateTextureAtlasInterface;
	static GetDefaultObject(): SlateTextureAtlasInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateTextureAtlasInterface;
	static C(Other: UObject | any): SlateTextureAtlasInterface;
}

declare class SmokeTestCommandlet extends Commandlet { 
	static Load(ResourceName: string): SmokeTestCommandlet;
	static Find(Outer: UObject, ResourceName: string): SmokeTestCommandlet;
	static GetDefaultObject(): SmokeTestCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SmokeTestCommandlet;
	static C(Other: UObject | any): SmokeTestCommandlet;
}

declare class SoundGroup { 
	SoundGroup: ESoundGroup;
	DisplayName: string;
	bAlwaysDecompressOnLoad: boolean;
	DecompressedDuration: number;
	clone() : SoundGroup;
	static C(Other: UObject | any): SoundGroup;
}

declare class SoundGroups extends UObject { 
	SoundGroupProfiles: SoundGroup[];
	static Load(ResourceName: string): SoundGroups;
	static Find(Outer: UObject, ResourceName: string): SoundGroups;
	static GetDefaultObject(): SoundGroups;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundGroups;
	static C(Other: UObject | any): SoundGroups;
}

declare class SoundNodeAssetReferencer extends SoundNode { 
	static Load(ResourceName: string): SoundNodeAssetReferencer;
	static Find(Outer: UObject, ResourceName: string): SoundNodeAssetReferencer;
	static GetDefaultObject(): SoundNodeAssetReferencer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeAssetReferencer;
	static C(Other: UObject | any): SoundNodeAssetReferencer;
}

declare class SoundNodeAttenuation extends SoundNode { 
	AttenuationSettings: SoundAttenuation;
	AttenuationOverrides: SoundAttenuationSettings;
	bOverrideAttenuation: boolean;
	static Load(ResourceName: string): SoundNodeAttenuation;
	static Find(Outer: UObject, ResourceName: string): SoundNodeAttenuation;
	static GetDefaultObject(): SoundNodeAttenuation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeAttenuation;
	static C(Other: UObject | any): SoundNodeAttenuation;
}

declare class SoundNodeBranch extends SoundNode { 
	BoolParameterName: string;
	static Load(ResourceName: string): SoundNodeBranch;
	static Find(Outer: UObject, ResourceName: string): SoundNodeBranch;
	static GetDefaultObject(): SoundNodeBranch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeBranch;
	static C(Other: UObject | any): SoundNodeBranch;
}

declare class SoundNodeConcatenator extends SoundNode { 
	InputVolume: number[];
	static Load(ResourceName: string): SoundNodeConcatenator;
	static Find(Outer: UObject, ResourceName: string): SoundNodeConcatenator;
	static GetDefaultObject(): SoundNodeConcatenator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeConcatenator;
	static C(Other: UObject | any): SoundNodeConcatenator;
}

declare class SoundNodeDelay extends SoundNode { 
	DelayMin: number;
	DelayMax: number;
	static Load(ResourceName: string): SoundNodeDelay;
	static Find(Outer: UObject, ResourceName: string): SoundNodeDelay;
	static GetDefaultObject(): SoundNodeDelay;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeDelay;
	static C(Other: UObject | any): SoundNodeDelay;
}

declare class DialogueWaveParameter { 
	DialogueWave: DialogueWave;
	Context: DialogueContext;
	clone() : DialogueWaveParameter;
	static C(Other: UObject | any): DialogueWaveParameter;
}

declare class SoundNodeDialoguePlayer extends SoundNode { 
	DialogueWaveParameter: DialogueWaveParameter;
	bLooping: boolean;
	static Load(ResourceName: string): SoundNodeDialoguePlayer;
	static Find(Outer: UObject, ResourceName: string): SoundNodeDialoguePlayer;
	static GetDefaultObject(): SoundNodeDialoguePlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeDialoguePlayer;
	static C(Other: UObject | any): SoundNodeDialoguePlayer;
}

declare class DistanceDatum { 
	FadeInDistanceStart: number;
	FadeInDistanceEnd: number;
	FadeOutDistanceStart: number;
	FadeOutDistanceEnd: number;
	Volume: number;
	clone() : DistanceDatum;
	static C(Other: UObject | any): DistanceDatum;
}

declare class SoundNodeDistanceCrossFade extends SoundNode { 
	CrossFadeInput: DistanceDatum[];
	static Load(ResourceName: string): SoundNodeDistanceCrossFade;
	static Find(Outer: UObject, ResourceName: string): SoundNodeDistanceCrossFade;
	static GetDefaultObject(): SoundNodeDistanceCrossFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeDistanceCrossFade;
	static C(Other: UObject | any): SoundNodeDistanceCrossFade;
}

declare class SoundNodeDoppler extends SoundNode { 
	DopplerIntensity: number;
	bUseSmoothing: boolean;
	SmoothingInterpSpeed: number;
	static Load(ResourceName: string): SoundNodeDoppler;
	static Find(Outer: UObject, ResourceName: string): SoundNodeDoppler;
	static GetDefaultObject(): SoundNodeDoppler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeDoppler;
	static C(Other: UObject | any): SoundNodeDoppler;
}

declare class SoundNodeEnveloper extends SoundNode { 
	LoopStart: number;
	LoopEnd: number;
	DurationAfterLoop: number;
	LoopCount: number;
	bLoopIndefinitely: boolean;
	bLoop: boolean;
	VolumeInterpCurve: DistributionFloatConstantCurve;
	PitchInterpCurve: DistributionFloatConstantCurve;
	VolumeCurve: RuntimeFloatCurve;
	PitchCurve: RuntimeFloatCurve;
	PitchMin: number;
	PitchMax: number;
	VolumeMin: number;
	VolumeMax: number;
	static Load(ResourceName: string): SoundNodeEnveloper;
	static Find(Outer: UObject, ResourceName: string): SoundNodeEnveloper;
	static GetDefaultObject(): SoundNodeEnveloper;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeEnveloper;
	static C(Other: UObject | any): SoundNodeEnveloper;
}

declare class SoundNodeGroupControl extends SoundNode { 
	GroupSizes: number[];
	static Load(ResourceName: string): SoundNodeGroupControl;
	static Find(Outer: UObject, ResourceName: string): SoundNodeGroupControl;
	static GetDefaultObject(): SoundNodeGroupControl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeGroupControl;
	static C(Other: UObject | any): SoundNodeGroupControl;
}

declare class SoundNodeLooping extends SoundNode { 
	LoopCount: number;
	bLoopIndefinitely: boolean;
	static Load(ResourceName: string): SoundNodeLooping;
	static Find(Outer: UObject, ResourceName: string): SoundNodeLooping;
	static GetDefaultObject(): SoundNodeLooping;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeLooping;
	static C(Other: UObject | any): SoundNodeLooping;
}

declare class SoundNodeMature extends SoundNode { 
	static Load(ResourceName: string): SoundNodeMature;
	static Find(Outer: UObject, ResourceName: string): SoundNodeMature;
	static GetDefaultObject(): SoundNodeMature;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeMature;
	static C(Other: UObject | any): SoundNodeMature;
}

declare class SoundNodeMixer extends SoundNode { 
	InputVolume: number[];
	static Load(ResourceName: string): SoundNodeMixer;
	static Find(Outer: UObject, ResourceName: string): SoundNodeMixer;
	static GetDefaultObject(): SoundNodeMixer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeMixer;
	static C(Other: UObject | any): SoundNodeMixer;
}

declare class SoundNodeModulator extends SoundNode { 
	PitchMin: number;
	PitchMax: number;
	VolumeMin: number;
	VolumeMax: number;
	static Load(ResourceName: string): SoundNodeModulator;
	static Find(Outer: UObject, ResourceName: string): SoundNodeModulator;
	static GetDefaultObject(): SoundNodeModulator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeModulator;
	static C(Other: UObject | any): SoundNodeModulator;
}

declare type ModulationParamMode = 'MPM_Normal' | 'MPM_Abs' | 'MPM_Direct' | 'MPM_MAX';
declare var ModulationParamMode : { MPM_Normal:'MPM_Normal',MPM_Abs:'MPM_Abs',MPM_Direct:'MPM_Direct',MPM_MAX:'MPM_MAX', };
declare class ModulatorContinuousParams { 
	ParameterName: string;
	Default: number;
	MinInput: number;
	MaxInput: number;
	MinOutput: number;
	MaxOutput: number;
	ParamMode: ModulationParamMode;
	clone() : ModulatorContinuousParams;
	static C(Other: UObject | any): ModulatorContinuousParams;
}

declare class SoundNodeModulatorContinuous extends SoundNode { 
	PitchModulationParams: ModulatorContinuousParams;
	VolumeModulationParams: ModulatorContinuousParams;
	static Load(ResourceName: string): SoundNodeModulatorContinuous;
	static Find(Outer: UObject, ResourceName: string): SoundNodeModulatorContinuous;
	static GetDefaultObject(): SoundNodeModulatorContinuous;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeModulatorContinuous;
	static C(Other: UObject | any): SoundNodeModulatorContinuous;
}

declare class SoundNodeOscillator extends SoundNode { 
	bModulateVolume: boolean;
	bModulatePitch: boolean;
	AmplitudeMin: number;
	AmplitudeMax: number;
	FrequencyMin: number;
	FrequencyMax: number;
	OffsetMin: number;
	OffsetMax: number;
	CenterMin: number;
	CenterMax: number;
	static Load(ResourceName: string): SoundNodeOscillator;
	static Find(Outer: UObject, ResourceName: string): SoundNodeOscillator;
	static GetDefaultObject(): SoundNodeOscillator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeOscillator;
	static C(Other: UObject | any): SoundNodeOscillator;
}

declare class SoundNodeParamCrossFade extends SoundNodeDistanceCrossFade { 
	ParamName: string;
	static Load(ResourceName: string): SoundNodeParamCrossFade;
	static Find(Outer: UObject, ResourceName: string): SoundNodeParamCrossFade;
	static GetDefaultObject(): SoundNodeParamCrossFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeParamCrossFade;
	static C(Other: UObject | any): SoundNodeParamCrossFade;
}

declare class SoundNodeQualityLevel extends SoundNode { 
	CookedQualityLevelIndex: number;
	static Load(ResourceName: string): SoundNodeQualityLevel;
	static Find(Outer: UObject, ResourceName: string): SoundNodeQualityLevel;
	static GetDefaultObject(): SoundNodeQualityLevel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeQualityLevel;
	static C(Other: UObject | any): SoundNodeQualityLevel;
}

declare class SoundNodeRandom extends SoundNode { 
	Weights: number[];
	HasBeenUsed: boolean[];
	NumRandomUsed: number;
	PreselectAtLevelLoad: number;
	bShouldExcludeFromBranchCulling: boolean;
	bSoundCueExcludedFromBranchCulling: boolean;
	bRandomizeWithoutReplacement: boolean;
	PIEHiddenNodes: number[];
	static Load(ResourceName: string): SoundNodeRandom;
	static Find(Outer: UObject, ResourceName: string): SoundNodeRandom;
	static GetDefaultObject(): SoundNodeRandom;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeRandom;
	static C(Other: UObject | any): SoundNodeRandom;
}

declare class SoundNodeSoundClass extends SoundNode { 
	SoundClassOverride: SoundClass;
	static Load(ResourceName: string): SoundNodeSoundClass;
	static Find(Outer: UObject, ResourceName: string): SoundNodeSoundClass;
	static GetDefaultObject(): SoundNodeSoundClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeSoundClass;
	static C(Other: UObject | any): SoundNodeSoundClass;
}

declare class SoundNodeSwitch extends SoundNode { 
	IntParameterName: string;
	static Load(ResourceName: string): SoundNodeSwitch;
	static Find(Outer: UObject, ResourceName: string): SoundNodeSwitch;
	static GetDefaultObject(): SoundNodeSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeSwitch;
	static C(Other: UObject | any): SoundNodeSwitch;
}

declare class SoundNodeWaveParam extends SoundNode { 
	WaveParameterName: string;
	static Load(ResourceName: string): SoundNodeWaveParam;
	static Find(Outer: UObject, ResourceName: string): SoundNodeWaveParam;
	static GetDefaultObject(): SoundNodeWaveParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeWaveParam;
	static C(Other: UObject | any): SoundNodeWaveParam;
}

declare class SoundNodeWavePlayer extends SoundNodeAssetReferencer { 
	SoundWaveAssetPtr: SoundWave;
	SoundWave: SoundWave;
	bLooping: boolean;
	static Load(ResourceName: string): SoundNodeWavePlayer;
	static Find(Outer: UObject, ResourceName: string): SoundNodeWavePlayer;
	static GetDefaultObject(): SoundNodeWavePlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeWavePlayer;
	static C(Other: UObject | any): SoundNodeWavePlayer;
}

declare class SoundfieldSubmix extends SoundSubmixWithParentBase { 
	SoundfieldEncodingFormat: string;
	EncodingSettings: SoundfieldEncodingSettingsBase;
	SoundfieldEffectChain: SoundfieldEffectBase[];
	EncodingSettingsClass: UnrealEngineClass;
	static Load(ResourceName: string): SoundfieldSubmix;
	static Find(Outer: UObject, ResourceName: string): SoundfieldSubmix;
	static GetDefaultObject(): SoundfieldSubmix;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundfieldSubmix;
	static C(Other: UObject | any): SoundfieldSubmix;
}

declare class EndpointSubmix extends SoundSubmixBase { 
	EndpointType: string;
	EndpointSettingsClass: UnrealEngineClass;
	EndpointSettings: AudioEndpointSettingsBase;
	static Load(ResourceName: string): EndpointSubmix;
	static Find(Outer: UObject, ResourceName: string): EndpointSubmix;
	static GetDefaultObject(): EndpointSubmix;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EndpointSubmix;
	static C(Other: UObject | any): EndpointSubmix;
}

declare class SoundfieldEndpointSubmix extends SoundSubmixBase { 
	SoundfieldEndpointType: string;
	EndpointSettingsClass: UnrealEngineClass;
	EndpointSettings: SoundfieldEndpointSettingsBase;
	EncodingSettingsClass: UnrealEngineClass;
	EncodingSettings: SoundfieldEncodingSettingsBase;
	SoundfieldEffectChain: SoundfieldEffectBase[];
	static Load(ResourceName: string): SoundfieldEndpointSubmix;
	static Find(Outer: UObject, ResourceName: string): SoundfieldEndpointSubmix;
	static GetDefaultObject(): SoundfieldEndpointSubmix;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundfieldEndpointSubmix;
	static C(Other: UObject | any): SoundfieldEndpointSubmix;
}

declare class SpectatorPawnMovement extends FloatingPawnMovement { 
	bIgnoreTimeDilation: boolean;
	static Load(ResourceName: string): SpectatorPawnMovement;
	static Find(Outer: UObject, ResourceName: string): SpectatorPawnMovement;
	static GetDefaultObject(): SpectatorPawnMovement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpectatorPawnMovement;
	static C(Other: UObject | any): SpectatorPawnMovement;
}

declare class SphereReflectionCapture extends ReflectionCapture { 
	DrawCaptureRadius: DrawSphereComponent;
	static GetDefaultObject(): SphereReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SphereReflectionCapture;
	static C(Other: UObject | any): SphereReflectionCapture;
}

declare class SphereReflectionCaptureComponent extends ReflectionCaptureComponent { 
	InfluenceRadius: number;
	CaptureDistanceScale: number;
	PreviewInfluenceRadius: DrawSphereComponent;
	static Load(ResourceName: string): SphereReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): SphereReflectionCaptureComponent;
	static GetDefaultObject(): SphereReflectionCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SphereReflectionCaptureComponent;
	static C(Other: UObject | any): SphereReflectionCaptureComponent;
}

declare class SplineMeshActor extends Actor { 
	SplineMeshComponent: SplineMeshComponent;
	static GetDefaultObject(): SplineMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineMeshActor;
	static C(Other: UObject | any): SplineMeshActor;
}

declare class SpringArmComponent extends SceneComponent { 
	TargetArmLength: number;
	SocketOffset: Vector;
	TargetOffset: Vector;
	ProbeSize: number;
	ProbeChannel: ECollisionChannel;
	bDoCollisionTest: boolean;
	bUsePawnControlRotation: boolean;
	bInheritPitch: boolean;
	bInheritYaw: boolean;
	bInheritRoll: boolean;
	bEnableCameraLag: boolean;
	bEnableCameraRotationLag: boolean;
	bUseCameraLagSubstepping: boolean;
	bDrawDebugLagMarkers: boolean;
	CameraLagSpeed: number;
	CameraRotationLagSpeed: number;
	CameraLagMaxTimeStep: number;
	CameraLagMaxDistance: number;
	static Load(ResourceName: string): SpringArmComponent;
	static Find(Outer: UObject, ResourceName: string): SpringArmComponent;
	static GetDefaultObject(): SpringArmComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpringArmComponent;
	IsCollisionFixApplied(): boolean;
	GetUnfixedCameraPosition(): Vector;
	GetTargetRotation(): Rotator;
	static C(Other: UObject | any): SpringArmComponent;
}

declare class StereoLayerShape extends UObject { 
	static Load(ResourceName: string): StereoLayerShape;
	static Find(Outer: UObject, ResourceName: string): StereoLayerShape;
	static GetDefaultObject(): StereoLayerShape;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerShape;
	static C(Other: UObject | any): StereoLayerShape;
}

declare class StereoLayerShapeQuad extends StereoLayerShape { 
	static Load(ResourceName: string): StereoLayerShapeQuad;
	static Find(Outer: UObject, ResourceName: string): StereoLayerShapeQuad;
	static GetDefaultObject(): StereoLayerShapeQuad;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerShapeQuad;
	static C(Other: UObject | any): StereoLayerShapeQuad;
}

declare class StereoLayerShapeCylinder extends StereoLayerShape { 
	Radius: number;
	OverlayArc: number;
	Height: number;
	static Load(ResourceName: string): StereoLayerShapeCylinder;
	static Find(Outer: UObject, ResourceName: string): StereoLayerShapeCylinder;
	static GetDefaultObject(): StereoLayerShapeCylinder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerShapeCylinder;
	SetRadius(InRadius: number): void;
	SetOverlayArc(InOverlayArc: number): void;
	SetHeight(InHeight: number): void;
	static C(Other: UObject | any): StereoLayerShapeCylinder;
}

declare class StereoLayerShapeCubemap extends StereoLayerShape { 
	static Load(ResourceName: string): StereoLayerShapeCubemap;
	static Find(Outer: UObject, ResourceName: string): StereoLayerShapeCubemap;
	static GetDefaultObject(): StereoLayerShapeCubemap;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerShapeCubemap;
	static C(Other: UObject | any): StereoLayerShapeCubemap;
}

declare class EquirectProps { 
	LeftUVRect: Box2D;
	RightUVRect: Box2D;
	LeftScale: Vector2D;
	RightScale: Vector2D;
	LeftBias: Vector2D;
	RightBias: Vector2D;
	clone() : EquirectProps;
	static C(Other: UObject | any): EquirectProps;
}

declare class StereoLayerShapeEquirect extends StereoLayerShape { 
	LeftUVRect: Box2D;
	RightUVRect: Box2D;
	LeftScale: Vector2D;
	RightScale: Vector2D;
	LeftBias: Vector2D;
	RightBias: Vector2D;
	static Load(ResourceName: string): StereoLayerShapeEquirect;
	static Find(Outer: UObject, ResourceName: string): StereoLayerShapeEquirect;
	static GetDefaultObject(): StereoLayerShapeEquirect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerShapeEquirect;
	SetEquirectProps(InScaleBiases: EquirectProps): void;
	static C(Other: UObject | any): StereoLayerShapeEquirect;
}

declare type EStereoLayerType = 'SLT_WorldLocked' | 'SLT_TrackerLocked' | 'SLT_FaceLocked' | 'SLT_MAX';
declare var EStereoLayerType : { SLT_WorldLocked:'SLT_WorldLocked',SLT_TrackerLocked:'SLT_TrackerLocked',SLT_FaceLocked:'SLT_FaceLocked',SLT_MAX:'SLT_MAX', };
declare type EStereoLayerShape = 'SLSH_QuadLayer' | 'SLSH_CylinderLayer' | 'SLSH_CubemapLayer' | 'SLSH_EquirectLayer' | 'SLSH_MAX';
declare var EStereoLayerShape : { SLSH_QuadLayer:'SLSH_QuadLayer',SLSH_CylinderLayer:'SLSH_CylinderLayer',SLSH_CubemapLayer:'SLSH_CubemapLayer',SLSH_EquirectLayer:'SLSH_EquirectLayer',SLSH_MAX:'SLSH_MAX', };
declare class StereoLayerComponent extends SceneComponent { 
	bLiveTexture: boolean;
	bSupportsDepth: boolean;
	bNoAlphaChannel: boolean;
	Texture: Texture;
	LeftTexture: Texture;
	bQuadPreserveTextureRatio: boolean;
	QuadSize: Vector2D;
	UVRect: Box2D;
	CylinderRadius: number;
	CylinderOverlayArc: number;
	CylinderHeight: number;
	EquirectProps: EquirectProps;
	StereoLayerType: EStereoLayerType;
	StereoLayerShape: EStereoLayerShape;
	Shape: StereoLayerShape;
	Priority: number;
	static Load(ResourceName: string): StereoLayerComponent;
	static Find(Outer: UObject, ResourceName: string): StereoLayerComponent;
	static GetDefaultObject(): StereoLayerComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerComponent;
	SetUVRect(InUVRect: Box2D): void;
	SetTexture(InTexture: Texture): void;
	SetQuadSize(InQuadSize: Vector2D): void;
	SetPriority(InPriority: number): void;
	SetLeftTexture(InTexture: Texture): void;
	SetEquirectProps(InScaleBiases: EquirectProps): void;
	MarkTextureForUpdate(): void;
	GetUVRect(): Box2D;
	GetTexture(): Texture;
	GetQuadSize(): Vector2D;
	GetPriority(): number;
	GetLeftTexture(): Texture;
	static C(Other: UObject | any): StereoLayerComponent;
}

declare class StereoLayerFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): StereoLayerFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): StereoLayerFunctionLibrary;
	static GetDefaultObject(): StereoLayerFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerFunctionLibrary;
	static ShowSplashScreen(): void;
	static SetSplashScreen(Texture: Texture,Scale: Vector2D,Offset: Vector,bShowLoadingMovie: boolean,bShowOnSet: boolean): void;
	static HideSplashScreen(): void;
	static EnableAutoLoadingSplashScreen(InAutoShowEnabled: boolean): void;
	static C(Other: UObject | any): StereoLayerFunctionLibrary;
}

declare class StringTable extends UObject { 
	static Load(ResourceName: string): StringTable;
	static Find(Outer: UObject, ResourceName: string): StringTable;
	static GetDefaultObject(): StringTable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StringTable;
	static C(Other: UObject | any): StringTable;
}

declare class SubsystemBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): SubsystemBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): SubsystemBlueprintLibrary;
	static GetDefaultObject(): SubsystemBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsystemBlueprintLibrary;
	static GetWorldSubsystem(ContextObject: UObject,Class: UnrealEngineClass): WorldSubsystem;
	static GetLocalPlayerSubSystemFromPlayerController(PlayerController: PlayerController,Class: UnrealEngineClass): LocalPlayerSubsystem;
	static GetLocalPlayerSubsystem(ContextObject: UObject,Class: UnrealEngineClass): LocalPlayerSubsystem;
	static GetGameInstanceSubsystem(ContextObject: UObject,Class: UnrealEngineClass): GameInstanceSubsystem;
	static GetEngineSubsystem(Class: UnrealEngineClass): EngineSubsystem;
	static C(Other: UObject | any): SubsystemBlueprintLibrary;
}

declare class SystemTimeTimecodeProvider extends TimecodeProvider { 
	FrameRate: FrameRate;
	bGenerateFullFrame: boolean;
	bUseHighPerformanceClock: boolean;
	static Load(ResourceName: string): SystemTimeTimecodeProvider;
	static Find(Outer: UObject, ResourceName: string): SystemTimeTimecodeProvider;
	static GetDefaultObject(): SystemTimeTimecodeProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SystemTimeTimecodeProvider;
	static C(Other: UObject | any): SystemTimeTimecodeProvider;
}

declare class TargetPoint extends Actor { 
	SpriteComponent: BillboardComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): TargetPoint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TargetPoint;
	static C(Other: UObject | any): TargetPoint;
}

declare class TextPropertyTestObject extends UObject { 
	DefaultedText: string;
	UndefaultedText: string;
	TransientText: string;
	static Load(ResourceName: string): TextPropertyTestObject;
	static Find(Outer: UObject, ResourceName: string): TextPropertyTestObject;
	static GetDefaultObject(): TextPropertyTestObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextPropertyTestObject;
	static C(Other: UObject | any): TextPropertyTestObject;
}

declare class TextRenderActor extends Actor { 
	TextRender: TextRenderComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): TextRenderActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextRenderActor;
	static C(Other: UObject | any): TextRenderActor;
}

declare class TextureMipDataProviderFactory extends AssetUserData { 
	static Load(ResourceName: string): TextureMipDataProviderFactory;
	static Find(Outer: UObject, ResourceName: string): TextureMipDataProviderFactory;
	static GetDefaultObject(): TextureMipDataProviderFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureMipDataProviderFactory;
	static C(Other: UObject | any): TextureMipDataProviderFactory;
}

declare class TimelineEventEntry { 
	Time: number;
	EventFunc: UnrealEngineDelegate<() => void>;
	clone() : TimelineEventEntry;
	static C(Other: UObject | any): TimelineEventEntry;
}

declare class TimelineVectorTrack { 
	VectorCurve: CurveVector;
	InterpFunc: UnrealEngineDelegate<(Output: Vector) => void>;
	TrackName: string;
	VectorPropertyName: string;
	clone() : TimelineVectorTrack;
	static C(Other: UObject | any): TimelineVectorTrack;
}

declare class TimelineFloatTrack { 
	FloatCurve: CurveFloat;
	InterpFunc: UnrealEngineDelegate<(Output: number) => void>;
	TrackName: string;
	FloatPropertyName: string;
	clone() : TimelineFloatTrack;
	static C(Other: UObject | any): TimelineFloatTrack;
}

declare class TimelineLinearColorTrack { 
	LinearColorCurve: CurveLinearColor;
	InterpFunc: UnrealEngineDelegate<(Output: LinearColor) => void>;
	TrackName: string;
	LinearColorPropertyName: string;
	clone() : TimelineLinearColorTrack;
	static C(Other: UObject | any): TimelineLinearColorTrack;
}

declare class Timeline { 
	LengthMode: ETimelineLengthMode;
	bLooping: boolean;
	bReversePlayback: boolean;
	bPlaying: boolean;
	Length: number;
	PlayRate: number;
	Position: number;
	Events: TimelineEventEntry[];
	InterpVectors: TimelineVectorTrack[];
	InterpFloats: TimelineFloatTrack[];
	InterpLinearColors: TimelineLinearColorTrack[];
	TimelinePostUpdateFunc: UnrealEngineDelegate<() => void>;
	TimelineFinishedFunc: UnrealEngineDelegate<() => void>;
	PropertySetObject: any;
	DirectionPropertyName: string;
	clone() : Timeline;
	static C(Other: UObject | any): Timeline;
}

declare class TimelineComponent extends ActorComponent { 
	TheTimeline: Timeline;
	bIgnoreTimeDilation: boolean;
	static Load(ResourceName: string): TimelineComponent;
	static Find(Outer: UObject, ResourceName: string): TimelineComponent;
	static GetDefaultObject(): TimelineComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TimelineComponent;
	Stop(): void;
	SetVectorCurve(NewVectorCurve: CurveVector,VectorTrackName: string): void;
	SetTimelineLengthMode(NewLengthMode: ETimelineLengthMode): void;
	SetTimelineLength(NewLength: number): void;
	SetPlayRate(NewRate: number): void;
	SetPlaybackPosition(NewPosition: number,bFireEvents: boolean,bFireUpdate: boolean): void;
	SetNewTime(NewTime: number): void;
	SetLooping(bNewLooping: boolean): void;
	SetLinearColorCurve(NewLinearColorCurve: CurveLinearColor,LinearColorTrackName: string): void;
	SetIgnoreTimeDilation(bNewIgnoreTimeDilation: boolean): void;
	SetFloatCurve(NewFloatCurve: CurveFloat,FloatTrackName: string): void;
	ReverseFromEnd(): void;
	Reverse(): void;
	PlayFromStart(): void;
	Play(): void;
	OnRep_Timeline(): void;
	IsReversing(): boolean;
	IsPlaying(): boolean;
	IsLooping(): boolean;
	GetTimelineLength(): number;
	GetPlayRate(): number;
	GetPlaybackPosition(): number;
	GetIgnoreTimeDilation(): boolean;
	static C(Other: UObject | any): TimelineComponent;
}

declare class TireType extends DataAsset { 
	FrictionScale: number;
	static Load(ResourceName: string): TireType;
	static Find(Outer: UObject, ResourceName: string): TireType;
	static GetDefaultObject(): TireType;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TireType;
	static C(Other: UObject | any): TireType;
}

declare class TriggerBase extends Actor { 
	CollisionComponent: ShapeComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): TriggerBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerBase;
	static C(Other: UObject | any): TriggerBase;
}

declare class TriggerBox extends TriggerBase { 
	static GetDefaultObject(): TriggerBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerBox;
	static C(Other: UObject | any): TriggerBox;
}

declare class TriggerCapsule extends TriggerBase { 
	static GetDefaultObject(): TriggerCapsule;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerCapsule;
	static C(Other: UObject | any): TriggerCapsule;
}

declare class TriggerSphere extends TriggerBase { 
	static GetDefaultObject(): TriggerSphere;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerSphere;
	static C(Other: UObject | any): TriggerSphere;
}

declare class TriggerVolume extends Volume { 
	static GetDefaultObject(): TriggerVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerVolume;
	static C(Other: UObject | any): TriggerVolume;
}

declare type ETwitterRequestMethod = 'TRM_Get' | 'TRM_Post' | 'TRM_Delete' | 'TRM_MAX';
declare var ETwitterRequestMethod : { TRM_Get:'TRM_Get',TRM_Post:'TRM_Post',TRM_Delete:'TRM_Delete',TRM_MAX:'TRM_MAX', };
declare class TwitterIntegrationBase extends PlatformInterfaceBase { 
	static Load(ResourceName: string): TwitterIntegrationBase;
	static Find(Outer: UObject, ResourceName: string): TwitterIntegrationBase;
	static GetDefaultObject(): TwitterIntegrationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TwitterIntegrationBase;
	TwitterRequest(URL: string,ParamKeysAndValues: string[],RequestMethod: ETwitterRequestMethod,AccountIndex: number): boolean;
	ShowTweetUI(InitialMessage: string,URL: string,Picture: string): boolean;
	Init(): void;
	GetNumAccounts(): number;
	GetAccountName(AccountIndex: number): string;
	CanShowTweetUI(): boolean;
	AuthorizeAccounts(): boolean;
	static C(Other: UObject | any): TwitterIntegrationBase;
}

declare class UserDefinedEnum extends Enum { 
	UniqueNameIndex: any;
	EnumDescription: string;
	DisplayNameMap: any;
	static Load(ResourceName: string): UserDefinedEnum;
	static Find(Outer: UObject, ResourceName: string): UserDefinedEnum;
	static GetDefaultObject(): UserDefinedEnum;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedEnum;
	static C(Other: UObject | any): UserDefinedEnum;
}

declare type EUserDefinedStructureStatus = 'UDSS_UpToDate' | 'UDSS_Dirty' | 'UDSS_Error' | 'UDSS_Duplicate' | 'UDSS_MAX';
declare var EUserDefinedStructureStatus : { UDSS_UpToDate:'UDSS_UpToDate',UDSS_Dirty:'UDSS_Dirty',UDSS_Error:'UDSS_Error',UDSS_Duplicate:'UDSS_Duplicate',UDSS_MAX:'UDSS_MAX', };
declare class UserDefinedStruct extends ScriptStruct { 
	PrimaryStruct: any;
	ErrorMessage: string;
	EditorData: UObject;
	Status: EUserDefinedStructureStatus;
	Guid: Guid;
	static Load(ResourceName: string): UserDefinedStruct;
	static Find(Outer: UObject, ResourceName: string): UserDefinedStruct;
	static GetDefaultObject(): UserDefinedStruct;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedStruct;
	static C(Other: UObject | any): UserDefinedStruct;
}

declare type ERenderFocusRule = 'Always' | 'NonPointer' | 'NavigationOnly' | 'Never' | 'ERenderFocusRule_MAX';
declare var ERenderFocusRule : { Always:'Always',NonPointer:'NonPointer',NavigationOnly:'NavigationOnly',Never:'Never',ERenderFocusRule_MAX:'ERenderFocusRule_MAX', };
declare type EUIScalingRule = 'ShortestSide' | 'LongestSide' | 'Horizontal' | 'Vertical' | 'ScaleToFit' | 'Custom' | 'EUIScalingRule_MAX';
declare var EUIScalingRule : { ShortestSide:'ShortestSide',LongestSide:'LongestSide',Horizontal:'Horizontal',Vertical:'Vertical',ScaleToFit:'ScaleToFit',Custom:'Custom',EUIScalingRule_MAX:'EUIScalingRule_MAX', };
declare class UserInterfaceSettings extends DeveloperSettings { 
	RenderFocusRule: ERenderFocusRule;
	HardwareCursors: any;
	SoftwareCursors: any;
	DefaultCursor: SoftClassPath;
	TextEditBeamCursor: SoftClassPath;
	CrosshairsCursor: SoftClassPath;
	HandCursor: SoftClassPath;
	GrabHandCursor: SoftClassPath;
	GrabHandClosedCursor: SoftClassPath;
	SlashedCircleCursor: SoftClassPath;
	ApplicationScale: number;
	UIScaleRule: EUIScalingRule;
	CustomScalingRuleClass: SoftClassPath;
	UIScaleCurve: RuntimeFloatCurve;
	bAllowHighDPIInGameMode: boolean;
	DesignScreenSize: IntPoint;
	bLoadWidgetsOnDedicatedServer: boolean;
	CursorClasses: UObject[];
	CustomScalingRuleClassInstance: UnrealEngineClass;
	CustomScalingRule: DPICustomScalingRule;
	static Load(ResourceName: string): UserInterfaceSettings;
	static Find(Outer: UObject, ResourceName: string): UserInterfaceSettings;
	static GetDefaultObject(): UserInterfaceSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserInterfaceSettings;
	static C(Other: UObject | any): UserInterfaceSettings;
}

declare type EVectorFieldConstructionOp = 'VFCO_Extrude' | 'VFCO_Revolve' | 'VFCO_MAX';
declare var EVectorFieldConstructionOp : { VFCO_Extrude:'VFCO_Extrude',VFCO_Revolve:'VFCO_Revolve',VFCO_MAX:'VFCO_MAX', };
declare class VectorFieldStatic extends VectorField { 
	SizeX: number;
	SizeY: number;
	SizeZ: number;
	bAllowCPUAccess: boolean;
	SourceFilePath: string;
	AssetImportData: AssetImportData;
	static Load(ResourceName: string): VectorFieldStatic;
	static Find(Outer: UObject, ResourceName: string): VectorFieldStatic;
	static GetDefaultObject(): VectorFieldStatic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldStatic;
	static C(Other: UObject | any): VectorFieldStatic;
}

declare class VectorFieldAnimated extends VectorField { 
	Texture: Texture2D;
	ConstructionOp: EVectorFieldConstructionOp;
	VolumeSizeX: number;
	VolumeSizeY: number;
	VolumeSizeZ: number;
	SubImagesX: number;
	SubImagesY: number;
	FrameCount: number;
	FramesPerSecond: number;
	bLoop: boolean;
	NoiseField: VectorFieldStatic;
	NoiseScale: number;
	NoiseMax: number;
	static Load(ResourceName: string): VectorFieldAnimated;
	static Find(Outer: UObject, ResourceName: string): VectorFieldAnimated;
	static GetDefaultObject(): VectorFieldAnimated;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldAnimated;
	static C(Other: UObject | any): VectorFieldAnimated;
}

declare class VectorFieldComponent extends PrimitiveComponent { 
	VectorField: VectorField;
	Intensity: number;
	Tightness: number;
	bPreviewVectorField: boolean;
	static Load(ResourceName: string): VectorFieldComponent;
	static Find(Outer: UObject, ResourceName: string): VectorFieldComponent;
	static GetDefaultObject(): VectorFieldComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldComponent;
	SetIntensity(NewIntensity: number): void;
	static C(Other: UObject | any): VectorFieldComponent;
}

declare class VectorFieldVolume extends Actor { 
	VectorFieldComponent: VectorFieldComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): VectorFieldVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldVolume;
	static C(Other: UObject | any): VectorFieldVolume;
}

declare class ViewportStatsSubsystem extends WorldSubsystem { 
	static Load(ResourceName: string): ViewportStatsSubsystem;
	static Find(Outer: UObject, ResourceName: string): ViewportStatsSubsystem;
	static GetDefaultObject(): ViewportStatsSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportStatsSubsystem;
	RemoveDisplayDelegate(IndexToRemove: number): void;
	AddTimedDisplay(text: string,Color: LinearColor,Duration: number): void;
	static C(Other: UObject | any): ViewportStatsSubsystem;
}

declare class VirtualTexture extends UObject { 
	static Load(ResourceName: string): VirtualTexture;
	static Find(Outer: UObject, ResourceName: string): VirtualTexture;
	static GetDefaultObject(): VirtualTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VirtualTexture;
	static C(Other: UObject | any): VirtualTexture;
}

declare class LightMapVirtualTexture extends VirtualTexture { 
	static Load(ResourceName: string): LightMapVirtualTexture;
	static Find(Outer: UObject, ResourceName: string): LightMapVirtualTexture;
	static GetDefaultObject(): LightMapVirtualTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightMapVirtualTexture;
	static C(Other: UObject | any): LightMapVirtualTexture;
}

declare class VirtualTextureSpacePoolConfig { 
	MinTileSize: number;
	MaxTileSize: number;
	Formats: EPixelFormat[];
	SizeInMegabyte: number;
	bAllowSizeScale: boolean;
	ScalabilityGroup: any;
	clone() : VirtualTextureSpacePoolConfig;
	static C(Other: UObject | any): VirtualTextureSpacePoolConfig;
}

declare class VirtualTexturePoolConfig extends UObject { 
	DefaultSizeInMegabyte: number;
	Pools: VirtualTextureSpacePoolConfig[];
	static Load(ResourceName: string): VirtualTexturePoolConfig;
	static Find(Outer: UObject, ResourceName: string): VirtualTexturePoolConfig;
	static GetDefaultObject(): VirtualTexturePoolConfig;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VirtualTexturePoolConfig;
	static C(Other: UObject | any): VirtualTexturePoolConfig;
}

declare class VisualLoggerAutomationTests extends UObject { 
	static Load(ResourceName: string): VisualLoggerAutomationTests;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerAutomationTests;
	static GetDefaultObject(): VisualLoggerAutomationTests;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerAutomationTests;
	static C(Other: UObject | any): VisualLoggerAutomationTests;
}

declare class VisualLoggerDebugSnapshotInterface extends Interface { 
	static Load(ResourceName: string): VisualLoggerDebugSnapshotInterface;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerDebugSnapshotInterface;
	static GetDefaultObject(): VisualLoggerDebugSnapshotInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerDebugSnapshotInterface;
	static C(Other: UObject | any): VisualLoggerDebugSnapshotInterface;
}

declare class VisualLoggerKismetLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): VisualLoggerKismetLibrary;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerKismetLibrary;
	static GetDefaultObject(): VisualLoggerKismetLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerKismetLibrary;
	static RedirectVislog(SourceOwner: UObject,DestinationOwner: UObject): void;
	static LogText(WorldContextObject: UObject,text: string,LogCategory: string,bAddToMessageLog: boolean): void;
	static LogSegment(WorldContextObject: UObject,SegmentStart: Vector,SegmentEnd: Vector,text: string,ObjectColor: LinearColor,Thickness: number,CategoryName: string,bAddToMessageLog: boolean): void;
	static LogLocation(WorldContextObject: UObject,Location: Vector,text: string,ObjectColor: LinearColor,Radius: number,LogCategory: string,bAddToMessageLog: boolean): void;
	static LogBox(WorldContextObject: UObject,BoxShape: Box,text: string,ObjectColor: LinearColor,LogCategory: string,bAddToMessageLog: boolean): void;
	static EnableRecording(bEnabled: boolean): void;
	static C(Other: UObject | any): VisualLoggerKismetLibrary;
}

declare class VoiceChannel extends Channel { 
	static Load(ResourceName: string): VoiceChannel;
	static Find(Outer: UObject, ResourceName: string): VoiceChannel;
	static GetDefaultObject(): VoiceChannel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VoiceChannel;
	static C(Other: UObject | any): VoiceChannel;
}

declare class VoiceSettings { 
	ComponentToAttachTo: SceneComponent;
	AttenuationSettings: SoundAttenuation;
	SourceEffectChain: SoundEffectSourcePresetChain;
	clone() : VoiceSettings;
	static C(Other: UObject | any): VoiceSettings;
}

declare class VOIPTalker extends ActorComponent { 
	Settings: VoiceSettings;
	static Load(ResourceName: string): VOIPTalker;
	static Find(Outer: UObject, ResourceName: string): VOIPTalker;
	static GetDefaultObject(): VOIPTalker;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VOIPTalker;
	RegisterWithPlayerState(OwningState: PlayerState): void;
	GetVoiceLevel(): number;
	static CreateTalkerForPlayer(OwningState: PlayerState): VOIPTalker;
	BPOnTalkingEnd(): void;
	BPOnTalkingBegin(AudioComponent: AudioComponent): void;
	static C(Other: UObject | any): VOIPTalker;
}

declare class VOIPStatics extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): VOIPStatics;
	static Find(Outer: UObject, ResourceName: string): VOIPStatics;
	static GetDefaultObject(): VOIPStatics;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VOIPStatics;
	static SetMicThreshold(InThreshold: number): void;
	static C(Other: UObject | any): VOIPStatics;
}

declare class VolumetricCloudComponent extends SceneComponent { 
	LayerBottomAltitude: number;
	LayerHeight: number;
	TracingStartMaxDistance: number;
	TracingMaxDistance: number;
	PlanetRadius: number;
	GroundAlbedo: Color;
	Material: MaterialInterface;
	bUsePerSampleAtmosphericLightTransmittance: boolean;
	SkyLightCloudBottomOcclusion: number;
	ViewSampleCountScale: number;
	ReflectionSampleCountScale: number;
	ShadowViewSampleCountScale: number;
	ShadowReflectionSampleCountScale: number;
	ShadowTracingDistance: number;
	StopTracingTransmittanceThreshold: number;
	static Load(ResourceName: string): VolumetricCloudComponent;
	static Find(Outer: UObject, ResourceName: string): VolumetricCloudComponent;
	static GetDefaultObject(): VolumetricCloudComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumetricCloudComponent;
	SetViewSampleCountScale(NewValue: number): void;
	SetTracingStartMaxDistance(NewValue: number): void;
	SetTracingMaxDistance(NewValue: number): void;
	SetStopTracingTransmittanceThreshold(NewValue: number): void;
	SetSkyLightCloudBottomOcclusion(NewValue: number): void;
	SetShadowViewSampleCountScale(NewValue: number): void;
	SetShadowTracingDistance(NewValue: number): void;
	SetShadowReflectionSampleCountScale(NewValue: number): void;
	SetReflectionSampleCountScale(NewValue: number): void;
	SetPlanetRadius(NewValue: number): void;
	SetMaterial(NewValue: MaterialInterface): void;
	SetLayerHeight(NewValue: number): void;
	SetLayerBottomAltitude(NewValue: number): void;
	SetGroundAlbedo(NewValue: Color): void;
	SetbUsePerSampleAtmosphericLightTransmittance(NewValue: boolean): void;
	static C(Other: UObject | any): VolumetricCloudComponent;
}

declare class VolumetricCloud extends Info { 
	VolumetricCloudComponent: VolumetricCloudComponent;
	static GetDefaultObject(): VolumetricCloud;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumetricCloud;
	static C(Other: UObject | any): VolumetricCloud;
}

declare class VolumetricLightmapDensityVolume extends Volume { 
	AllowedMipLevelRange: Int32Interval;
	static GetDefaultObject(): VolumetricLightmapDensityVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumetricLightmapDensityVolume;
	static C(Other: UObject | any): VolumetricLightmapDensityVolume;
}

declare type EWindSourceType = 'Directional' | 'Point' | 'EWindSourceType_MAX';
declare var EWindSourceType : { Directional:'Directional',Point:'Point',EWindSourceType_MAX:'EWindSourceType_MAX', };
declare class WindDirectionalSourceComponent extends SceneComponent { 
	Strength: number;
	Speed: number;
	MinGustAmount: number;
	MaxGustAmount: number;
	Radius: number;
	bPointWind: boolean;
	static Load(ResourceName: string): WindDirectionalSourceComponent;
	static Find(Outer: UObject, ResourceName: string): WindDirectionalSourceComponent;
	static GetDefaultObject(): WindDirectionalSourceComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WindDirectionalSourceComponent;
	SetWindType(InNewType: EWindSourceType): void;
	SetStrength(InNewStrength: number): void;
	SetSpeed(InNewSpeed: number): void;
	SetRadius(InNewRadius: number): void;
	SetMinimumGustAmount(InNewMinGust: number): void;
	SetMaximumGustAmount(InNewMaxGust: number): void;
	static C(Other: UObject | any): WindDirectionalSourceComponent;
}

declare class WindDirectionalSource extends Info { 
	Component: WindDirectionalSourceComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): WindDirectionalSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WindDirectionalSource;
	static C(Other: UObject | any): WindDirectionalSource;
}

declare class HierarchicalLODSetup extends UObject { 
	HierarchicalLODSetup: HierarchicalSimplification[];
	OverrideBaseMaterial: MaterialInterface;
	static Load(ResourceName: string): HierarchicalLODSetup;
	static Find(Outer: UObject, ResourceName: string): HierarchicalLODSetup;
	static GetDefaultObject(): HierarchicalLODSetup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HierarchicalLODSetup;
	static C(Other: UObject | any): HierarchicalLODSetup;
}

declare class MoviePlayerSettings extends UObject { 
	bWaitForMoviesToComplete: boolean;
	bMoviesAreSkippable: boolean;
	StartupMovies: string[];
	static Load(ResourceName: string): MoviePlayerSettings;
	static Find(Outer: UObject, ResourceName: string): MoviePlayerSettings;
	static GetDefaultObject(): MoviePlayerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MoviePlayerSettings;
	static C(Other: UObject | any): MoviePlayerSettings;
}

declare class SHAHashData { 
	Hash: number;
	clone() : SHAHashData;
	static C(Other: UObject | any): SHAHashData;
}

declare class ChunkPartData { 
	Guid: Guid;
	Offset: any;
	Size: any;
	clone() : ChunkPartData;
	static C(Other: UObject | any): ChunkPartData;
}

declare class FileManifestData { 
	Filename: string;
	FileHash: SHAHashData;
	FileChunkParts: ChunkPartData[];
	InstallTags: string[];
	bIsUnixExecutable: boolean;
	SymlinkTarget: string;
	bIsReadOnly: boolean;
	bIsCompressed: boolean;
	clone() : FileManifestData;
	static C(Other: UObject | any): FileManifestData;
}

declare class ChunkInfoData { 
	Guid: Guid;
	Hash: any;
	ShaHash: SHAHashData;
	FileSize: any;
	GroupNumber: number;
	clone() : ChunkInfoData;
	static C(Other: UObject | any): ChunkInfoData;
}

declare class CustomFieldData { 
	Key: string;
	Value: string;
	clone() : CustomFieldData;
	static C(Other: UObject | any): CustomFieldData;
}

declare class BuildPatchManifest extends UObject { 
	ManifestFileVersion: number;
	bIsFileData: boolean;
	AppID: any;
	AppName: string;
	BuildVersion: string;
	LaunchExe: string;
	LaunchCommand: string;
	PrereqIds: any;
	PrereqName: string;
	PrereqPath: string;
	PrereqArgs: string;
	FileManifestList: FileManifestData[];
	ChunkList: ChunkInfoData[];
	CustomFields: CustomFieldData[];
	static Load(ResourceName: string): BuildPatchManifest;
	static Find(Outer: UObject, ResourceName: string): BuildPatchManifest;
	static GetDefaultObject(): BuildPatchManifest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BuildPatchManifest;
	static C(Other: UObject | any): BuildPatchManifest;
}

declare class SoundFactory extends Factory { 
	bAutoCreateCue: boolean;
	bIncludeAttenuationNode: boolean;
	bIncludeLoopingNode: boolean;
	bIncludeModulatorNode: boolean;
	CueVolume: number;
	CuePackageSuffix: string;
	static Load(ResourceName: string): SoundFactory;
	static Find(Outer: UObject, ResourceName: string): SoundFactory;
	static GetDefaultObject(): SoundFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundFactory;
	static C(Other: UObject | any): SoundFactory;
}

declare class ReimportSoundFactory extends SoundFactory { 
	static Load(ResourceName: string): ReimportSoundFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportSoundFactory;
	static GetDefaultObject(): ReimportSoundFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportSoundFactory;
	static C(Other: UObject | any): ReimportSoundFactory;
}

declare class LinuxTargetSettings extends UObject { 
	SpatializationPlugin: string;
	ReverbPlugin: string;
	OcclusionPlugin: string;
	SoundCueCookQualityIndex: number;
	TargetedRHIs: string[];
	static Load(ResourceName: string): LinuxTargetSettings;
	static Find(Outer: UObject, ResourceName: string): LinuxTargetSettings;
	static GetDefaultObject(): LinuxTargetSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinuxTargetSettings;
	static C(Other: UObject | any): LinuxTargetSettings;
}

declare type EMacTargetArchitecture = 'MacTargetArchitectureIntel' | 'MacTargetArchitectureUniversal' | 'MacTargetArchitectureAppleSil' | 'EMacTargetArchitecture_MAX';
declare var EMacTargetArchitecture : { MacTargetArchitectureIntel:'MacTargetArchitectureIntel',MacTargetArchitectureUniversal:'MacTargetArchitectureUniversal',MacTargetArchitectureAppleSil:'MacTargetArchitectureAppleSil',EMacTargetArchitecture_MAX:'EMacTargetArchitecture_MAX', };
declare class MacTargetSettings extends UObject { 
	TargetedRHIs: string[];
	TargetArchitecture: EMacTargetArchitecture;
	MaxShaderLanguageVersion: number;
	UseFastIntrinsics: boolean;
	ForceFloats: boolean;
	EnableMathOptimisations: boolean;
	IndirectArgumentTier: number;
	AudioSampleRate: number;
	AudioCallbackBufferFrameSize: number;
	AudioNumBuffersToEnqueue: number;
	AudioMaxChannels: number;
	AudioNumSourceWorkers: number;
	SpatializationPlugin: string;
	ReverbPlugin: string;
	OcclusionPlugin: string;
	SoundCueCookQualityIndex: number;
	static Load(ResourceName: string): MacTargetSettings;
	static Find(Outer: UObject, ResourceName: string): MacTargetSettings;
	static GetDefaultObject(): MacTargetSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MacTargetSettings;
	static C(Other: UObject | any): MacTargetSettings;
}

declare class AudioBusFactory extends Factory { 
	static Load(ResourceName: string): AudioBusFactory;
	static Find(Outer: UObject, ResourceName: string): AudioBusFactory;
	static GetDefaultObject(): AudioBusFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioBusFactory;
	static C(Other: UObject | any): AudioBusFactory;
}

declare class DialogueVoiceFactory extends Factory { 
	static Load(ResourceName: string): DialogueVoiceFactory;
	static Find(Outer: UObject, ResourceName: string): DialogueVoiceFactory;
	static GetDefaultObject(): DialogueVoiceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueVoiceFactory;
	static C(Other: UObject | any): DialogueVoiceFactory;
}

declare class DialogueWaveFactory extends Factory { 
	InitialSoundWave: SoundWave;
	InitialSpeakerVoice: DialogueVoice;
	HasSetInitialTargetVoice: boolean;
	InitialTargetVoices: DialogueVoice[];
	static Load(ResourceName: string): DialogueWaveFactory;
	static Find(Outer: UObject, ResourceName: string): DialogueWaveFactory;
	static GetDefaultObject(): DialogueWaveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueWaveFactory;
	static C(Other: UObject | any): DialogueWaveFactory;
}

declare class ReverbEffectFactory extends Factory { 
	static Load(ResourceName: string): ReverbEffectFactory;
	static Find(Outer: UObject, ResourceName: string): ReverbEffectFactory;
	static GetDefaultObject(): ReverbEffectFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReverbEffectFactory;
	static C(Other: UObject | any): ReverbEffectFactory;
}

declare class SoundAttenuationFactory extends Factory { 
	static Load(ResourceName: string): SoundAttenuationFactory;
	static Find(Outer: UObject, ResourceName: string): SoundAttenuationFactory;
	static GetDefaultObject(): SoundAttenuationFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundAttenuationFactory;
	static C(Other: UObject | any): SoundAttenuationFactory;
}

declare class SoundClassFactory extends Factory { 
	static Load(ResourceName: string): SoundClassFactory;
	static Find(Outer: UObject, ResourceName: string): SoundClassFactory;
	static GetDefaultObject(): SoundClassFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassFactory;
	static C(Other: UObject | any): SoundClassFactory;
}

declare class SoundClassGraph extends EdGraph { 
	static Load(ResourceName: string): SoundClassGraph;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraph;
	static GetDefaultObject(): SoundClassGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraph;
	static C(Other: UObject | any): SoundClassGraph;
}

declare class SoundClassGraphNode extends EdGraphNode { 
	SoundClass: SoundClass;
	static Load(ResourceName: string): SoundClassGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraphNode;
	static GetDefaultObject(): SoundClassGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraphNode;
	static C(Other: UObject | any): SoundClassGraphNode;
}

declare class SoundClassGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): SoundClassGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraphSchema;
	static GetDefaultObject(): SoundClassGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraphSchema;
	static C(Other: UObject | any): SoundClassGraphSchema;
}

declare class SoundEffectSourcePresetClassTemplate extends ClassTemplate { 
	static Load(ResourceName: string): SoundEffectSourcePresetClassTemplate;
	static Find(Outer: UObject, ResourceName: string): SoundEffectSourcePresetClassTemplate;
	static GetDefaultObject(): SoundEffectSourcePresetClassTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectSourcePresetClassTemplate;
	static C(Other: UObject | any): SoundEffectSourcePresetClassTemplate;
}

declare class SoundEffectSubmixPresetClassTemplate extends ClassTemplate { 
	static Load(ResourceName: string): SoundEffectSubmixPresetClassTemplate;
	static Find(Outer: UObject, ResourceName: string): SoundEffectSubmixPresetClassTemplate;
	static GetDefaultObject(): SoundEffectSubmixPresetClassTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectSubmixPresetClassTemplate;
	static C(Other: UObject | any): SoundEffectSubmixPresetClassTemplate;
}

declare class SynthComponentClassTemplate extends ClassTemplate { 
	static Load(ResourceName: string): SynthComponentClassTemplate;
	static Find(Outer: UObject, ResourceName: string): SynthComponentClassTemplate;
	static GetDefaultObject(): SynthComponentClassTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SynthComponentClassTemplate;
	static C(Other: UObject | any): SynthComponentClassTemplate;
}

declare class SoundConcurrencyFactory extends Factory { 
	static Load(ResourceName: string): SoundConcurrencyFactory;
	static Find(Outer: UObject, ResourceName: string): SoundConcurrencyFactory;
	static GetDefaultObject(): SoundConcurrencyFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundConcurrencyFactory;
	static C(Other: UObject | any): SoundConcurrencyFactory;
}

declare class SoundCueFactoryNew extends Factory { 
	InitialSoundWave: SoundWave;
	InitialSoundWaves: any[];
	InitialDialogueWave: DialogueWave;
	InitialDialogueWaves: any[];
	static Load(ResourceName: string): SoundCueFactoryNew;
	static Find(Outer: UObject, ResourceName: string): SoundCueFactoryNew;
	static GetDefaultObject(): SoundCueFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueFactoryNew;
	static C(Other: UObject | any): SoundCueFactoryNew;
}

declare class SoundCueGraph extends EdGraph { 
	static Load(ResourceName: string): SoundCueGraph;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraph;
	static GetDefaultObject(): SoundCueGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraph;
	static C(Other: UObject | any): SoundCueGraph;
}

declare class SoundCueGraphNode_Base extends EdGraphNode { 
	static Load(ResourceName: string): SoundCueGraphNode_Base;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode_Base;
	static GetDefaultObject(): SoundCueGraphNode_Base;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode_Base;
	static C(Other: UObject | any): SoundCueGraphNode_Base;
}

declare class SoundCueGraphNode extends SoundCueGraphNode_Base { 
	SoundNode: SoundNode;
	static Load(ResourceName: string): SoundCueGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode;
	static GetDefaultObject(): SoundCueGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode;
	static C(Other: UObject | any): SoundCueGraphNode;
}

declare class SoundCueGraphNode_Root extends SoundCueGraphNode_Base { 
	static Load(ResourceName: string): SoundCueGraphNode_Root;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode_Root;
	static GetDefaultObject(): SoundCueGraphNode_Root;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode_Root;
	static C(Other: UObject | any): SoundCueGraphNode_Root;
}

declare class SoundCueGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): SoundCueGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphSchema;
	static GetDefaultObject(): SoundCueGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphSchema;
	static C(Other: UObject | any): SoundCueGraphSchema;
}

declare class SoundEffectPresetUserWidget extends UserWidget { 
	Preset: SoundEffectPreset;
	static Load(ResourceName: string): SoundEffectPresetUserWidget;
	static Find(Outer: UObject, ResourceName: string): SoundEffectPresetUserWidget;
	static GetDefaultObject(): SoundEffectPresetUserWidget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectPresetUserWidget;
	OnPresetChanged(PropertyName: string): void;
	static C(Other: UObject | any): SoundEffectPresetUserWidget;
}

declare class SoundMixFactory extends Factory { 
	static Load(ResourceName: string): SoundMixFactory;
	static Find(Outer: UObject, ResourceName: string): SoundMixFactory;
	static GetDefaultObject(): SoundMixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundMixFactory;
	static C(Other: UObject | any): SoundMixFactory;
}

declare class SoundSourceBusFactory extends Factory { 
	static Load(ResourceName: string): SoundSourceBusFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSourceBusFactory;
	static GetDefaultObject(): SoundSourceBusFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSourceBusFactory;
	static C(Other: UObject | any): SoundSourceBusFactory;
}

declare class SoundSourceEffectFactory extends Factory { 
	SoundEffectSourcepresetClass: UnrealEngineClass;
	static Load(ResourceName: string): SoundSourceEffectFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSourceEffectFactory;
	static GetDefaultObject(): SoundSourceEffectFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSourceEffectFactory;
	static C(Other: UObject | any): SoundSourceEffectFactory;
}

declare class SoundSourceEffectChainFactory extends Factory { 
	static Load(ResourceName: string): SoundSourceEffectChainFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSourceEffectChainFactory;
	static GetDefaultObject(): SoundSourceEffectChainFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSourceEffectChainFactory;
	static C(Other: UObject | any): SoundSourceEffectChainFactory;
}

declare class SoundSubmixEffectFactory extends Factory { 
	SoundEffectSubmixPresetClass: UnrealEngineClass;
	static Load(ResourceName: string): SoundSubmixEffectFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixEffectFactory;
	static GetDefaultObject(): SoundSubmixEffectFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixEffectFactory;
	static C(Other: UObject | any): SoundSubmixEffectFactory;
}

declare class SoundSubmixFactory extends Factory { 
	static Load(ResourceName: string): SoundSubmixFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixFactory;
	static GetDefaultObject(): SoundSubmixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixFactory;
	static C(Other: UObject | any): SoundSubmixFactory;
}

declare class SoundfieldSubmixFactory extends Factory { 
	static Load(ResourceName: string): SoundfieldSubmixFactory;
	static Find(Outer: UObject, ResourceName: string): SoundfieldSubmixFactory;
	static GetDefaultObject(): SoundfieldSubmixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundfieldSubmixFactory;
	static C(Other: UObject | any): SoundfieldSubmixFactory;
}

declare class EndpointSubmixFactory extends Factory { 
	static Load(ResourceName: string): EndpointSubmixFactory;
	static Find(Outer: UObject, ResourceName: string): EndpointSubmixFactory;
	static GetDefaultObject(): EndpointSubmixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EndpointSubmixFactory;
	static C(Other: UObject | any): EndpointSubmixFactory;
}

declare class SoundfieldEndpointSubmixFactory extends Factory { 
	static Load(ResourceName: string): SoundfieldEndpointSubmixFactory;
	static Find(Outer: UObject, ResourceName: string): SoundfieldEndpointSubmixFactory;
	static GetDefaultObject(): SoundfieldEndpointSubmixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundfieldEndpointSubmixFactory;
	static C(Other: UObject | any): SoundfieldEndpointSubmixFactory;
}

declare class SoundSubmixGraph extends EdGraph { 
	RootSoundSubmix: SoundSubmixBase;
	StaleRoots: SoundSubmixBase[];
	static Load(ResourceName: string): SoundSubmixGraph;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixGraph;
	static GetDefaultObject(): SoundSubmixGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixGraph;
	static C(Other: UObject | any): SoundSubmixGraph;
}

declare class SoundSubmixGraphNode extends EdGraphNode { 
	SoundSubmix: SoundSubmixBase;
	static Load(ResourceName: string): SoundSubmixGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixGraphNode;
	static GetDefaultObject(): SoundSubmixGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixGraphNode;
	static C(Other: UObject | any): SoundSubmixGraphNode;
}

declare class SoundSubmixGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): SoundSubmixGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixGraphSchema;
	static GetDefaultObject(): SoundSubmixGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixGraphSchema;
	static C(Other: UObject | any): SoundSubmixGraphSchema;
}

declare class AnimationBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AnimationBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): AnimationBlueprintLibrary;
	static GetDefaultObject(): AnimationBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationBlueprintLibrary;
	static SetRootMotionLockType(AnimationSequence: AnimSequence,RootMotionLockType: ERootMotionRootLock): void;
	static SetRootMotionEnabled(AnimationSequence: AnimSequence,bEnabled: boolean): void;
	static SetRateScale(AnimationSequence: AnimSequence,RateScale: number): void;
	static SetIsRootMotionLockForced(AnimationSequence: AnimSequence,bForced: boolean): void;
	static SetCurveCompressionSettings(AnimationSequence: AnimSequence,CompressionSettings: AnimCurveCompressionSettings): void;
	static SetBoneCompressionSettings(AnimationSequence: AnimSequence,CompressionSettings: AnimBoneCompressionSettings): void;
	static SetAnimationInterpolationType(AnimationSequence: AnimSequence,InterpolationType: EAnimInterpolationType): void;
	static SetAdditiveBasePoseType(AnimationSequence: AnimSequence,AdditiveBasePoseType: EAdditiveBasePoseType): void;
	static SetAdditiveAnimationType(AnimationSequence: AnimSequence,AdditiveAnimationType: EAdditiveAnimationType): void;
	static RemoveVirtualBones(AnimationSequence: AnimSequence,VirtualBoneNames: string[]): void;
	static RemoveVirtualBone(AnimationSequence: AnimSequence,VirtualBoneName: string): void;
	static RemoveMetaDataOfClass(AnimationSequence: AnimSequence,MetaDataClass: UnrealEngineClass): void;
	static RemoveMetaData(AnimationSequence: AnimSequence,MetaDataObject: AnimMetaData): void;
	static RemoveCurve(AnimationSequence: AnimSequence,CurveName: string,bRemoveNameFromSkeleton: boolean): void;
	static RemoveBoneAnimation(AnimationSequence: AnimSequence,BoneName: string,bIncludeChildren: boolean,bFinalize: boolean): void;
	static RemoveAnimationSyncMarkersByTrack(AnimationSequence: AnimSequence,NotifyTrackName: string): number;
	static RemoveAnimationSyncMarkersByName(AnimationSequence: AnimSequence,MarkerName: string): number;
	static RemoveAnimationNotifyTrack(AnimationSequence: AnimSequence,NotifyTrackName: string): void;
	static RemoveAnimationNotifyEventsByTrack(AnimationSequence: AnimSequence,NotifyTrackName: string): number;
	static RemoveAnimationNotifyEventsByName(AnimationSequence: AnimSequence,NotifyName: string): number;
	static RemoveAllVirtualBones(AnimationSequence: AnimSequence): void;
	static RemoveAllMetaData(AnimationSequence: AnimSequence): void;
	static RemoveAllCurveData(AnimationSequence: AnimSequence): void;
	static RemoveAllBoneAnimation(AnimationSequence: AnimSequence): void;
	static RemoveAllAnimationSyncMarkers(AnimationSequence: AnimSequence): void;
	static RemoveAllAnimationNotifyTracks(AnimationSequence: AnimSequence): void;
	static IsValidTime(AnimationSequence: AnimSequence,Time: number,IsValid?: boolean): {IsValid: boolean};
	static IsValidRawAnimationTrackName(AnimationSequence: AnimSequence,TrackName: string): boolean;
	static IsValidAnimNotifyTrackName(AnimationSequence: AnimSequence,NotifyTrackName: string): boolean;
	static IsValidAnimationSyncMarkerName(AnimationSequence: AnimSequence,MarkerName: string): boolean;
	static IsRootMotionLockForced(AnimationSequence: AnimSequence): boolean;
	static IsRootMotionEnabled(AnimationSequence: AnimSequence): boolean;
	static GetVectorKeys(AnimationSequence: AnimSequence,CurveName: string,Times?: number[],Values?: Vector[]): {Times: number[], Values: Vector[]};
	static GetUniqueMarkerNames(AnimationSequence: AnimSequence,MarkerNames?: string[]): {MarkerNames: string[]};
	static GetTransformationKeys(AnimationSequence: AnimSequence,CurveName: string,Times?: number[],Values?: Transform[]): {Times: number[], Values: Transform[]};
	static GetTimeAtFrame(AnimationSequence: AnimSequence,Frame: number,Time?: number): {Time: number};
	static GetSequenceLength(AnimationSequence: AnimSequence,Length?: number): {Length: number};
	static GetRootMotionLockType(AnimationSequence: AnimSequence,LockType?: ERootMotionRootLock): {LockType: ERootMotionRootLock};
	static GetRawTrackScaleData(AnimationSequence: AnimSequence,TrackName: string,ScaleData?: Vector[]): {ScaleData: Vector[]};
	static GetRawTrackRotationData(AnimationSequence: AnimSequence,TrackName: string,RotationData?: Quat[]): {RotationData: Quat[]};
	static GetRawTrackPositionData(AnimationSequence: AnimSequence,TrackName: string,PositionData?: Vector[]): {PositionData: Vector[]};
	static GetRawTrackData(AnimationSequence: AnimSequence,TrackName: string,PositionKeys?: Vector[],RotationKeys?: Quat[],ScalingKeys?: Vector[]): {PositionKeys: Vector[], RotationKeys: Quat[], ScalingKeys: Vector[]};
	static GetRateScale(AnimationSequence: AnimSequence,RateScale?: number): {RateScale: number};
	static GetNumFrames(AnimationSequence: AnimSequence,NumFrames?: number): {NumFrames: number};
	static GetMetaDataOfClass(AnimationSequence: AnimSequence,MetaDataClass: UnrealEngineClass,MetaDataOfClass: AnimMetaData[]): void;
	static GetMetaData(AnimationSequence: AnimSequence,MetaData: AnimMetaData[]): void;
	static GetFrameAtTime(AnimationSequence: AnimSequence,Time: number,Frame?: number): {Frame: number};
	static GetFloatKeys(AnimationSequence: AnimSequence,CurveName: string,Times?: number[],Values?: number[]): {Times: number[], Values: number[]};
	static GetCurveCompressionSettings(AnimationSequence: AnimSequence,CompressionSettings?: AnimCurveCompressionSettings): {CompressionSettings: AnimCurveCompressionSettings};
	static GetBonePosesForTime(AnimationSequence: AnimSequence,BoneNames: string[],Time: number,bExtractRootMotion: boolean,Poses?: Transform[],PreviewMesh?: SkeletalMesh): {Poses: Transform[]};
	static GetBonePosesForFrame(AnimationSequence: AnimSequence,BoneNames: string[],Frame: number,bExtractRootMotion: boolean,Poses?: Transform[],PreviewMesh?: SkeletalMesh): {Poses: Transform[]};
	static GetBonePoseForTime(AnimationSequence: AnimSequence,BoneName: string,Time: number,bExtractRootMotion: boolean,Pose?: Transform): {Pose: Transform};
	static GetBonePoseForFrame(AnimationSequence: AnimSequence,BoneName: string,Frame: number,bExtractRootMotion: boolean,Pose?: Transform): {Pose: Transform};
	static GetBoneCompressionSettings(AnimationSequence: AnimSequence,CompressionSettings?: AnimBoneCompressionSettings): {CompressionSettings: AnimBoneCompressionSettings};
	static GetAnimNotifyEventTriggerTime(NotifyEvent: AnimNotifyEvent): number;
	static GetAnimationTrackNames(AnimationSequence: AnimSequence,TrackNames?: string[]): {TrackNames: string[]};
	static GetAnimationSyncMarkersForTrack(AnimationSequence: AnimSequence,NotifyTrackName: string,Markers?: AnimSyncMarker[]): {Markers: AnimSyncMarker[]};
	static GetAnimationSyncMarkers(AnimationSequence: AnimSequence,Markers?: AnimSyncMarker[]): {Markers: AnimSyncMarker[]};
	static GetAnimationNotifyTrackNames(AnimationSequence: AnimSequence,TrackNames?: string[]): {TrackNames: string[]};
	static GetAnimationNotifyEventsForTrack(AnimationSequence: AnimSequence,NotifyTrackName: string,Events?: AnimNotifyEvent[]): {Events: AnimNotifyEvent[]};
	static GetAnimationNotifyEvents(AnimationSequence: AnimSequence,NotifyEvents?: AnimNotifyEvent[]): {NotifyEvents: AnimNotifyEvent[]};
	static GetAnimationNotifyEventNames(AnimationSequence: AnimSequence,EventNames?: string[]): {EventNames: string[]};
	static GetAnimationInterpolationType(AnimationSequence: AnimSequence,InterpolationType?: EAnimInterpolationType): {InterpolationType: EAnimInterpolationType};
	static GetAnimationCurveNames(AnimationSequence: AnimSequence,CurveType: ERawCurveTrackTypes,CurveNames?: string[]): {CurveNames: string[]};
	static GetAdditiveBasePoseType(AnimationSequence: AnimSequence,AdditiveBasePoseType?: EAdditiveBasePoseType): {AdditiveBasePoseType: EAdditiveBasePoseType};
	static GetAdditiveAnimationType(AnimationSequence: AnimSequence,AdditiveAnimationType?: EAdditiveAnimationType): {AdditiveAnimationType: EAdditiveAnimationType};
	static FindBonePathToRoot(AnimationSequence: AnimSequence,BoneName: string,BonePath?: string[]): {BonePath: string[]};
	static FinalizeBoneAnimation(AnimationSequence: AnimSequence): void;
	static DoesCurveExist(AnimationSequence: AnimSequence,CurveName: string,CurveType: ERawCurveTrackTypes): boolean;
	static DoesBoneNameExist(AnimationSequence: AnimSequence,BoneName: string,bExists?: boolean): {bExists: boolean};
	static CopyAnimNotifiesFromSequence(SrcAnimSequence: AnimSequence,DestAnimSequence: AnimSequence): void;
	static ContainsMetaDataOfClass(AnimationSequence: AnimSequence,MetaDataClass: UnrealEngineClass): boolean;
	static AddVirtualBone(AnimationSequence: AnimSequence,SourceBoneName: string,TargetBoneName: string,VirtualBoneName?: string): {VirtualBoneName: string};
	static AddVectorCurveKeys(AnimationSequence: AnimSequence,CurveName: string,Times: number[],Vectors: Vector[]): void;
	static AddVectorCurveKey(AnimationSequence: AnimSequence,CurveName: string,Time: number,Vector: Vector): void;
	static AddTransformationCurveKeys(AnimationSequence: AnimSequence,CurveName: string,Times: number[],Transforms: Transform[]): void;
	static AddTransformationCurveKey(AnimationSequence: AnimSequence,CurveName: string,Time: number,Transform: Transform): void;
	static AddMetaDataObject(AnimationSequence: AnimSequence,MetaDataObject: AnimMetaData): void;
	static AddMetaData(AnimationSequence: AnimSequence,MetaDataClass: UnrealEngineClass,MetaDataInstance: AnimMetaData): void;
	static AddFloatCurveKeys(AnimationSequence: AnimSequence,CurveName: string,Times: number[],Values: number[]): void;
	static AddFloatCurveKey(AnimationSequence: AnimSequence,CurveName: string,Time: number,Value: number): void;
	static AddCurve(AnimationSequence: AnimSequence,CurveName: string,CurveType: ERawCurveTrackTypes,bMetaDataCurve: boolean): void;
	static AddAnimationSyncMarker(AnimationSequence: AnimSequence,MarkerName: string,Time: number,NotifyTrackName: string): void;
	static AddAnimationNotifyTrack(AnimationSequence: AnimSequence,NotifyTrackName: string,TrackColor: LinearColor): void;
	static AddAnimationNotifyStateEventObject(AnimationSequence: AnimSequence,StartTime: number,Duration: number,NotifyState: AnimNotifyState,NotifyTrackName: string): void;
	static AddAnimationNotifyStateEvent(AnimationSequence: AnimSequence,NotifyTrackName: string,StartTime: number,Duration: number,NotifyStateClass: UnrealEngineClass): AnimNotifyState;
	static AddAnimationNotifyEventObject(AnimationSequence: AnimSequence,StartTime: number,Notify: AnimNotify,NotifyTrackName: string): void;
	static AddAnimationNotifyEvent(AnimationSequence: AnimSequence,NotifyTrackName: string,StartTime: number,NotifyClass: UnrealEngineClass): AnimNotify;
	static C(Other: UObject | any): AnimationBlueprintLibrary;
}

declare class AnimationModifier extends UObject { 
	RevisionGuid: Guid;
	AppliedGuid: Guid;
	StoredNativeRevision: number;
	PreviouslyAppliedModifier: AnimationModifier;
	static Load(ResourceName: string): AnimationModifier;
	static Find(Outer: UObject, ResourceName: string): AnimationModifier;
	static GetDefaultObject(): AnimationModifier;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationModifier;
	OnRevert(AnimationSequence: AnimSequence): void;
	OnApply(AnimationSequence: AnimSequence): void;
	static C(Other: UObject | any): AnimationModifier;
}

declare class AnimationModifiersAssetUserData extends AssetUserData { 
	AnimationModifierInstances: AnimationModifier[];
	static Load(ResourceName: string): AnimationModifiersAssetUserData;
	static Find(Outer: UObject, ResourceName: string): AnimationModifiersAssetUserData;
	static GetDefaultObject(): AnimationModifiersAssetUserData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationModifiersAssetUserData;
	static C(Other: UObject | any): AnimationModifiersAssetUserData;
}

declare class GameplayDebuggerNetPack { 
	clone() : GameplayDebuggerNetPack;
	static C(Other: UObject | any): GameplayDebuggerNetPack;
}

declare class GameplayDebuggerDebugActor { 
	Actor: Actor;
	ActorName: string;
	SyncCounter: number;
	clone() : GameplayDebuggerDebugActor;
	static C(Other: UObject | any): GameplayDebuggerDebugActor;
}

declare class GameplayDebuggerVisLogSync { 
	DeviceIDs: string;
	clone() : GameplayDebuggerVisLogSync;
	static C(Other: UObject | any): GameplayDebuggerVisLogSync;
}

declare class GameplayDebuggerRenderingComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): GameplayDebuggerRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): GameplayDebuggerRenderingComponent;
	static GetDefaultObject(): GameplayDebuggerRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerRenderingComponent;
	static C(Other: UObject | any): GameplayDebuggerRenderingComponent;
}

declare class GameplayDebuggerCategoryReplicator extends Actor { 
	OwnerPC: PlayerController;
	bIsEnabled: boolean;
	ReplicatedData: GameplayDebuggerNetPack;
	DebugActor: GameplayDebuggerDebugActor;
	VisLogSync: GameplayDebuggerVisLogSync;
	RenderingComp: GameplayDebuggerRenderingComponent;
	static GetDefaultObject(): GameplayDebuggerCategoryReplicator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerCategoryReplicator;
	ServerSetEnabled(bEnable: boolean): void;
	ServerSetDebugActor(Actor: Actor,bSelectInEditor: boolean): void;
	ServerSetCategoryEnabled(CategoryId: number,bEnable: boolean): void;
	ServerSendExtensionInputEvent(ExtensionId: number,HandlerId: number): void;
	ServerSendCategoryInputEvent(CategoryId: number,HandlerId: number): void;
	static C(Other: UObject | any): GameplayDebuggerCategoryReplicator;
}

declare type EGameplayDebuggerOverrideMode = 'Enable' | 'Disable' | 'UseDefault' | 'EGameplayDebuggerOverrideMode_MAX';
declare var EGameplayDebuggerOverrideMode : { Enable:'Enable',Disable:'Disable',UseDefault:'UseDefault',EGameplayDebuggerOverrideMode_MAX:'EGameplayDebuggerOverrideMode_MAX', };
declare class GameplayDebuggerInputConfig { 
	ConfigName: string;
	Key: Key;
	bModShift: boolean;
	bModCtrl: boolean;
	bModAlt: boolean;
	bModCmd: boolean;
	clone() : GameplayDebuggerInputConfig;
	static C(Other: UObject | any): GameplayDebuggerInputConfig;
}

declare class GameplayDebuggerCategoryConfig { 
	CategoryName: string;
	SlotIdx: number;
	ActiveInGame: EGameplayDebuggerOverrideMode;
	ActiveInSimulate: EGameplayDebuggerOverrideMode;
	Hidden: EGameplayDebuggerOverrideMode;
	bOverrideSlotIdx: boolean;
	InputHandlers: GameplayDebuggerInputConfig[];
	clone() : GameplayDebuggerCategoryConfig;
	static C(Other: UObject | any): GameplayDebuggerCategoryConfig;
}

declare class GameplayDebuggerExtensionConfig { 
	ExtensionName: string;
	UseExtension: EGameplayDebuggerOverrideMode;
	InputHandlers: GameplayDebuggerInputConfig[];
	clone() : GameplayDebuggerExtensionConfig;
	static C(Other: UObject | any): GameplayDebuggerExtensionConfig;
}

declare class GameplayDebuggerConfig extends UObject { 
	ActivationKey: Key;
	CategoryRowNextKey: Key;
	CategoryRowPrevKey: Key;
	CategorySlot0: Key;
	CategorySlot1: Key;
	CategorySlot2: Key;
	CategorySlot3: Key;
	CategorySlot4: Key;
	CategorySlot5: Key;
	CategorySlot6: Key;
	CategorySlot7: Key;
	CategorySlot8: Key;
	CategorySlot9: Key;
	DebugCanvasPaddingLeft: number;
	DebugCanvasPaddingRight: number;
	DebugCanvasPaddingTop: number;
	DebugCanvasPaddingBottom: number;
	bDebugCanvasEnableTextShadow: boolean;
	Categories: GameplayDebuggerCategoryConfig[];
	Extensions: GameplayDebuggerExtensionConfig[];
	static Load(ResourceName: string): GameplayDebuggerConfig;
	static Find(Outer: UObject, ResourceName: string): GameplayDebuggerConfig;
	static GetDefaultObject(): GameplayDebuggerConfig;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerConfig;
	static C(Other: UObject | any): GameplayDebuggerConfig;
}

declare class GameplayDebuggerPlayerData { 
	Controller: GameplayDebuggerLocalController;
	InputComponent: InputComponent;
	Replicator: GameplayDebuggerCategoryReplicator;
	clone() : GameplayDebuggerPlayerData;
	static C(Other: UObject | any): GameplayDebuggerPlayerData;
}

declare class GameplayDebuggerPlayerManager extends Actor { 
	PlayerData: GameplayDebuggerPlayerData[];
	PendingRegistrations: GameplayDebuggerCategoryReplicator[];
	static GetDefaultObject(): GameplayDebuggerPlayerManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerPlayerManager;
	static C(Other: UObject | any): GameplayDebuggerPlayerManager;
}

declare class GameplayDebuggerLocalController extends UObject { 
	CachedReplicator: GameplayDebuggerCategoryReplicator;
	CachedPlayerManager: GameplayDebuggerPlayerManager;
	DebugActorCandidate: Actor;
	static Load(ResourceName: string): GameplayDebuggerLocalController;
	static Find(Outer: UObject, ResourceName: string): GameplayDebuggerLocalController;
	static GetDefaultObject(): GameplayDebuggerLocalController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerLocalController;
	static C(Other: UObject | any): GameplayDebuggerLocalController;
}

declare class GameplayTask_ClaimResource extends GameplayTask { 
	static Load(ResourceName: string): GameplayTask_ClaimResource;
	static Find(Outer: UObject, ResourceName: string): GameplayTask_ClaimResource;
	static GetDefaultObject(): GameplayTask_ClaimResource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_ClaimResource;
	static C(Other: UObject | any): GameplayTask_ClaimResource;
}

declare class GameplayTask_SpawnActor extends GameplayTask { 
	Success: UnrealEngineMulticastDelegate<(SpawnedActor: Actor) => void>;
	DidNotSpawn: UnrealEngineMulticastDelegate<(SpawnedActor: Actor) => void>;
	ClassToSpawn: UnrealEngineClass;
	static Load(ResourceName: string): GameplayTask_SpawnActor;
	static Find(Outer: UObject, ResourceName: string): GameplayTask_SpawnActor;
	static GetDefaultObject(): GameplayTask_SpawnActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_SpawnActor;
	FinishSpawningActor(WorldContextObject: UObject,SpawnedActor: Actor): void;
	BeginSpawningActor(WorldContextObject: UObject,SpawnedActor?: Actor): {SpawnedActor: Actor, $: boolean};
	static C(Other: UObject | any): GameplayTask_SpawnActor;
}

declare class GameplayTask_TimeLimitedExecution extends GameplayTask { 
	OnFinished: UnrealEngineMulticastDelegate<() => void>;
	OnTimeExpired: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): GameplayTask_TimeLimitedExecution;
	static Find(Outer: UObject, ResourceName: string): GameplayTask_TimeLimitedExecution;
	static GetDefaultObject(): GameplayTask_TimeLimitedExecution;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_TimeLimitedExecution;
	static C(Other: UObject | any): GameplayTask_TimeLimitedExecution;
}

declare class GameplayTask_WaitDelay extends GameplayTask { 
	OnFinish: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): GameplayTask_WaitDelay;
	static Find(Outer: UObject, ResourceName: string): GameplayTask_WaitDelay;
	static GetDefaultObject(): GameplayTask_WaitDelay;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_WaitDelay;
	static C(Other: UObject | any): GameplayTask_WaitDelay;
}

declare class GameplayTaskOwnerInterface extends Interface { 
	static Load(ResourceName: string): GameplayTaskOwnerInterface;
	static Find(Outer: UObject, ResourceName: string): GameplayTaskOwnerInterface;
	static GetDefaultObject(): GameplayTaskOwnerInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTaskOwnerInterface;
	static C(Other: UObject | any): GameplayTaskOwnerInterface;
}

declare class AIBlueprintHelperLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AIBlueprintHelperLibrary;
	static Find(Outer: UObject, ResourceName: string): AIBlueprintHelperLibrary;
	static GetDefaultObject(): AIBlueprintHelperLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIBlueprintHelperLibrary;
	static UnlockAIResourcesWithAnimation(AnimInstance: AnimInstance,bUnlockMovement: boolean,UnlockAILogic: boolean): void;
	static SpawnAIFromClass(WorldContextObject: UObject,PawnClass: UnrealEngineClass,BehaviorTree: BehaviorTree,Location: Vector,Rotation: Rotator,bNoCollisionFail: boolean,Owner: Actor): Pawn;
	static SimpleMoveToLocation(Controller: Controller,Goal: Vector): void;
	static SimpleMoveToActor(Controller: Controller,Goal: Actor): void;
	static SendAIMessage(Target: Pawn,Message: string,MessageSource: UObject,bSuccess: boolean): void;
	static LockAIResourcesWithAnimation(AnimInstance: AnimInstance,bLockMovement: boolean,LockAILogic: boolean): void;
	static IsValidAIRotation(Rotation: Rotator): boolean;
	static IsValidAILocation(Location: Vector): boolean;
	static IsValidAIDirection(DirectionVector: Vector): boolean;
	static GetNextNavLinkIndex(Controller: Controller): number;
	static GetCurrentPathPoints(Controller: Controller): Vector[];
	static GetCurrentPathIndex(Controller: Controller): number;
	static GetCurrentPath(Controller: Controller): NavigationPath;
	static GetBlackboard(Target: Actor): BlackboardComponent;
	static GetAIController(ControlledActor: Actor): AIController;
	static CreateMoveToProxyObject(WorldContextObject: UObject,Pawn: Pawn,Destination: Vector,TargetActor: Actor,AcceptanceRadius: number,bStopOnOverlap: boolean): AIAsyncTaskBlueprintProxy;
	static C(Other: UObject | any): AIBlueprintHelperLibrary;
}

declare class AIDataProvider_QueryParams extends AIDataProvider { 
	ParamName: string;
	FloatValue: number;
	IntValue: number;
	BoolValue: boolean;
	static Load(ResourceName: string): AIDataProvider_QueryParams;
	static Find(Outer: UObject, ResourceName: string): AIDataProvider_QueryParams;
	static GetDefaultObject(): AIDataProvider_QueryParams;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIDataProvider_QueryParams;
	static C(Other: UObject | any): AIDataProvider_QueryParams;
}

declare class AIDataProvider_Random extends AIDataProvider_QueryParams { 
	Min: number;
	Max: number;
	bInteger: boolean;
	static Load(ResourceName: string): AIDataProvider_Random;
	static Find(Outer: UObject, ResourceName: string): AIDataProvider_Random;
	static GetDefaultObject(): AIDataProvider_Random;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIDataProvider_Random;
	static C(Other: UObject | any): AIDataProvider_Random;
}

declare class AIPerceptionListenerInterface extends Interface { 
	static Load(ResourceName: string): AIPerceptionListenerInterface;
	static Find(Outer: UObject, ResourceName: string): AIPerceptionListenerInterface;
	static GetDefaultObject(): AIPerceptionListenerInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIPerceptionListenerInterface;
	static C(Other: UObject | any): AIPerceptionListenerInterface;
}

declare class AIPerceptionStimuliSourceComponent extends ActorComponent { 
	bAutoRegisterAsSource: boolean;
	RegisterAsSourceForSenses: UnrealEngineClass[];
	static Load(ResourceName: string): AIPerceptionStimuliSourceComponent;
	static Find(Outer: UObject, ResourceName: string): AIPerceptionStimuliSourceComponent;
	static GetDefaultObject(): AIPerceptionStimuliSourceComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIPerceptionStimuliSourceComponent;
	UnregisterFromSense(SenseClass: UnrealEngineClass): void;
	UnregisterFromPerceptionSystem(): void;
	RegisterWithPerceptionSystem(): void;
	RegisterForSense(SenseClass: UnrealEngineClass): void;
	static C(Other: UObject | any): AIPerceptionStimuliSourceComponent;
}

declare class AIResourceInterface extends Interface { 
	static Load(ResourceName: string): AIResourceInterface;
	static Find(Outer: UObject, ResourceName: string): AIResourceInterface;
	static GetDefaultObject(): AIResourceInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIResourceInterface;
	static C(Other: UObject | any): AIResourceInterface;
}

declare class AIResource_Movement extends GameplayTaskResource { 
	static Load(ResourceName: string): AIResource_Movement;
	static Find(Outer: UObject, ResourceName: string): AIResource_Movement;
	static GetDefaultObject(): AIResource_Movement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIResource_Movement;
	static C(Other: UObject | any): AIResource_Movement;
}

declare class AIResource_Logic extends GameplayTaskResource { 
	static Load(ResourceName: string): AIResource_Logic;
	static Find(Outer: UObject, ResourceName: string): AIResource_Logic;
	static GetDefaultObject(): AIResource_Logic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIResource_Logic;
	static C(Other: UObject | any): AIResource_Logic;
}

declare class AISense_Blueprint extends AISense { 
	ListenerDataType: UnrealEngineClass;
	ListenerContainer: AIPerceptionComponent[];
	UnprocessedEvents: AISenseEvent[];
	static Load(ResourceName: string): AISense_Blueprint;
	static Find(Outer: UObject, ResourceName: string): AISense_Blueprint;
	static GetDefaultObject(): AISense_Blueprint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Blueprint;
	OnUpdate(EventsToProcess: AISenseEvent[]): number;
	OnListenerUpdated(ActorListener: Actor,PerceptionComponent: AIPerceptionComponent): void;
	OnListenerUnregistered(ActorListener: Actor,PerceptionComponent: AIPerceptionComponent): void;
	OnListenerRegistered(ActorListener: Actor,PerceptionComponent: AIPerceptionComponent): void;
	K2_OnNewPawn(NewPawn: Pawn): void;
	GetAllListenerComponents(ListenerComponents?: AIPerceptionComponent[]): {ListenerComponents: AIPerceptionComponent[]};
	GetAllListenerActors(ListenerActors?: Actor[]): {ListenerActors: Actor[]};
	static C(Other: UObject | any): AISense_Blueprint;
}

declare class AIDamageEvent { 
	Amount: number;
	Location: Vector;
	HitLocation: Vector;
	DamagedActor: Actor;
	Instigator: Actor;
	Tag: string;
	clone() : AIDamageEvent;
	static C(Other: UObject | any): AIDamageEvent;
}

declare class AISense_Damage extends AISense { 
	RegisteredEvents: AIDamageEvent[];
	static Load(ResourceName: string): AISense_Damage;
	static Find(Outer: UObject, ResourceName: string): AISense_Damage;
	static GetDefaultObject(): AISense_Damage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Damage;
	static ReportDamageEvent(WorldContextObject: UObject,DamagedActor: Actor,Instigator: Actor,DamageAmount: number,EventLocation: Vector,HitLocation: Vector,Tag: string): void;
	static C(Other: UObject | any): AISense_Damage;
}

declare class AINoiseEvent { 
	NoiseLocation: Vector;
	Loudness: number;
	MaxRange: number;
	Instigator: Actor;
	Tag: string;
	clone() : AINoiseEvent;
	static C(Other: UObject | any): AINoiseEvent;
}

declare class AISense_Hearing extends AISense { 
	NoiseEvents: AINoiseEvent[];
	SpeedOfSoundSq: number;
	static Load(ResourceName: string): AISense_Hearing;
	static Find(Outer: UObject, ResourceName: string): AISense_Hearing;
	static GetDefaultObject(): AISense_Hearing;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Hearing;
	static ReportNoiseEvent(WorldContextObject: UObject,NoiseLocation: Vector,Loudness: number,Instigator: Actor,MaxRange: number,Tag: string): void;
	static C(Other: UObject | any): AISense_Hearing;
}

declare class AIPredictionEvent { 
	Requestor: Actor;
	PredictedActor: Actor;
	clone() : AIPredictionEvent;
	static C(Other: UObject | any): AIPredictionEvent;
}

declare class AISense_Prediction extends AISense { 
	RegisteredEvents: AIPredictionEvent[];
	static Load(ResourceName: string): AISense_Prediction;
	static Find(Outer: UObject, ResourceName: string): AISense_Prediction;
	static GetDefaultObject(): AISense_Prediction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Prediction;
	static RequestPawnPredictionEvent(Requestor: Pawn,PredictedActor: Actor,PredictionTime: number): void;
	static RequestControllerPredictionEvent(Requestor: AIController,PredictedActor: Actor,PredictionTime: number): void;
	static C(Other: UObject | any): AISense_Prediction;
}

declare class AISense_Sight extends AISense { 
	MaxTracesPerTick: number;
	MinQueriesPerTimeSliceCheck: number;
	MaxTimeSlicePerTick: any;
	HighImportanceQueryDistanceThreshold: number;
	MaxQueryImportance: number;
	SightLimitQueryImportance: number;
	static Load(ResourceName: string): AISense_Sight;
	static Find(Outer: UObject, ResourceName: string): AISense_Sight;
	static GetDefaultObject(): AISense_Sight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Sight;
	static C(Other: UObject | any): AISense_Sight;
}

declare class AITeamStimulusEvent { 
	Broadcaster: Actor;
	Enemy: Actor;
	clone() : AITeamStimulusEvent;
	static C(Other: UObject | any): AITeamStimulusEvent;
}

declare class AISense_Team extends AISense { 
	RegisteredEvents: AITeamStimulusEvent[];
	static Load(ResourceName: string): AISense_Team;
	static Find(Outer: UObject, ResourceName: string): AISense_Team;
	static GetDefaultObject(): AISense_Team;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Team;
	static C(Other: UObject | any): AISense_Team;
}

declare class AITouchEvent { 
	TouchReceiver: Actor;
	OtherActor: Actor;
	clone() : AITouchEvent;
	static C(Other: UObject | any): AITouchEvent;
}

declare class AISense_Touch extends AISense { 
	RegisteredEvents: AITouchEvent[];
	static Load(ResourceName: string): AISense_Touch;
	static Find(Outer: UObject, ResourceName: string): AISense_Touch;
	static GetDefaultObject(): AISense_Touch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Touch;
	static C(Other: UObject | any): AISense_Touch;
}

declare class AISenseBlueprintListener extends UserDefinedStruct { 
	static Load(ResourceName: string): AISenseBlueprintListener;
	static Find(Outer: UObject, ResourceName: string): AISenseBlueprintListener;
	static GetDefaultObject(): AISenseBlueprintListener;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseBlueprintListener;
	static C(Other: UObject | any): AISenseBlueprintListener;
}

declare class AISenseConfig_Blueprint extends AISenseConfig { 
	Implementation: UnrealEngineClass;
	static Load(ResourceName: string): AISenseConfig_Blueprint;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Blueprint;
	static GetDefaultObject(): AISenseConfig_Blueprint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Blueprint;
	static C(Other: UObject | any): AISenseConfig_Blueprint;
}

declare class AISenseConfig_Damage extends AISenseConfig { 
	Implementation: UnrealEngineClass;
	static Load(ResourceName: string): AISenseConfig_Damage;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Damage;
	static GetDefaultObject(): AISenseConfig_Damage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Damage;
	static C(Other: UObject | any): AISenseConfig_Damage;
}

declare class AISenseAffiliationFilter { 
	bDetectEnemies: boolean;
	bDetectNeutrals: boolean;
	bDetectFriendlies: boolean;
	clone() : AISenseAffiliationFilter;
	static C(Other: UObject | any): AISenseAffiliationFilter;
}

declare class AISenseConfig_Hearing extends AISenseConfig { 
	Implementation: UnrealEngineClass;
	HearingRange: number;
	LoSHearingRange: number;
	bUseLoSHearing: boolean;
	DetectionByAffiliation: AISenseAffiliationFilter;
	static Load(ResourceName: string): AISenseConfig_Hearing;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Hearing;
	static GetDefaultObject(): AISenseConfig_Hearing;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Hearing;
	static C(Other: UObject | any): AISenseConfig_Hearing;
}

declare class AISenseConfig_Prediction extends AISenseConfig { 
	static Load(ResourceName: string): AISenseConfig_Prediction;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Prediction;
	static GetDefaultObject(): AISenseConfig_Prediction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Prediction;
	static C(Other: UObject | any): AISenseConfig_Prediction;
}

declare class AISenseConfig_Sight extends AISenseConfig { 
	Implementation: UnrealEngineClass;
	SightRadius: number;
	LoseSightRadius: number;
	PeripheralVisionAngleDegrees: number;
	DetectionByAffiliation: AISenseAffiliationFilter;
	AutoSuccessRangeFromLastSeenLocation: number;
	PointOfViewBackwardOffset: number;
	NearClippingRadius: number;
	static Load(ResourceName: string): AISenseConfig_Sight;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Sight;
	static GetDefaultObject(): AISenseConfig_Sight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Sight;
	static C(Other: UObject | any): AISenseConfig_Sight;
}

declare class AISenseConfig_Team extends AISenseConfig { 
	static Load(ResourceName: string): AISenseConfig_Team;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Team;
	static GetDefaultObject(): AISenseConfig_Team;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Team;
	static C(Other: UObject | any): AISenseConfig_Team;
}

declare class AISenseConfig_Touch extends AISenseConfig { 
	static Load(ResourceName: string): AISenseConfig_Touch;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Touch;
	static GetDefaultObject(): AISenseConfig_Touch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Touch;
	static C(Other: UObject | any): AISenseConfig_Touch;
}

declare class AISenseEvent_Damage extends AISenseEvent { 
	Event: AIDamageEvent;
	static Load(ResourceName: string): AISenseEvent_Damage;
	static Find(Outer: UObject, ResourceName: string): AISenseEvent_Damage;
	static GetDefaultObject(): AISenseEvent_Damage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseEvent_Damage;
	static C(Other: UObject | any): AISenseEvent_Damage;
}

declare class AISenseEvent_Hearing extends AISenseEvent { 
	Event: AINoiseEvent;
	static Load(ResourceName: string): AISenseEvent_Hearing;
	static Find(Outer: UObject, ResourceName: string): AISenseEvent_Hearing;
	static GetDefaultObject(): AISenseEvent_Hearing;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseEvent_Hearing;
	static C(Other: UObject | any): AISenseEvent_Hearing;
}

declare class AISightTargetInterface extends Interface { 
	static Load(ResourceName: string): AISightTargetInterface;
	static Find(Outer: UObject, ResourceName: string): AISightTargetInterface;
	static GetDefaultObject(): AISightTargetInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISightTargetInterface;
	static C(Other: UObject | any): AISightTargetInterface;
}

declare class AITask extends GameplayTask { 
	OwnerController: AIController;
	static Load(ResourceName: string): AITask;
	static Find(Outer: UObject, ResourceName: string): AITask;
	static GetDefaultObject(): AITask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask;
	static C(Other: UObject | any): AITask;
}

declare class AITask_LockLogic extends AITask { 
	static Load(ResourceName: string): AITask_LockLogic;
	static Find(Outer: UObject, ResourceName: string): AITask_LockLogic;
	static GetDefaultObject(): AITask_LockLogic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask_LockLogic;
	static C(Other: UObject | any): AITask_LockLogic;
}

declare class AIMoveRequest { 
	GoalActor: Actor;
	clone() : AIMoveRequest;
	static C(Other: UObject | any): AIMoveRequest;
}

declare type EAIOptionFlag = 'Default' | 'Enable' | 'Disable' | 'MAX';
declare var EAIOptionFlag : { Default:'Default',Enable:'Enable',Disable:'Disable',MAX:'MAX', };
declare class AITask_MoveTo extends AITask { 
	OnRequestFailed: UnrealEngineMulticastDelegate<() => void>;
	OnMoveFinished: UnrealEngineMulticastDelegate<(Result: EPathFollowingResult, AIController: AIController) => void>;
	MoveRequest: AIMoveRequest;
	static Load(ResourceName: string): AITask_MoveTo;
	static Find(Outer: UObject, ResourceName: string): AITask_MoveTo;
	static GetDefaultObject(): AITask_MoveTo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask_MoveTo;
	static AIMoveTo(Controller: AIController,GoalLocation: Vector,GoalActor: Actor,AcceptanceRadius: number,StopOnOverlap: EAIOptionFlag,AcceptPartialPath: EAIOptionFlag,bUsePathfinding: boolean,bLockAILogic: boolean,bUseContinuosGoalTracking: boolean,ProjectGoalOnNavigation: EAIOptionFlag): AITask_MoveTo;
	static C(Other: UObject | any): AITask_MoveTo;
}

declare class AITask_RunEQS extends AITask { 
	static Load(ResourceName: string): AITask_RunEQS;
	static Find(Outer: UObject, ResourceName: string): AITask_RunEQS;
	static GetDefaultObject(): AITask_RunEQS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask_RunEQS;
	static RunEQS(Controller: AIController,QueryTemplate: EnvQuery): AITask_RunEQS;
	static C(Other: UObject | any): AITask_RunEQS;
}

declare class BehaviorTreeTypes extends UObject { 
	static Load(ResourceName: string): BehaviorTreeTypes;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeTypes;
	static GetDefaultObject(): BehaviorTreeTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeTypes;
	static C(Other: UObject | any): BehaviorTreeTypes;
}

declare class BlackboardAssetProvider extends Interface { 
	static Load(ResourceName: string): BlackboardAssetProvider;
	static Find(Outer: UObject, ResourceName: string): BlackboardAssetProvider;
	static GetDefaultObject(): BlackboardAssetProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardAssetProvider;
	GetBlackboardAsset(): BlackboardData;
	static C(Other: UObject | any): BlackboardAssetProvider;
}

declare class BlackboardKeyType_Bool extends BlackboardKeyType { 
	static Load(ResourceName: string): BlackboardKeyType_Bool;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Bool;
	static GetDefaultObject(): BlackboardKeyType_Bool;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Bool;
	static C(Other: UObject | any): BlackboardKeyType_Bool;
}

declare class BlackboardKeyType_Class extends BlackboardKeyType { 
	BaseClass: UnrealEngineClass;
	static Load(ResourceName: string): BlackboardKeyType_Class;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Class;
	static GetDefaultObject(): BlackboardKeyType_Class;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Class;
	static C(Other: UObject | any): BlackboardKeyType_Class;
}

declare class BlackboardKeyType_Enum extends BlackboardKeyType { 
	EnumType: Enum;
	EnumName: string;
	bIsEnumNameValid: boolean;
	static Load(ResourceName: string): BlackboardKeyType_Enum;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Enum;
	static GetDefaultObject(): BlackboardKeyType_Enum;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Enum;
	static C(Other: UObject | any): BlackboardKeyType_Enum;
}

declare class BlackboardKeyType_Float extends BlackboardKeyType { 
	static Load(ResourceName: string): BlackboardKeyType_Float;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Float;
	static GetDefaultObject(): BlackboardKeyType_Float;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Float;
	static C(Other: UObject | any): BlackboardKeyType_Float;
}

declare class BlackboardKeyType_Int extends BlackboardKeyType { 
	static Load(ResourceName: string): BlackboardKeyType_Int;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Int;
	static GetDefaultObject(): BlackboardKeyType_Int;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Int;
	static C(Other: UObject | any): BlackboardKeyType_Int;
}

declare class BlackboardKeyType_Name extends BlackboardKeyType { 
	static Load(ResourceName: string): BlackboardKeyType_Name;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Name;
	static GetDefaultObject(): BlackboardKeyType_Name;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Name;
	static C(Other: UObject | any): BlackboardKeyType_Name;
}

declare class BlackboardKeyType_NativeEnum extends BlackboardKeyType { 
	EnumName: string;
	EnumType: Enum;
	static Load(ResourceName: string): BlackboardKeyType_NativeEnum;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_NativeEnum;
	static GetDefaultObject(): BlackboardKeyType_NativeEnum;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_NativeEnum;
	static C(Other: UObject | any): BlackboardKeyType_NativeEnum;
}

declare class BlackboardKeyType_Object extends BlackboardKeyType { 
	BaseClass: UnrealEngineClass;
	static Load(ResourceName: string): BlackboardKeyType_Object;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Object;
	static GetDefaultObject(): BlackboardKeyType_Object;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Object;
	static C(Other: UObject | any): BlackboardKeyType_Object;
}

declare class BlackboardKeyType_Rotator extends BlackboardKeyType { 
	static Load(ResourceName: string): BlackboardKeyType_Rotator;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Rotator;
	static GetDefaultObject(): BlackboardKeyType_Rotator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Rotator;
	static C(Other: UObject | any): BlackboardKeyType_Rotator;
}

declare class BlackboardKeyType_String extends BlackboardKeyType { 
	StringValue: string;
	static Load(ResourceName: string): BlackboardKeyType_String;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_String;
	static GetDefaultObject(): BlackboardKeyType_String;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_String;
	static C(Other: UObject | any): BlackboardKeyType_String;
}

declare class BlackboardKeyType_Vector extends BlackboardKeyType { 
	static Load(ResourceName: string): BlackboardKeyType_Vector;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Vector;
	static GetDefaultObject(): BlackboardKeyType_Vector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Vector;
	static C(Other: UObject | any): BlackboardKeyType_Vector;
}

declare class BTComposite_Selector extends BTCompositeNode { 
	static Load(ResourceName: string): BTComposite_Selector;
	static Find(Outer: UObject, ResourceName: string): BTComposite_Selector;
	static GetDefaultObject(): BTComposite_Selector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_Selector;
	static C(Other: UObject | any): BTComposite_Selector;
}

declare class BTComposite_Sequence extends BTCompositeNode { 
	static Load(ResourceName: string): BTComposite_Sequence;
	static Find(Outer: UObject, ResourceName: string): BTComposite_Sequence;
	static GetDefaultObject(): BTComposite_Sequence;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_Sequence;
	static C(Other: UObject | any): BTComposite_Sequence;
}

declare type EBTParallelMode = 'AbortBackground' | 'WaitForBackground' | 'EBTParallelMode_MAX';
declare var EBTParallelMode : { AbortBackground:'AbortBackground',WaitForBackground:'WaitForBackground',EBTParallelMode_MAX:'EBTParallelMode_MAX', };
declare class BTComposite_SimpleParallel extends BTCompositeNode { 
	FinishMode: EBTParallelMode;
	static Load(ResourceName: string): BTComposite_SimpleParallel;
	static Find(Outer: UObject, ResourceName: string): BTComposite_SimpleParallel;
	static GetDefaultObject(): BTComposite_SimpleParallel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_SimpleParallel;
	static C(Other: UObject | any): BTComposite_SimpleParallel;
}

declare class BTDecorator_BlackboardBase extends BTDecorator { 
	BlackboardKey: BlackboardKeySelector;
	static Load(ResourceName: string): BTDecorator_BlackboardBase;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_BlackboardBase;
	static GetDefaultObject(): BTDecorator_BlackboardBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_BlackboardBase;
	static C(Other: UObject | any): BTDecorator_BlackboardBase;
}

declare type EBTBlackboardRestart = 'ValueChange' | 'ResultChange' | 'EBTBlackboardRestart_MAX';
declare var EBTBlackboardRestart : { ValueChange:'ValueChange',ResultChange:'ResultChange',EBTBlackboardRestart_MAX:'EBTBlackboardRestart_MAX', };
declare type EBasicKeyOperation = 'Set' | 'NotSet' | 'EBasicKeyOperation_MAX';
declare var EBasicKeyOperation : { Set:'Set',NotSet:'NotSet',EBasicKeyOperation_MAX:'EBasicKeyOperation_MAX', };
declare type EArithmeticKeyOperation = 'Equal' | 'NotEqual' | 'Less' | 'LessOrEqual' | 'Greater' | 'GreaterOrEqual' | 'EArithmeticKeyOperation_MAX';
declare var EArithmeticKeyOperation : { Equal:'Equal',NotEqual:'NotEqual',Less:'Less',LessOrEqual:'LessOrEqual',Greater:'Greater',GreaterOrEqual:'GreaterOrEqual',EArithmeticKeyOperation_MAX:'EArithmeticKeyOperation_MAX', };
declare type ETextKeyOperation = 'Equal' | 'NotEqual' | 'Contain' | 'NotContain' | 'ETextKeyOperation_MAX';
declare var ETextKeyOperation : { Equal:'Equal',NotEqual:'NotEqual',Contain:'Contain',NotContain:'NotContain',ETextKeyOperation_MAX:'ETextKeyOperation_MAX', };
declare class BTDecorator_Blackboard extends BTDecorator_BlackboardBase { 
	IntValue: number;
	FloatValue: number;
	StringValue: string;
	CachedDescription: string;
	OperationType: number;
	NotifyObserver: EBTBlackboardRestart;
	BasicOperation: EBasicKeyOperation;
	ArithmeticOperation: EArithmeticKeyOperation;
	TextOperation: ETextKeyOperation;
	static Load(ResourceName: string): BTDecorator_Blackboard;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_Blackboard;
	static GetDefaultObject(): BTDecorator_Blackboard;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Blackboard;
	static C(Other: UObject | any): BTDecorator_Blackboard;
}

declare type EBTNodeResult = 'Succeeded' | 'Failed' | 'Aborted' | 'InProgress' | 'EBTNodeResult_MAX';
declare var EBTNodeResult : { Succeeded:'Succeeded',Failed:'Failed',Aborted:'Aborted',InProgress:'InProgress',EBTNodeResult_MAX:'EBTNodeResult_MAX', };
declare class BTDecorator_BlueprintBase extends BTDecorator { 
	AIOwner: AIController;
	ActorOwner: Actor;
	ObservedKeyNames: string[];
	CustomDescription: string;
	bShowPropertyDetails: boolean;
	bCheckConditionOnlyBlackBoardChanges: boolean;
	bIsObservingBB: boolean;
	static Load(ResourceName: string): BTDecorator_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_BlueprintBase;
	static GetDefaultObject(): BTDecorator_BlueprintBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_BlueprintBase;
	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
	ReceiveObserverDeactivatedAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveObserverDeactivated(OwnerActor: Actor): void;
	ReceiveObserverActivatedAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveObserverActivated(OwnerActor: Actor): void;
	ReceiveExecutionStartAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveExecutionStart(OwnerActor: Actor): void;
	ReceiveExecutionFinishAI(OwnerController: AIController,ControlledPawn: Pawn,NodeResult: EBTNodeResult): void;
	ReceiveExecutionFinish(OwnerActor: Actor,NodeResult: EBTNodeResult): void;
	PerformConditionCheckAI(OwnerController: AIController,ControlledPawn: Pawn): boolean;
	PerformConditionCheck(OwnerActor: Actor): boolean;
	IsDecoratorObserverActive(): boolean;
	IsDecoratorExecutionActive(): boolean;
	static C(Other: UObject | any): BTDecorator_BlueprintBase;
}

declare type EGameplayContainerMatchType = 'Any' | 'All' | 'EGameplayContainerMatchType_MAX';
declare var EGameplayContainerMatchType : { Any:'Any',All:'All',EGameplayContainerMatchType_MAX:'EGameplayContainerMatchType_MAX', };
declare class BTDecorator_CheckGameplayTagsOnActor extends BTDecorator { 
	ActorToCheck: BlackboardKeySelector;
	TagsToMatch: EGameplayContainerMatchType;
	GameplayTags: GameplayTagContainer;
	CachedDescription: string;
	static Load(ResourceName: string): BTDecorator_CheckGameplayTagsOnActor;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_CheckGameplayTagsOnActor;
	static GetDefaultObject(): BTDecorator_CheckGameplayTagsOnActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_CheckGameplayTagsOnActor;
	static C(Other: UObject | any): BTDecorator_CheckGameplayTagsOnActor;
}

declare type EBlackBoardEntryComparison = 'Equal' | 'NotEqual' | 'EBlackBoardEntryComparison_MAX';
declare var EBlackBoardEntryComparison : { Equal:'Equal',NotEqual:'NotEqual',EBlackBoardEntryComparison_MAX:'EBlackBoardEntryComparison_MAX', };
declare class BTDecorator_CompareBBEntries extends BTDecorator { 
	Operator: EBlackBoardEntryComparison;
	BlackboardKeyA: BlackboardKeySelector;
	BlackboardKeyB: BlackboardKeySelector;
	static Load(ResourceName: string): BTDecorator_CompareBBEntries;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_CompareBBEntries;
	static GetDefaultObject(): BTDecorator_CompareBBEntries;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_CompareBBEntries;
	static C(Other: UObject | any): BTDecorator_CompareBBEntries;
}

declare class BTDecorator_ConditionalLoop extends BTDecorator_Blackboard { 
	static Load(ResourceName: string): BTDecorator_ConditionalLoop;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_ConditionalLoop;
	static GetDefaultObject(): BTDecorator_ConditionalLoop;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ConditionalLoop;
	static C(Other: UObject | any): BTDecorator_ConditionalLoop;
}

declare class BTDecorator_ConeCheck extends BTDecorator { 
	ConeHalfAngle: number;
	ConeOrigin: BlackboardKeySelector;
	ConeDirection: BlackboardKeySelector;
	Observed: BlackboardKeySelector;
	static Load(ResourceName: string): BTDecorator_ConeCheck;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_ConeCheck;
	static GetDefaultObject(): BTDecorator_ConeCheck;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ConeCheck;
	static C(Other: UObject | any): BTDecorator_ConeCheck;
}

declare class BTDecorator_Cooldown extends BTDecorator { 
	CoolDownTime: number;
	static Load(ResourceName: string): BTDecorator_Cooldown;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_Cooldown;
	static GetDefaultObject(): BTDecorator_Cooldown;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Cooldown;
	static C(Other: UObject | any): BTDecorator_Cooldown;
}

declare type EPathExistanceQueryType = 'NavmeshRaycast2D' | 'HierarchicalQuery' | 'RegularPathFinding' | 'EPathExistanceQueryType_MAX';
declare var EPathExistanceQueryType : { NavmeshRaycast2D:'NavmeshRaycast2D',HierarchicalQuery:'HierarchicalQuery',RegularPathFinding:'RegularPathFinding',EPathExistanceQueryType_MAX:'EPathExistanceQueryType_MAX', };
declare class BTDecorator_DoesPathExist extends BTDecorator { 
	BlackboardKeyA: BlackboardKeySelector;
	BlackboardKeyB: BlackboardKeySelector;
	bUseSelf: boolean;
	PathQueryType: EPathExistanceQueryType;
	FilterClass: UnrealEngineClass;
	static Load(ResourceName: string): BTDecorator_DoesPathExist;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_DoesPathExist;
	static GetDefaultObject(): BTDecorator_DoesPathExist;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_DoesPathExist;
	static C(Other: UObject | any): BTDecorator_DoesPathExist;
}

declare class BTDecorator_ForceSuccess extends BTDecorator { 
	static Load(ResourceName: string): BTDecorator_ForceSuccess;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_ForceSuccess;
	static GetDefaultObject(): BTDecorator_ForceSuccess;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ForceSuccess;
	static C(Other: UObject | any): BTDecorator_ForceSuccess;
}

declare type FAIDistanceType = 'Distance3D' | 'Distance2D' | 'DistanceZ' | 'MAX';
declare var FAIDistanceType : { Distance3D:'Distance3D',Distance2D:'Distance2D',DistanceZ:'DistanceZ',MAX:'MAX', };
declare class BTDecorator_IsAtLocation extends BTDecorator_BlackboardBase { 
	AcceptableRadius: number;
	ParametrizedAcceptableRadius: AIDataProviderFloatValue;
	GeometricDistanceType: FAIDistanceType;
	bUseParametrizedRadius: boolean;
	bUseNavAgentGoalLocation: boolean;
	bPathFindingBasedTest: boolean;
	static Load(ResourceName: string): BTDecorator_IsAtLocation;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_IsAtLocation;
	static GetDefaultObject(): BTDecorator_IsAtLocation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_IsAtLocation;
	static C(Other: UObject | any): BTDecorator_IsAtLocation;
}

declare class BTDecorator_IsBBEntryOfClass extends BTDecorator_BlackboardBase { 
	TestClass: UnrealEngineClass;
	static Load(ResourceName: string): BTDecorator_IsBBEntryOfClass;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_IsBBEntryOfClass;
	static GetDefaultObject(): BTDecorator_IsBBEntryOfClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_IsBBEntryOfClass;
	static C(Other: UObject | any): BTDecorator_IsBBEntryOfClass;
}

declare class BTDecorator_KeepInCone extends BTDecorator { 
	ConeHalfAngle: number;
	ConeOrigin: BlackboardKeySelector;
	Observed: BlackboardKeySelector;
	bUseSelfAsOrigin: boolean;
	bUseSelfAsObserved: boolean;
	static Load(ResourceName: string): BTDecorator_KeepInCone;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_KeepInCone;
	static GetDefaultObject(): BTDecorator_KeepInCone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_KeepInCone;
	static C(Other: UObject | any): BTDecorator_KeepInCone;
}

declare class BTDecorator_Loop extends BTDecorator { 
	NumLoops: number;
	bInfiniteLoop: boolean;
	InfiniteLoopTimeoutTime: number;
	static Load(ResourceName: string): BTDecorator_Loop;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_Loop;
	static GetDefaultObject(): BTDecorator_Loop;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Loop;
	static C(Other: UObject | any): BTDecorator_Loop;
}

declare class BTDecorator_ReachedMoveGoal extends BTDecorator { 
	static Load(ResourceName: string): BTDecorator_ReachedMoveGoal;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_ReachedMoveGoal;
	static GetDefaultObject(): BTDecorator_ReachedMoveGoal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ReachedMoveGoal;
	static C(Other: UObject | any): BTDecorator_ReachedMoveGoal;
}

declare class BTDecorator_SetTagCooldown extends BTDecorator { 
	CooldownTag: GameplayTag;
	CooldownDuration: number;
	bAddToExistingDuration: boolean;
	static Load(ResourceName: string): BTDecorator_SetTagCooldown;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_SetTagCooldown;
	static GetDefaultObject(): BTDecorator_SetTagCooldown;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_SetTagCooldown;
	static C(Other: UObject | any): BTDecorator_SetTagCooldown;
}

declare class BTDecorator_TagCooldown extends BTDecorator { 
	CooldownTag: GameplayTag;
	CooldownDuration: number;
	bAddToExistingDuration: boolean;
	bActivatesCooldown: boolean;
	static Load(ResourceName: string): BTDecorator_TagCooldown;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_TagCooldown;
	static GetDefaultObject(): BTDecorator_TagCooldown;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_TagCooldown;
	static C(Other: UObject | any): BTDecorator_TagCooldown;
}

declare class BTDecorator_TimeLimit extends BTDecorator { 
	TimeLimit: number;
	static Load(ResourceName: string): BTDecorator_TimeLimit;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_TimeLimit;
	static GetDefaultObject(): BTDecorator_TimeLimit;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_TimeLimit;
	static C(Other: UObject | any): BTDecorator_TimeLimit;
}

declare class BTFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BTFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): BTFunctionLibrary;
	static GetDefaultObject(): BTFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTFunctionLibrary;
	static StopUsingExternalEvent(NodeOwner: BTNode): void;
	static StartUsingExternalEvent(NodeOwner: BTNode,OwningActor: Actor): void;
	static SetBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: Vector): void;
	static SetBlackboardValueAsString(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: string): void;
	static SetBlackboardValueAsRotator(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: Rotator): void;
	static SetBlackboardValueAsObject(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: UObject): void;
	static SetBlackboardValueAsName(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: string): void;
	static SetBlackboardValueAsInt(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
	static SetBlackboardValueAsFloat(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
	static SetBlackboardValueAsEnum(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
	static SetBlackboardValueAsClass(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: UnrealEngineClass): void;
	static SetBlackboardValueAsBool(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: boolean): void;
	static GetOwnersBlackboard(NodeOwner: BTNode): BlackboardComponent;
	static GetOwnerComponent(NodeOwner: BTNode): BehaviorTreeComponent;
	static GetBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector): Vector;
	static GetBlackboardValueAsString(NodeOwner: BTNode,Key: BlackboardKeySelector): string;
	static GetBlackboardValueAsRotator(NodeOwner: BTNode,Key: BlackboardKeySelector): Rotator;
	static GetBlackboardValueAsObject(NodeOwner: BTNode,Key: BlackboardKeySelector): UObject;
	static GetBlackboardValueAsName(NodeOwner: BTNode,Key: BlackboardKeySelector): string;
	static GetBlackboardValueAsInt(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
	static GetBlackboardValueAsFloat(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
	static GetBlackboardValueAsEnum(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
	static GetBlackboardValueAsClass(NodeOwner: BTNode,Key: BlackboardKeySelector): UnrealEngineClass;
	static GetBlackboardValueAsBool(NodeOwner: BTNode,Key: BlackboardKeySelector): boolean;
	static GetBlackboardValueAsActor(NodeOwner: BTNode,Key: BlackboardKeySelector): Actor;
	static ClearBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector): void;
	static ClearBlackboardValue(NodeOwner: BTNode,Key: BlackboardKeySelector): void;
	static C(Other: UObject | any): BTFunctionLibrary;
}

declare class BTService_BlackboardBase extends BTService { 
	BlackboardKey: BlackboardKeySelector;
	static Load(ResourceName: string): BTService_BlackboardBase;
	static Find(Outer: UObject, ResourceName: string): BTService_BlackboardBase;
	static GetDefaultObject(): BTService_BlackboardBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_BlackboardBase;
	static C(Other: UObject | any): BTService_BlackboardBase;
}

declare class BTService_BlueprintBase extends BTService { 
	AIOwner: AIController;
	ActorOwner: Actor;
	CustomDescription: string;
	bShowPropertyDetails: boolean;
	bShowEventDetails: boolean;
	static Load(ResourceName: string): BTService_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): BTService_BlueprintBase;
	static GetDefaultObject(): BTService_BlueprintBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_BlueprintBase;
	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
	ReceiveSearchStartAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveSearchStart(OwnerActor: Actor): void;
	ReceiveDeactivationAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveDeactivation(OwnerActor: Actor): void;
	ReceiveActivationAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveActivation(OwnerActor: Actor): void;
	IsServiceActive(): boolean;
	static C(Other: UObject | any): BTService_BlueprintBase;
}

declare class BTService_DefaultFocus extends BTService_BlackboardBase { 
	FocusPriority: number;
	static Load(ResourceName: string): BTService_DefaultFocus;
	static Find(Outer: UObject, ResourceName: string): BTService_DefaultFocus;
	static GetDefaultObject(): BTService_DefaultFocus;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_DefaultFocus;
	static C(Other: UObject | any): BTService_DefaultFocus;
}

declare type EAIParamType = 'Float' | 'Int' | 'Bool' | 'MAX';
declare var EAIParamType : { Float:'Float',Int:'Int',Bool:'Bool',MAX:'MAX', };
declare class AIDynamicParam { 
	ParamName: string;
	ParamType: EAIParamType;
	Value: number;
	BBKey: BlackboardKeySelector;
	clone() : AIDynamicParam;
	static C(Other: UObject | any): AIDynamicParam;
}

declare class EQSParametrizedQueryExecutionRequest { 
	QueryTemplate: EnvQuery;
	QueryConfig: AIDynamicParam[];
	EQSQueryBlackboardKey: BlackboardKeySelector;
	RunMode: EEnvQueryRunMode;
	bUseBBKeyForQueryTemplate: boolean;
	clone() : EQSParametrizedQueryExecutionRequest;
	static C(Other: UObject | any): EQSParametrizedQueryExecutionRequest;
}

declare class BTService_RunEQS extends BTService_BlackboardBase { 
	EQSRequest: EQSParametrizedQueryExecutionRequest;
	static Load(ResourceName: string): BTService_RunEQS;
	static Find(Outer: UObject, ResourceName: string): BTService_RunEQS;
	static GetDefaultObject(): BTService_RunEQS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_RunEQS;
	static C(Other: UObject | any): BTService_RunEQS;
}

declare class BTTask_BlackboardBase extends BTTaskNode { 
	BlackboardKey: BlackboardKeySelector;
	static Load(ResourceName: string): BTTask_BlackboardBase;
	static Find(Outer: UObject, ResourceName: string): BTTask_BlackboardBase;
	static GetDefaultObject(): BTTask_BlackboardBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_BlackboardBase;
	static C(Other: UObject | any): BTTask_BlackboardBase;
}

declare class IntervalCountdown { 
	Interval: number;
	clone() : IntervalCountdown;
	static C(Other: UObject | any): IntervalCountdown;
}

declare class BTTask_BlueprintBase extends BTTaskNode { 
	AIOwner: AIController;
	ActorOwner: Actor;
	TickInterval: IntervalCountdown;
	CustomDescription: string;
	bShowPropertyDetails: boolean;
	static Load(ResourceName: string): BTTask_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): BTTask_BlueprintBase;
	static GetDefaultObject(): BTTask_BlueprintBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_BlueprintBase;
	SetFinishOnMessageWithId(MessageName: string,RequestID: number): void;
	SetFinishOnMessage(MessageName: string): void;
	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
	ReceiveExecuteAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveExecute(OwnerActor: Actor): void;
	ReceiveAbortAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveAbort(OwnerActor: Actor): void;
	IsTaskExecuting(): boolean;
	IsTaskAborting(): boolean;
	FinishExecute(bSuccess: boolean): void;
	FinishAbort(): void;
	static C(Other: UObject | any): BTTask_BlueprintBase;
}

declare class BTTask_FinishWithResult extends BTTaskNode { 
	Result: EBTNodeResult;
	static Load(ResourceName: string): BTTask_FinishWithResult;
	static Find(Outer: UObject, ResourceName: string): BTTask_FinishWithResult;
	static GetDefaultObject(): BTTask_FinishWithResult;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_FinishWithResult;
	static C(Other: UObject | any): BTTask_FinishWithResult;
}

declare class BTTask_GameplayTaskBase extends BTTaskNode { 
	bWaitForGameplayTask: boolean;
	static Load(ResourceName: string): BTTask_GameplayTaskBase;
	static Find(Outer: UObject, ResourceName: string): BTTask_GameplayTaskBase;
	static GetDefaultObject(): BTTask_GameplayTaskBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_GameplayTaskBase;
	static C(Other: UObject | any): BTTask_GameplayTaskBase;
}

declare class BTTask_MakeNoise extends BTTaskNode { 
	Loudnes: number;
	static Load(ResourceName: string): BTTask_MakeNoise;
	static Find(Outer: UObject, ResourceName: string): BTTask_MakeNoise;
	static GetDefaultObject(): BTTask_MakeNoise;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MakeNoise;
	static C(Other: UObject | any): BTTask_MakeNoise;
}

declare class BTTask_MoveTo extends BTTask_BlackboardBase { 
	AcceptableRadius: number;
	FilterClass: UnrealEngineClass;
	ObservedBlackboardValueTolerance: number;
	bObserveBlackboardValue: boolean;
	bAllowStrafe: boolean;
	bAllowPartialPath: boolean;
	bTrackMovingGoal: boolean;
	bProjectGoalLocation: boolean;
	bReachTestIncludesAgentRadius: boolean;
	bReachTestIncludesGoalRadius: boolean;
	bStopOnOverlap: boolean;
	bStopOnOverlapNeedsUpdate: boolean;
	static Load(ResourceName: string): BTTask_MoveTo;
	static Find(Outer: UObject, ResourceName: string): BTTask_MoveTo;
	static GetDefaultObject(): BTTask_MoveTo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MoveTo;
	static C(Other: UObject | any): BTTask_MoveTo;
}

declare class BTTask_MoveDirectlyToward extends BTTask_MoveTo { 
	bDisablePathUpdateOnGoalLocationChange: boolean;
	bProjectVectorGoalToNavigation: boolean;
	bUpdatedDeprecatedProperties: boolean;
	static Load(ResourceName: string): BTTask_MoveDirectlyToward;
	static Find(Outer: UObject, ResourceName: string): BTTask_MoveDirectlyToward;
	static GetDefaultObject(): BTTask_MoveDirectlyToward;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MoveDirectlyToward;
	static C(Other: UObject | any): BTTask_MoveDirectlyToward;
}

declare class BTTask_PawnActionBase extends BTTaskNode { 
	static Load(ResourceName: string): BTTask_PawnActionBase;
	static Find(Outer: UObject, ResourceName: string): BTTask_PawnActionBase;
	static GetDefaultObject(): BTTask_PawnActionBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PawnActionBase;
	static C(Other: UObject | any): BTTask_PawnActionBase;
}

declare class BTTask_PlayAnimation extends BTTaskNode { 
	AnimationToPlay: AnimationAsset;
	bLooping: boolean;
	bNonBlocking: boolean;
	MyOwnerComp: BehaviorTreeComponent;
	CachedSkelMesh: SkeletalMeshComponent;
	static Load(ResourceName: string): BTTask_PlayAnimation;
	static Find(Outer: UObject, ResourceName: string): BTTask_PlayAnimation;
	static GetDefaultObject(): BTTask_PlayAnimation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PlayAnimation;
	static C(Other: UObject | any): BTTask_PlayAnimation;
}

declare class BTTask_PlaySound extends BTTaskNode { 
	SoundToPlay: SoundCue;
	static Load(ResourceName: string): BTTask_PlaySound;
	static Find(Outer: UObject, ResourceName: string): BTTask_PlaySound;
	static GetDefaultObject(): BTTask_PlaySound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PlaySound;
	static C(Other: UObject | any): BTTask_PlaySound;
}

declare class BTTask_PushPawnAction extends BTTask_PawnActionBase { 
	Action: PawnAction;
	static Load(ResourceName: string): BTTask_PushPawnAction;
	static Find(Outer: UObject, ResourceName: string): BTTask_PushPawnAction;
	static GetDefaultObject(): BTTask_PushPawnAction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PushPawnAction;
	static C(Other: UObject | any): BTTask_PushPawnAction;
}

declare class BTTask_RotateToFaceBBEntry extends BTTask_BlackboardBase { 
	Precision: number;
	static Load(ResourceName: string): BTTask_RotateToFaceBBEntry;
	static Find(Outer: UObject, ResourceName: string): BTTask_RotateToFaceBBEntry;
	static GetDefaultObject(): BTTask_RotateToFaceBBEntry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RotateToFaceBBEntry;
	static C(Other: UObject | any): BTTask_RotateToFaceBBEntry;
}

declare class BTTask_RunBehavior extends BTTaskNode { 
	BehaviorAsset: BehaviorTree;
	static Load(ResourceName: string): BTTask_RunBehavior;
	static Find(Outer: UObject, ResourceName: string): BTTask_RunBehavior;
	static GetDefaultObject(): BTTask_RunBehavior;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunBehavior;
	static C(Other: UObject | any): BTTask_RunBehavior;
}

declare class BTTask_RunBehaviorDynamic extends BTTaskNode { 
	InjectionTag: GameplayTag;
	DefaultBehaviorAsset: BehaviorTree;
	BehaviorAsset: BehaviorTree;
	static Load(ResourceName: string): BTTask_RunBehaviorDynamic;
	static Find(Outer: UObject, ResourceName: string): BTTask_RunBehaviorDynamic;
	static GetDefaultObject(): BTTask_RunBehaviorDynamic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunBehaviorDynamic;
	static C(Other: UObject | any): BTTask_RunBehaviorDynamic;
}

declare class EnvNamedValue { 
	ParamName: string;
	ParamType: EAIParamType;
	Value: number;
	clone() : EnvNamedValue;
	static C(Other: UObject | any): EnvNamedValue;
}

declare class BTTask_RunEQSQuery extends BTTask_BlackboardBase { 
	QueryTemplate: EnvQuery;
	QueryParams: EnvNamedValue[];
	QueryConfig: AIDynamicParam[];
	RunMode: EEnvQueryRunMode;
	EQSQueryBlackboardKey: BlackboardKeySelector;
	bUseBBKey: boolean;
	EQSRequest: EQSParametrizedQueryExecutionRequest;
	static Load(ResourceName: string): BTTask_RunEQSQuery;
	static Find(Outer: UObject, ResourceName: string): BTTask_RunEQSQuery;
	static GetDefaultObject(): BTTask_RunEQSQuery;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunEQSQuery;
	static C(Other: UObject | any): BTTask_RunEQSQuery;
}

declare class BTTask_SetTagCooldown extends BTTaskNode { 
	CooldownTag: GameplayTag;
	bAddToExistingDuration: boolean;
	CooldownDuration: number;
	static Load(ResourceName: string): BTTask_SetTagCooldown;
	static Find(Outer: UObject, ResourceName: string): BTTask_SetTagCooldown;
	static GetDefaultObject(): BTTask_SetTagCooldown;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_SetTagCooldown;
	static C(Other: UObject | any): BTTask_SetTagCooldown;
}

declare class BTTask_Wait extends BTTaskNode { 
	WaitTime: number;
	RandomDeviation: number;
	static Load(ResourceName: string): BTTask_Wait;
	static Find(Outer: UObject, ResourceName: string): BTTask_Wait;
	static GetDefaultObject(): BTTask_Wait;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_Wait;
	static C(Other: UObject | any): BTTask_Wait;
}

declare class BTTask_WaitBlackboardTime extends BTTask_Wait { 
	BlackboardKey: BlackboardKeySelector;
	static Load(ResourceName: string): BTTask_WaitBlackboardTime;
	static Find(Outer: UObject, ResourceName: string): BTTask_WaitBlackboardTime;
	static GetDefaultObject(): BTTask_WaitBlackboardTime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_WaitBlackboardTime;
	static C(Other: UObject | any): BTTask_WaitBlackboardTime;
}

declare class CrowdAgentInterface extends Interface { 
	static Load(ResourceName: string): CrowdAgentInterface;
	static Find(Outer: UObject, ResourceName: string): CrowdAgentInterface;
	static GetDefaultObject(): CrowdAgentInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdAgentInterface;
	static C(Other: UObject | any): CrowdAgentInterface;
}

declare class CrowdFollowingComponent extends PathFollowingComponent { 
	CrowdAgentMoveDirection: Vector;
	CharacterMovement: CharacterMovementComponent;
	AvoidanceGroup: NavAvoidanceMask;
	GroupsToAvoid: NavAvoidanceMask;
	GroupsToIgnore: NavAvoidanceMask;
	static Load(ResourceName: string): CrowdFollowingComponent;
	static Find(Outer: UObject, ResourceName: string): CrowdFollowingComponent;
	static GetDefaultObject(): CrowdFollowingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdFollowingComponent;
	SuspendCrowdSteering(bSuspend: boolean): void;
	static C(Other: UObject | any): CrowdFollowingComponent;
}

declare class CrowdAvoidanceConfig { 
	VelocityBias: number;
	DesiredVelocityWeight: number;
	CurrentVelocityWeight: number;
	SideBiasWeight: number;
	ImpactTimeWeight: number;
	ImpactTimeRange: number;
	CustomPatternIdx: number;
	AdaptiveDivisions: number;
	AdaptiveRings: number;
	AdaptiveDepth: number;
	clone() : CrowdAvoidanceConfig;
	static C(Other: UObject | any): CrowdAvoidanceConfig;
}

declare class CrowdAvoidanceSamplingPattern { 
	Angles: number[];
	Radii: number[];
	clone() : CrowdAvoidanceSamplingPattern;
	static C(Other: UObject | any): CrowdAvoidanceSamplingPattern;
}

declare class CrowdManager extends CrowdManagerBase { 
	MyNavData: NavigationData;
	AvoidanceConfig: CrowdAvoidanceConfig[];
	SamplingPatterns: CrowdAvoidanceSamplingPattern[];
	MaxAgents: number;
	MaxAgentRadius: number;
	MaxAvoidedAgents: number;
	MaxAvoidedWalls: number;
	NavmeshCheckInterval: number;
	PathOptimizationInterval: number;
	SeparationDirClamp: number;
	PathOffsetRadiusMultiplier: number;
	bResolveCollisions: boolean;
	DebugDrawingWorld: World;
	static Load(ResourceName: string): CrowdManager;
	static Find(Outer: UObject, ResourceName: string): CrowdManager;
	static GetDefaultObject(): CrowdManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdManager;
	static C(Other: UObject | any): CrowdManager;
}

declare class DetourCrowdAIController extends AIController { 
	static GetDefaultObject(): DetourCrowdAIController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DetourCrowdAIController;
	static C(Other: UObject | any): DetourCrowdAIController;
}

declare class EnvQueryContext_BlueprintBase extends EnvQueryContext { 
	static Load(ResourceName: string): EnvQueryContext_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_BlueprintBase;
	static GetDefaultObject(): EnvQueryContext_BlueprintBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_BlueprintBase;
	ProvideSingleLocation(QuerierObject: UObject,QuerierActor: Actor,ResultingLocation?: Vector): {ResultingLocation: Vector};
	ProvideSingleActor(QuerierObject: UObject,QuerierActor: Actor,ResultingActor?: Actor): {ResultingActor: Actor};
	ProvideLocationsSet(QuerierObject: UObject,QuerierActor: Actor,ResultingLocationSet?: Vector[]): {ResultingLocationSet: Vector[]};
	ProvideActorsSet(QuerierObject: UObject,QuerierActor: Actor,ResultingActorsSet?: Actor[]): {ResultingActorsSet: Actor[]};
	static C(Other: UObject | any): EnvQueryContext_BlueprintBase;
}

declare class EnvQueryContext_Item extends EnvQueryContext { 
	static Load(ResourceName: string): EnvQueryContext_Item;
	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_Item;
	static GetDefaultObject(): EnvQueryContext_Item;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_Item;
	static C(Other: UObject | any): EnvQueryContext_Item;
}

declare class EnvQueryContext_Querier extends EnvQueryContext { 
	static Load(ResourceName: string): EnvQueryContext_Querier;
	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_Querier;
	static GetDefaultObject(): EnvQueryContext_Querier;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_Querier;
	static C(Other: UObject | any): EnvQueryContext_Querier;
}

declare class EnvQueryDebugHelpers extends UObject { 
	static Load(ResourceName: string): EnvQueryDebugHelpers;
	static Find(Outer: UObject, ResourceName: string): EnvQueryDebugHelpers;
	static GetDefaultObject(): EnvQueryDebugHelpers;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryDebugHelpers;
	static C(Other: UObject | any): EnvQueryDebugHelpers;
}

declare class EnvQueryGenerator_ActorsOfClass extends EnvQueryGenerator { 
	SearchedActorClass: UnrealEngineClass;
	GenerateOnlyActorsInRadius: AIDataProviderBoolValue;
	SearchRadius: AIDataProviderFloatValue;
	SearchCenter: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryGenerator_ActorsOfClass;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_ActorsOfClass;
	static GetDefaultObject(): EnvQueryGenerator_ActorsOfClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_ActorsOfClass;
	static C(Other: UObject | any): EnvQueryGenerator_ActorsOfClass;
}

declare class EnvQueryGenerator_BlueprintBase extends EnvQueryGenerator { 
	GeneratorsActionDescription: string;
	Context: UnrealEngineClass;
	GeneratedItemType: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryGenerator_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_BlueprintBase;
	static GetDefaultObject(): EnvQueryGenerator_BlueprintBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_BlueprintBase;
	GetQuerier(): UObject;
	DoItemGeneration(ContextLocations: Vector[]): void;
	AddGeneratedVector(GeneratedVector: Vector): void;
	AddGeneratedActor(GeneratedActor: Actor): void;
	static C(Other: UObject | any): EnvQueryGenerator_BlueprintBase;
}

declare class EnvQueryGenerator_Composite extends EnvQueryGenerator { 
	Generators: EnvQueryGenerator[];
	bAllowDifferentItemTypes: boolean;
	bHasMatchingItemType: boolean;
	ForcedItemType: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryGenerator_Composite;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Composite;
	static GetDefaultObject(): EnvQueryGenerator_Composite;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Composite;
	static C(Other: UObject | any): EnvQueryGenerator_Composite;
}

declare type EEnvTraceShape = 'Line' | 'Box' | 'Sphere' | 'Capsule' | 'EEnvTraceShape_MAX';
declare var EEnvTraceShape : { Line:'Line',Box:'Box',Sphere:'Sphere',Capsule:'Capsule',EEnvTraceShape_MAX:'EEnvTraceShape_MAX', };
declare type EEnvQueryTrace = 'None' | 'Navigation' | 'Geometry' | 'NavigationOverLedges' | 'EEnvQueryTrace_MAX';
declare var EEnvQueryTrace : { None:'None',Navigation:'Navigation',Geometry:'Geometry',NavigationOverLedges:'NavigationOverLedges',EEnvQueryTrace_MAX:'EEnvQueryTrace_MAX', };
declare class EnvTraceData { 
	VersionNum: number;
	NavigationFilter: UnrealEngineClass;
	ProjectDown: number;
	ProjectUp: number;
	ExtentX: number;
	ExtentY: number;
	ExtentZ: number;
	PostProjectionVerticalOffset: number;
	TraceChannel: ETraceTypeQuery;
	SerializedChannel: ECollisionChannel;
	TraceShape: EEnvTraceShape;
	TraceMode: EEnvQueryTrace;
	bTraceComplex: boolean;
	bOnlyBlockingHits: boolean;
	bCanTraceOnNavMesh: boolean;
	bCanTraceOnGeometry: boolean;
	bCanDisableTrace: boolean;
	bCanProjectDown: boolean;
	clone() : EnvTraceData;
	static C(Other: UObject | any): EnvTraceData;
}

declare class EnvQueryGenerator_ProjectedPoints extends EnvQueryGenerator { 
	ProjectionData: EnvTraceData;
	static Load(ResourceName: string): EnvQueryGenerator_ProjectedPoints;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_ProjectedPoints;
	static GetDefaultObject(): EnvQueryGenerator_ProjectedPoints;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_ProjectedPoints;
	static C(Other: UObject | any): EnvQueryGenerator_ProjectedPoints;
}

declare class EnvQueryGenerator_Cone extends EnvQueryGenerator_ProjectedPoints { 
	AlignedPointsDistance: AIDataProviderFloatValue;
	ConeDegrees: AIDataProviderFloatValue;
	AngleStep: AIDataProviderFloatValue;
	Range: AIDataProviderFloatValue;
	CenterActor: UnrealEngineClass;
	bIncludeContextLocation: boolean;
	static Load(ResourceName: string): EnvQueryGenerator_Cone;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Cone;
	static GetDefaultObject(): EnvQueryGenerator_Cone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Cone;
	static C(Other: UObject | any): EnvQueryGenerator_Cone;
}

declare class EnvQueryGenerator_CurrentLocation extends EnvQueryGenerator { 
	QueryContext: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryGenerator_CurrentLocation;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_CurrentLocation;
	static GetDefaultObject(): EnvQueryGenerator_CurrentLocation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_CurrentLocation;
	static C(Other: UObject | any): EnvQueryGenerator_CurrentLocation;
}

declare class AIDataProviderIntValue extends AIDataProviderTypedValue { 
	DefaultValue: number;
	clone() : AIDataProviderIntValue;
	static C(Other: UObject | any): AIDataProviderIntValue;
}

declare type EEnvDirection = 'TwoPoints' | 'Rotation' | 'EEnvDirection_MAX';
declare var EEnvDirection : { TwoPoints:'TwoPoints',Rotation:'Rotation',EEnvDirection_MAX:'EEnvDirection_MAX', };
declare class EnvDirection { 
	LineFrom: UnrealEngineClass;
	LineTo: UnrealEngineClass;
	Rotation: UnrealEngineClass;
	DirMode: EEnvDirection;
	clone() : EnvDirection;
	static C(Other: UObject | any): EnvDirection;
}

declare class EnvQueryGenerator_Donut extends EnvQueryGenerator_ProjectedPoints { 
	InnerRadius: AIDataProviderFloatValue;
	OuterRadius: AIDataProviderFloatValue;
	NumberOfRings: AIDataProviderIntValue;
	PointsPerRing: AIDataProviderIntValue;
	ArcDirection: EnvDirection;
	ArcAngle: AIDataProviderFloatValue;
	bUseSpiralPattern: boolean;
	Center: UnrealEngineClass;
	bDefineArc: boolean;
	static Load(ResourceName: string): EnvQueryGenerator_Donut;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Donut;
	static GetDefaultObject(): EnvQueryGenerator_Donut;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Donut;
	static C(Other: UObject | any): EnvQueryGenerator_Donut;
}

declare type EPointOnCircleSpacingMethod = 'BySpaceBetween' | 'ByNumberOfPoints' | 'EPointOnCircleSpacingMethod_MAX';
declare var EPointOnCircleSpacingMethod : { BySpaceBetween:'BySpaceBetween',ByNumberOfPoints:'ByNumberOfPoints',EPointOnCircleSpacingMethod_MAX:'EPointOnCircleSpacingMethod_MAX', };
declare class EnvQueryGenerator_OnCircle extends EnvQueryGenerator_ProjectedPoints { 
	CircleRadius: AIDataProviderFloatValue;
	SpaceBetween: AIDataProviderFloatValue;
	NumberOfPoints: AIDataProviderIntValue;
	PointOnCircleSpacingMethod: EPointOnCircleSpacingMethod;
	ArcDirection: EnvDirection;
	ArcAngle: AIDataProviderFloatValue;
	AngleRadians: number;
	CircleCenter: UnrealEngineClass;
	bIgnoreAnyContextActorsWhenGeneratingCircle: boolean;
	CircleCenterZOffset: AIDataProviderFloatValue;
	TraceData: EnvTraceData;
	bDefineArc: boolean;
	static Load(ResourceName: string): EnvQueryGenerator_OnCircle;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_OnCircle;
	static GetDefaultObject(): EnvQueryGenerator_OnCircle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_OnCircle;
	static C(Other: UObject | any): EnvQueryGenerator_OnCircle;
}

declare class EnvQueryGenerator_SimpleGrid extends EnvQueryGenerator_ProjectedPoints { 
	GridSize: AIDataProviderFloatValue;
	SpaceBetween: AIDataProviderFloatValue;
	GenerateAround: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryGenerator_SimpleGrid;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_SimpleGrid;
	static GetDefaultObject(): EnvQueryGenerator_SimpleGrid;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_SimpleGrid;
	static C(Other: UObject | any): EnvQueryGenerator_SimpleGrid;
}

declare class EnvQueryGenerator_PathingGrid extends EnvQueryGenerator_SimpleGrid { 
	PathToItem: AIDataProviderBoolValue;
	NavigationFilter: UnrealEngineClass;
	ScanRangeMultiplier: AIDataProviderFloatValue;
	static Load(ResourceName: string): EnvQueryGenerator_PathingGrid;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_PathingGrid;
	static GetDefaultObject(): EnvQueryGenerator_PathingGrid;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_PathingGrid;
	static C(Other: UObject | any): EnvQueryGenerator_PathingGrid;
}

declare class EnvQueryItemType_VectorBase extends EnvQueryItemType { 
	static Load(ResourceName: string): EnvQueryItemType_VectorBase;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_VectorBase;
	static GetDefaultObject(): EnvQueryItemType_VectorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_VectorBase;
	static C(Other: UObject | any): EnvQueryItemType_VectorBase;
}

declare class EnvQueryItemType_ActorBase extends EnvQueryItemType_VectorBase { 
	static Load(ResourceName: string): EnvQueryItemType_ActorBase;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_ActorBase;
	static GetDefaultObject(): EnvQueryItemType_ActorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_ActorBase;
	static C(Other: UObject | any): EnvQueryItemType_ActorBase;
}

declare class EnvQueryItemType_Actor extends EnvQueryItemType_ActorBase { 
	static Load(ResourceName: string): EnvQueryItemType_Actor;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Actor;
	static GetDefaultObject(): EnvQueryItemType_Actor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Actor;
	static C(Other: UObject | any): EnvQueryItemType_Actor;
}

declare class EnvQueryItemType_Direction extends EnvQueryItemType_VectorBase { 
	static Load(ResourceName: string): EnvQueryItemType_Direction;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Direction;
	static GetDefaultObject(): EnvQueryItemType_Direction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Direction;
	static C(Other: UObject | any): EnvQueryItemType_Direction;
}

declare class EnvQueryItemType_Point extends EnvQueryItemType_VectorBase { 
	static Load(ResourceName: string): EnvQueryItemType_Point;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Point;
	static GetDefaultObject(): EnvQueryItemType_Point;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Point;
	static C(Other: UObject | any): EnvQueryItemType_Point;
}

declare type EEnvTestDistance = 'Distance3D' | 'Distance2D' | 'DistanceZ' | 'DistanceAbsoluteZ' | 'EEnvTestDistance_MAX';
declare var EEnvTestDistance : { Distance3D:'Distance3D',Distance2D:'Distance2D',DistanceZ:'DistanceZ',DistanceAbsoluteZ:'DistanceAbsoluteZ',EEnvTestDistance_MAX:'EEnvTestDistance_MAX', };
declare class EnvQueryTest_Distance extends EnvQueryTest { 
	TestMode: EEnvTestDistance;
	DistanceTo: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryTest_Distance;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Distance;
	static GetDefaultObject(): EnvQueryTest_Distance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Distance;
	static C(Other: UObject | any): EnvQueryTest_Distance;
}

declare type EEnvTestDot = 'Dot3D' | 'Dot2D' | 'EEnvTestDot_MAX';
declare var EEnvTestDot : { Dot3D:'Dot3D',Dot2D:'Dot2D',EEnvTestDot_MAX:'EEnvTestDot_MAX', };
declare class EnvQueryTest_Dot extends EnvQueryTest { 
	LineA: EnvDirection;
	LineB: EnvDirection;
	TestMode: EEnvTestDot;
	bAbsoluteValue: boolean;
	static Load(ResourceName: string): EnvQueryTest_Dot;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Dot;
	static GetDefaultObject(): EnvQueryTest_Dot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Dot;
	static C(Other: UObject | any): EnvQueryTest_Dot;
}

declare class EnvQueryTest_GameplayTags extends EnvQueryTest { 
	TagQueryToMatch: GameplayTagQuery;
	bUpdatedToUseQuery: boolean;
	TagsToMatch: EGameplayContainerMatchType;
	GameplayTags: GameplayTagContainer;
	static Load(ResourceName: string): EnvQueryTest_GameplayTags;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_GameplayTags;
	static GetDefaultObject(): EnvQueryTest_GameplayTags;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_GameplayTags;
	static C(Other: UObject | any): EnvQueryTest_GameplayTags;
}

declare type EEnvOverlapShape = 'Box' | 'Sphere' | 'Capsule' | 'EEnvOverlapShape_MAX';
declare var EEnvOverlapShape : { Box:'Box',Sphere:'Sphere',Capsule:'Capsule',EEnvOverlapShape_MAX:'EEnvOverlapShape_MAX', };
declare class EnvOverlapData { 
	ExtentX: number;
	ExtentY: number;
	ExtentZ: number;
	ShapeOffset: Vector;
	OverlapChannel: ECollisionChannel;
	OverlapShape: EEnvOverlapShape;
	bOnlyBlockingHits: boolean;
	bOverlapComplex: boolean;
	bSkipOverlapQuerier: boolean;
	clone() : EnvOverlapData;
	static C(Other: UObject | any): EnvOverlapData;
}

declare class EnvQueryTest_Overlap extends EnvQueryTest { 
	OverlapData: EnvOverlapData;
	static Load(ResourceName: string): EnvQueryTest_Overlap;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Overlap;
	static GetDefaultObject(): EnvQueryTest_Overlap;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Overlap;
	static C(Other: UObject | any): EnvQueryTest_Overlap;
}

declare type EEnvTestPathfinding = 'PathExist' | 'PathCost' | 'PathLength' | 'EEnvTestPathfinding_MAX';
declare var EEnvTestPathfinding : { PathExist:'PathExist',PathCost:'PathCost',PathLength:'PathLength',EEnvTestPathfinding_MAX:'EEnvTestPathfinding_MAX', };
declare class EnvQueryTest_Pathfinding extends EnvQueryTest { 
	TestMode: EEnvTestPathfinding;
	Context: UnrealEngineClass;
	PathFromContext: AIDataProviderBoolValue;
	SkipUnreachable: AIDataProviderBoolValue;
	FilterClass: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryTest_Pathfinding;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Pathfinding;
	static GetDefaultObject(): EnvQueryTest_Pathfinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Pathfinding;
	static C(Other: UObject | any): EnvQueryTest_Pathfinding;
}

declare class EnvQueryTest_PathfindingBatch extends EnvQueryTest_Pathfinding { 
	ScanRangeMultiplier: AIDataProviderFloatValue;
	static Load(ResourceName: string): EnvQueryTest_PathfindingBatch;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_PathfindingBatch;
	static GetDefaultObject(): EnvQueryTest_PathfindingBatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_PathfindingBatch;
	static C(Other: UObject | any): EnvQueryTest_PathfindingBatch;
}

declare class EnvQueryTest_Project extends EnvQueryTest { 
	ProjectionData: EnvTraceData;
	static Load(ResourceName: string): EnvQueryTest_Project;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Project;
	static GetDefaultObject(): EnvQueryTest_Project;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Project;
	static C(Other: UObject | any): EnvQueryTest_Project;
}

declare class EnvQueryTest_Random extends EnvQueryTest { 
	static Load(ResourceName: string): EnvQueryTest_Random;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Random;
	static GetDefaultObject(): EnvQueryTest_Random;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Random;
	static C(Other: UObject | any): EnvQueryTest_Random;
}

declare class EnvQueryTest_Trace extends EnvQueryTest { 
	TraceData: EnvTraceData;
	TraceFromContext: AIDataProviderBoolValue;
	ItemHeightOffset: AIDataProviderFloatValue;
	ContextHeightOffset: AIDataProviderFloatValue;
	Context: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryTest_Trace;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Trace;
	static GetDefaultObject(): EnvQueryTest_Trace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Trace;
	static C(Other: UObject | any): EnvQueryTest_Trace;
}

declare class EnvQueryTest_Volume extends EnvQueryTest { 
	VolumeContext: UnrealEngineClass;
	VolumeClass: UnrealEngineClass;
	bDoComplexVolumeTest: boolean;
	static Load(ResourceName: string): EnvQueryTest_Volume;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Volume;
	static GetDefaultObject(): EnvQueryTest_Volume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Volume;
	static C(Other: UObject | any): EnvQueryTest_Volume;
}

declare class EnvQueryTypes extends UObject { 
	static Load(ResourceName: string): EnvQueryTypes;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTypes;
	static GetDefaultObject(): EnvQueryTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTypes;
	static C(Other: UObject | any): EnvQueryTypes;
}

declare class EQSQueryResultSourceInterface extends Interface { 
	static Load(ResourceName: string): EQSQueryResultSourceInterface;
	static Find(Outer: UObject, ResourceName: string): EQSQueryResultSourceInterface;
	static GetDefaultObject(): EQSQueryResultSourceInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSQueryResultSourceInterface;
	static C(Other: UObject | any): EQSQueryResultSourceInterface;
}

declare class EQSRenderingComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): EQSRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): EQSRenderingComponent;
	static GetDefaultObject(): EQSRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSRenderingComponent;
	static C(Other: UObject | any): EQSRenderingComponent;
}

declare type EEnvQueryHightlightMode = 'All' | 'Best5Pct' | 'Best25Pct' | 'EEnvQueryHightlightMode_MAX';
declare var EEnvQueryHightlightMode : { All:'All',Best5Pct:'Best5Pct',Best25Pct:'Best25Pct',EEnvQueryHightlightMode_MAX:'EEnvQueryHightlightMode_MAX', };
declare class EQSTestingPawn extends Character { 
	QueryTemplate: EnvQuery;
	QueryParams: EnvNamedValue[];
	QueryConfig: AIDynamicParam[];
	TimeLimitPerStep: number;
	StepToDebugDraw: number;
	HighlightMode: EEnvQueryHightlightMode;
	bDrawLabels: boolean;
	bDrawFailedItems: boolean;
	bReRunQueryOnlyOnFinishedMove: boolean;
	bShouldBeVisibleInGame: boolean;
	bTickDuringGame: boolean;
	QueryingMode: EEnvQueryRunMode;
	NavAgentProperties: NavAgentProperties;
	EdRenderComp: EQSRenderingComponent;
	static GetDefaultObject(): EQSTestingPawn;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSTestingPawn;
	static C(Other: UObject | any): EQSTestingPawn;
}

declare class GenericTeamAgentInterface extends Interface { 
	static Load(ResourceName: string): GenericTeamAgentInterface;
	static Find(Outer: UObject, ResourceName: string): GenericTeamAgentInterface;
	static GetDefaultObject(): GenericTeamAgentInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenericTeamAgentInterface;
	static C(Other: UObject | any): GenericTeamAgentInterface;
}

declare class GridPathAIController extends AIController { 
	static GetDefaultObject(): GridPathAIController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GridPathAIController;
	static C(Other: UObject | any): GridPathAIController;
}

declare class GridPathFollowingComponent extends PathFollowingComponent { 
	GridManager: NavLocalGridManager;
	static Load(ResourceName: string): GridPathFollowingComponent;
	static Find(Outer: UObject, ResourceName: string): GridPathFollowingComponent;
	static GetDefaultObject(): GridPathFollowingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GridPathFollowingComponent;
	static C(Other: UObject | any): GridPathFollowingComponent;
}

declare class NavFilter_AIControllerDefault extends NavigationQueryFilter { 
	static Load(ResourceName: string): NavFilter_AIControllerDefault;
	static Find(Outer: UObject, ResourceName: string): NavFilter_AIControllerDefault;
	static GetDefaultObject(): NavFilter_AIControllerDefault;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavFilter_AIControllerDefault;
	static C(Other: UObject | any): NavFilter_AIControllerDefault;
}

declare class NavLinkProxy extends Actor { 
	PointLinks: NavigationLink[];
	SegmentLinks: NavigationSegmentLink[];
	SmartLinkComp: NavLinkCustomComponent;
	bSmartLinkIsRelevant: boolean;
	EdRenderComp: NavLinkRenderingComponent;
	SpriteComponent: BillboardComponent;
	OnSmartLinkReached: UnrealEngineMulticastDelegate<(MovingActor: Actor, DestinationPoint: Vector) => void>;
	static GetDefaultObject(): NavLinkProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkProxy;
	SetSmartLinkEnabled(bEnabled: boolean): void;
	ResumePathFollowing(Agent: Actor): void;
	ReceiveSmartLinkReached(Agent: Actor,Destination: Vector): void;
	IsSmartLinkEnabled(): boolean;
	HasMovingAgents(): boolean;
	CopyEndPointsFromSimpleLinkToSmartLink(): void;
	static C(Other: UObject | any): NavLinkProxy;
}

declare class PathFollowingManager extends UObject { 
	static Load(ResourceName: string): PathFollowingManager;
	static Find(Outer: UObject, ResourceName: string): PathFollowingManager;
	static GetDefaultObject(): PathFollowingManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PathFollowingManager;
	static C(Other: UObject | any): PathFollowingManager;
}

declare class PawnAction_BlueprintBase extends PawnAction { 
	static Load(ResourceName: string): PawnAction_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): PawnAction_BlueprintBase;
	static GetDefaultObject(): PawnAction_BlueprintBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_BlueprintBase;
	ActionTick(ControlledPawn: Pawn,DeltaSeconds: number): void;
	ActionStart(ControlledPawn: Pawn): void;
	ActionResume(ControlledPawn: Pawn): void;
	ActionPause(ControlledPawn: Pawn): void;
	ActionFinished(ControlledPawn: Pawn,WithResult: EPawnActionResult): void;
	static C(Other: UObject | any): PawnAction_BlueprintBase;
}

declare class PawnAction_Move extends PawnAction { 
	GoalActor: Actor;
	GoalLocation: Vector;
	AcceptableRadius: number;
	FilterClass: UnrealEngineClass;
	bAllowStrafe: boolean;
	bFinishOnOverlap: boolean;
	bUsePathfinding: boolean;
	bAllowPartialPath: boolean;
	bProjectGoalToNavigation: boolean;
	bUpdatePathToGoal: boolean;
	bAbortChildActionOnPathChange: boolean;
	static Load(ResourceName: string): PawnAction_Move;
	static Find(Outer: UObject, ResourceName: string): PawnAction_Move;
	static GetDefaultObject(): PawnAction_Move;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Move;
	static C(Other: UObject | any): PawnAction_Move;
}

declare type EPawnActionFailHandling = 'RequireSuccess' | 'IgnoreFailure' | 'EPawnActionFailHandling_MAX';
declare var EPawnActionFailHandling : { RequireSuccess:'RequireSuccess',IgnoreFailure:'IgnoreFailure',EPawnActionFailHandling_MAX:'EPawnActionFailHandling_MAX', };
declare class PawnAction_Repeat extends PawnAction { 
	ActionToRepeat: PawnAction;
	RecentActionCopy: PawnAction;
	ChildFailureHandlingMode: EPawnActionFailHandling;
	static Load(ResourceName: string): PawnAction_Repeat;
	static Find(Outer: UObject, ResourceName: string): PawnAction_Repeat;
	static GetDefaultObject(): PawnAction_Repeat;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Repeat;
	static C(Other: UObject | any): PawnAction_Repeat;
}

declare class PawnAction_Sequence extends PawnAction { 
	ActionSequence: PawnAction[];
	ChildFailureHandlingMode: EPawnActionFailHandling;
	RecentActionCopy: PawnAction;
	static Load(ResourceName: string): PawnAction_Sequence;
	static Find(Outer: UObject, ResourceName: string): PawnAction_Sequence;
	static GetDefaultObject(): PawnAction_Sequence;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Sequence;
	static C(Other: UObject | any): PawnAction_Sequence;
}

declare class PawnAction_Wait extends PawnAction { 
	TimeToWait: number;
	static Load(ResourceName: string): PawnAction_Wait;
	static Find(Outer: UObject, ResourceName: string): PawnAction_Wait;
	static GetDefaultObject(): PawnAction_Wait;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Wait;
	static C(Other: UObject | any): PawnAction_Wait;
}

declare class PawnSensingComponent extends ActorComponent { 
	HearingThreshold: number;
	LOSHearingThreshold: number;
	SightRadius: number;
	SensingInterval: number;
	HearingMaxSoundAge: number;
	bEnableSensingUpdates: boolean;
	bOnlySensePlayers: boolean;
	bSeePawns: boolean;
	bHearNoises: boolean;
	OnSeePawn: UnrealEngineMulticastDelegate<(Pawn: Pawn) => void>;
	OnHearNoise: UnrealEngineMulticastDelegate<(Instigator: Pawn, Location: Vector, Volume: number) => void>;
	PeripheralVisionAngle: number;
	PeripheralVisionCosine: number;
	static Load(ResourceName: string): PawnSensingComponent;
	static Find(Outer: UObject, ResourceName: string): PawnSensingComponent;
	static GetDefaultObject(): PawnSensingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnSensingComponent;
	SetSensingUpdatesEnabled(bEnabled: boolean): void;
	SetSensingInterval(NewSensingInterval: number): void;
	SetPeripheralVisionAngle(NewPeripheralVisionAngle: number): void;
	GetPeripheralVisionCosine(): number;
	GetPeripheralVisionAngle(): number;
	static C(Other: UObject | any): PawnSensingComponent;
}

declare class VisualLoggerExtension extends UObject { 
	static Load(ResourceName: string): VisualLoggerExtension;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerExtension;
	static GetDefaultObject(): VisualLoggerExtension;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerExtension;
	static C(Other: UObject | any): VisualLoggerExtension;
}

declare class VariantDependency { 
	VariantSet: VariantSet;
	Variant: Variant;
	bEnabled: boolean;
	clone() : VariantDependency;
	static C(Other: UObject | any): VariantDependency;
}

declare class CapturedPropSegment { 
	PropertyName: string;
	PropertyIndex: number;
	ComponentName: string;
	clone() : CapturedPropSegment;
	static C(Other: UObject | any): CapturedPropSegment;
}

declare type EPropertyValueCategory = 'Undefined' | 'Generic' | 'RelativeLocation' | 'RelativeRotation' | 'RelativeScale3D' | 'Visibility' | 'Material' | 'Color' | 'Option' | 'EPropertyValueCategory_MAX';
declare var EPropertyValueCategory : { Undefined:'Undefined',Generic:'Generic',RelativeLocation:'RelativeLocation',RelativeRotation:'RelativeRotation',RelativeScale3D:'RelativeScale3D',Visibility:'Visibility',Material:'Material',Color:'Color',Option:'Option',EPropertyValueCategory_MAX:'EPropertyValueCategory_MAX', };
declare class PropertyValue extends UObject { 
	Properties: any[];
	PropertyIndices: number[];
	CapturedPropSegments: CapturedPropSegment[];
	FullDisplayString: string;
	PropertySetterName: string;
	PropertySetterParameterDefaults: any;
	bHasRecordedData: boolean;
	LeafPropertyClass: UnrealEngineClass;
	ValueBytes: number[];
	PropCategory: EPropertyValueCategory;
	DisplayOrder: any;
	static Load(ResourceName: string): PropertyValue;
	static Find(Outer: UObject, ResourceName: string): PropertyValue;
	static GetDefaultObject(): PropertyValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValue;
	HasRecordedData(): boolean;
	GetPropertyTooltip(): string;
	GetFullDisplayString(): string;
	static C(Other: UObject | any): PropertyValue;
}

declare class FunctionCaller { 
	FunctionName: string;
	FunctionEntry: any;
	DisplayOrder: any;
	clone() : FunctionCaller;
	static C(Other: UObject | any): FunctionCaller;
}

declare class VariantObjectBinding extends UObject { 
	CachedActorLabel: string;
	ObjectPtr: SoftObjectPath;
	LazyObjectPtr: any;
	CapturedProperties: PropertyValue[];
	FunctionCallers: FunctionCaller[];
	static Load(ResourceName: string): VariantObjectBinding;
	static Find(Outer: UObject, ResourceName: string): VariantObjectBinding;
	static GetDefaultObject(): VariantObjectBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VariantObjectBinding;
	static C(Other: UObject | any): VariantObjectBinding;
}

declare class Variant extends UObject { 
	Dependencies: VariantDependency[];
	DisplayText: string;
	ObjectBindings: VariantObjectBinding[];
	Thumbnail: Texture2D;
	static Load(ResourceName: string): Variant;
	static Find(Outer: UObject, ResourceName: string): Variant;
	static GetDefaultObject(): Variant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Variant;
	SwitchOn(): void;
	SetThumbnailFromTexture(NewThumbnail: Texture2D): void;
	SetThumbnailFromFile(FilePath: string): void;
	SetThumbnailFromEditorViewport(): void;
	SetThumbnailFromCamera(WorldContextObject: UObject,CameraTransform: Transform,FOVDegrees: number,MinZ: number,Gamma: number): void;
	SetDisplayText(NewDisplayText: string): void;
	SetDependency(index: number,Dependency?: VariantDependency): {Dependency: VariantDependency};
	IsActive(): boolean;
	GetThumbnail(): Texture2D;
	GetParent(): VariantSet;
	GetNumDependencies(): number;
	GetNumActors(): number;
	GetDisplayText(): string;
	GetDependents(LevelVariantSets: LevelVariantSets,bOnlyEnabledDependencies: boolean): Variant[];
	GetDependency(index: number): VariantDependency;
	GetActor(ActorIndex: number): Actor;
	DeleteDependency(index: number): void;
	AddDependency(Dependency?: VariantDependency): {Dependency: VariantDependency, $: number};
	static C(Other: UObject | any): Variant;
}

declare class VariantSet extends UObject { 
	DisplayText: string;
	bExpanded: boolean;
	Variants: Variant[];
	Thumbnail: Texture2D;
	static Load(ResourceName: string): VariantSet;
	static Find(Outer: UObject, ResourceName: string): VariantSet;
	static GetDefaultObject(): VariantSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VariantSet;
	SetThumbnailFromTexture(NewThumbnail: Texture2D): void;
	SetThumbnailFromFile(FilePath: string): void;
	SetThumbnailFromEditorViewport(): void;
	SetThumbnailFromCamera(WorldContextObject: UObject,CameraTransform: Transform,FOVDegrees: number,MinZ: number,Gamma: number): void;
	SetDisplayText(NewDisplayText: string): void;
	GetVariantByName(VariantName: string): Variant;
	GetVariant(VariantIndex: number): Variant;
	GetThumbnail(): Texture2D;
	GetParent(): LevelVariantSets;
	GetNumVariants(): number;
	GetDisplayText(): string;
	static C(Other: UObject | any): VariantSet;
}

declare class LevelVariantSets extends UObject { 
	DirectorBlueprint: UObject;
	DirectorClass: UnrealEngineClass;
	VariantSets: VariantSet[];
	static Load(ResourceName: string): LevelVariantSets;
	static Find(Outer: UObject, ResourceName: string): LevelVariantSets;
	static GetDefaultObject(): LevelVariantSets;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelVariantSets;
	GetVariantSetByName(VariantSetName: string): VariantSet;
	GetVariantSet(VariantSetIndex: number): VariantSet;
	GetNumVariantSets(): number;
	static C(Other: UObject | any): LevelVariantSets;
}

declare class LevelVariantSetsActor extends Actor { 
	LevelVariantSets: SoftObjectPath;
	DirectorInstances: any;
	static GetDefaultObject(): LevelVariantSetsActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelVariantSetsActor;
	SwitchOnVariantByName(VariantSetName: string,VariantName: string): boolean;
	SwitchOnVariantByIndex(VariantSetIndex: number,VariantIndex: number): boolean;
	SetLevelVariantSets(InVariantSets: LevelVariantSets): void;
	GetLevelVariantSets(bLoad: boolean): LevelVariantSets;
	static C(Other: UObject | any): LevelVariantSetsActor;
}

declare class LevelVariantSetsFunctionDirector extends UObject { 
	static Load(ResourceName: string): LevelVariantSetsFunctionDirector;
	static Find(Outer: UObject, ResourceName: string): LevelVariantSetsFunctionDirector;
	static GetDefaultObject(): LevelVariantSetsFunctionDirector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelVariantSetsFunctionDirector;
	static C(Other: UObject | any): LevelVariantSetsFunctionDirector;
}

declare class PropertyValueTransform extends PropertyValue { 
	static Load(ResourceName: string): PropertyValueTransform;
	static Find(Outer: UObject, ResourceName: string): PropertyValueTransform;
	static GetDefaultObject(): PropertyValueTransform;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValueTransform;
	static C(Other: UObject | any): PropertyValueTransform;
}

declare class PropertyValueVisibility extends PropertyValue { 
	static Load(ResourceName: string): PropertyValueVisibility;
	static Find(Outer: UObject, ResourceName: string): PropertyValueVisibility;
	static GetDefaultObject(): PropertyValueVisibility;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValueVisibility;
	static C(Other: UObject | any): PropertyValueVisibility;
}

declare class PropertyValueColor extends PropertyValue { 
	static Load(ResourceName: string): PropertyValueColor;
	static Find(Outer: UObject, ResourceName: string): PropertyValueColor;
	static GetDefaultObject(): PropertyValueColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValueColor;
	static C(Other: UObject | any): PropertyValueColor;
}

declare class PropertyValueMaterial extends PropertyValue { 
	static Load(ResourceName: string): PropertyValueMaterial;
	static Find(Outer: UObject, ResourceName: string): PropertyValueMaterial;
	static GetDefaultObject(): PropertyValueMaterial;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValueMaterial;
	static C(Other: UObject | any): PropertyValueMaterial;
}

declare class PropertyValueOption extends PropertyValue { 
	static Load(ResourceName: string): PropertyValueOption;
	static Find(Outer: UObject, ResourceName: string): PropertyValueOption;
	static GetDefaultObject(): PropertyValueOption;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValueOption;
	static C(Other: UObject | any): PropertyValueOption;
}

declare class PropertyValueSoftObject extends PropertyValue { 
	static Load(ResourceName: string): PropertyValueSoftObject;
	static Find(Outer: UObject, ResourceName: string): PropertyValueSoftObject;
	static GetDefaultObject(): PropertyValueSoftObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValueSoftObject;
	static C(Other: UObject | any): PropertyValueSoftObject;
}

declare class SwitchActor extends Actor { 
	SceneComponent: SceneComponent;
	LastSelectedOption: number;
	static GetDefaultObject(): SwitchActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SwitchActor;
	SelectOption(OptionIndex: number): void;
	GetSelectedOption(): number;
	GetOptions(): Actor[];
	static C(Other: UObject | any): SwitchActor;
}

declare class DatasmithObjectTemplate extends UObject { 
	static Load(ResourceName: string): DatasmithObjectTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithObjectTemplate;
	static GetDefaultObject(): DatasmithObjectTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithObjectTemplate;
	static C(Other: UObject | any): DatasmithObjectTemplate;
}

declare class DatasmithActorTemplate extends DatasmithObjectTemplate { 
	Layers: any;
	Tags: any;
	static Load(ResourceName: string): DatasmithActorTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithActorTemplate;
	static GetDefaultObject(): DatasmithActorTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithActorTemplate;
	static C(Other: UObject | any): DatasmithActorTemplate;
}

declare class DatasmithAdditionalData extends UObject { 
	static Load(ResourceName: string): DatasmithAdditionalData;
	static Find(Outer: UObject, ResourceName: string): DatasmithAdditionalData;
	static GetDefaultObject(): DatasmithAdditionalData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithAdditionalData;
	static C(Other: UObject | any): DatasmithAdditionalData;
}

declare type EDatasmithAreaLightActorType = 'Point' | 'Spot' | 'Rect' | 'EDatasmithAreaLightActorType_MAX';
declare var EDatasmithAreaLightActorType : { Point:'Point',Spot:'Spot',Rect:'Rect',EDatasmithAreaLightActorType_MAX:'EDatasmithAreaLightActorType_MAX', };
declare type EDatasmithAreaLightActorShape = 'Rectangle' | 'Disc' | 'Sphere' | 'Cylinder' | 'None' | 'EDatasmithAreaLightActorShape_MAX';
declare var EDatasmithAreaLightActorShape : { Rectangle:'Rectangle',Disc:'Disc',Sphere:'Sphere',Cylinder:'Cylinder',None:'None',EDatasmithAreaLightActorShape_MAX:'EDatasmithAreaLightActorShape_MAX', };
declare class DatasmithAreaLightActor extends Actor { 
	Mobility: EComponentMobility;
	LightType: EDatasmithAreaLightActorType;
	LightShape: EDatasmithAreaLightActorShape;
	Dimensions: Vector2D;
	Intensity: number;
	IntensityUnits: ELightUnits;
	Color: LinearColor;
	Temperature: number;
	IESTexture: TextureLightProfile;
	bUseIESBrightness: boolean;
	IESBrightnessScale: number;
	Rotation: Rotator;
	SourceRadius: number;
	SourceLength: number;
	AttenuationRadius: number;
	SpotlightInnerAngle: number;
	SpotlightOuterAngle: number;
	static GetDefaultObject(): DatasmithAreaLightActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithAreaLightActor;
	static C(Other: UObject | any): DatasmithAreaLightActor;
}

declare class DatasmithAreaLightActorTemplate extends DatasmithObjectTemplate { 
	LightType: EDatasmithAreaLightActorType;
	LightShape: EDatasmithAreaLightActorShape;
	Dimensions: Vector2D;
	Color: LinearColor;
	Intensity: number;
	IntensityUnits: ELightUnits;
	Temperature: number;
	IESTexture: TextureLightProfile;
	bUseIESBrightness: boolean;
	IESBrightnessScale: number;
	Rotation: Rotator;
	SourceRadius: number;
	SourceLength: number;
	AttenuationRadius: number;
	static Load(ResourceName: string): DatasmithAreaLightActorTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithAreaLightActorTemplate;
	static GetDefaultObject(): DatasmithAreaLightActorTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithAreaLightActorTemplate;
	static C(Other: UObject | any): DatasmithAreaLightActorTemplate;
}

declare class DatasmithAssetImportOptions { 
	PackagePath: string;
	clone() : DatasmithAssetImportOptions;
	static C(Other: UObject | any): DatasmithAssetImportOptions;
}

declare class DatasmithAssetImportData extends AssetImportData { 
	AssetImportOptions: DatasmithAssetImportOptions;
	AdditionalData: DatasmithAdditionalData[];
	static Load(ResourceName: string): DatasmithAssetImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithAssetImportData;
	static GetDefaultObject(): DatasmithAssetImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithAssetImportData;
	static C(Other: UObject | any): DatasmithAssetImportData;
}

declare type EDatasmithImportLightmapMin = 'LIGHTMAP_16' | 'LIGHTMAP_32' | 'LIGHTMAP_64' | 'LIGHTMAP_128' | 'LIGHTMAP_256' | 'LIGHTMAP_512' | 'LIGHTMAP_MAX';
declare var EDatasmithImportLightmapMin : { LIGHTMAP_16:'LIGHTMAP_16',LIGHTMAP_32:'LIGHTMAP_32',LIGHTMAP_64:'LIGHTMAP_64',LIGHTMAP_128:'LIGHTMAP_128',LIGHTMAP_256:'LIGHTMAP_256',LIGHTMAP_512:'LIGHTMAP_512',LIGHTMAP_MAX:'LIGHTMAP_MAX', };
declare type EDatasmithImportLightmapMax = 'LIGHTMAP_64' | 'LIGHTMAP_128' | 'LIGHTMAP_256' | 'LIGHTMAP_512' | 'LIGHTMAP_1024' | 'LIGHTMAP_2048' | 'LIGHTMAP_4096' | 'LIGHTMAP_MAX';
declare var EDatasmithImportLightmapMax : { LIGHTMAP_64:'LIGHTMAP_64',LIGHTMAP_128:'LIGHTMAP_128',LIGHTMAP_256:'LIGHTMAP_256',LIGHTMAP_512:'LIGHTMAP_512',LIGHTMAP_1024:'LIGHTMAP_1024',LIGHTMAP_2048:'LIGHTMAP_2048',LIGHTMAP_4096:'LIGHTMAP_4096',LIGHTMAP_MAX:'LIGHTMAP_MAX', };
declare class DatasmithStaticMeshImportOptions { 
	MinLightmapResolution: EDatasmithImportLightmapMin;
	MaxLightmapResolution: EDatasmithImportLightmapMax;
	bGenerateLightmapUVs: boolean;
	bRemoveDegenerates: boolean;
	clone() : DatasmithStaticMeshImportOptions;
	static C(Other: UObject | any): DatasmithStaticMeshImportOptions;
}

declare class DatasmithStaticMeshImportData extends DatasmithAssetImportData { 
	ImportOptions: DatasmithStaticMeshImportOptions;
	static Load(ResourceName: string): DatasmithStaticMeshImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithStaticMeshImportData;
	static GetDefaultObject(): DatasmithStaticMeshImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithStaticMeshImportData;
	static C(Other: UObject | any): DatasmithStaticMeshImportData;
}

declare type EDatasmithCADStitchingTechnique = 'StitchingNone' | 'StitchingHeal' | 'StitchingSew' | 'EDatasmithCADStitchingTechnique_MAX';
declare var EDatasmithCADStitchingTechnique : { StitchingNone:'StitchingNone',StitchingHeal:'StitchingHeal',StitchingSew:'StitchingSew',EDatasmithCADStitchingTechnique_MAX:'EDatasmithCADStitchingTechnique_MAX', };
declare class DatasmithTessellationOptions { 
	ChordTolerance: number;
	MaxEdgeLength: number;
	NormalTolerance: number;
	StitchingTechnique: EDatasmithCADStitchingTechnique;
	clone() : DatasmithTessellationOptions;
	static C(Other: UObject | any): DatasmithTessellationOptions;
}

declare class DatasmithStaticMeshCADImportData extends DatasmithStaticMeshImportData { 
	TessellationOptions: DatasmithTessellationOptions;
	ModelUnit: any;
	ModelTolerance: any;
	ResourcePath: string;
	ResourceFilename: string;
	AuxiliaryFilenames: string[];
	static Load(ResourceName: string): DatasmithStaticMeshCADImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithStaticMeshCADImportData;
	static GetDefaultObject(): DatasmithStaticMeshCADImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithStaticMeshCADImportData;
	static C(Other: UObject | any): DatasmithStaticMeshCADImportData;
}

declare type EDatasmithImportScene = 'NewLevel' | 'CurrentLevel' | 'AssetsOnly' | 'EDatasmithImportScene_MAX';
declare var EDatasmithImportScene : { NewLevel:'NewLevel',CurrentLevel:'CurrentLevel',AssetsOnly:'AssetsOnly',EDatasmithImportScene_MAX:'EDatasmithImportScene_MAX', };
declare class DatasmithImportBaseOptions { 
	SceneHandling: EDatasmithImportScene;
	bIncludeGeometry: boolean;
	bIncludeMaterial: boolean;
	bIncludeLight: boolean;
	bIncludeCamera: boolean;
	bIncludeAnimation: boolean;
	AssetOptions: DatasmithAssetImportOptions;
	StaticMeshOptions: DatasmithStaticMeshImportOptions;
	clone() : DatasmithImportBaseOptions;
	static C(Other: UObject | any): DatasmithImportBaseOptions;
}

declare class DatasmithSceneImportData extends AssetImportData { 
	BaseOptions: DatasmithImportBaseOptions;
	static Load(ResourceName: string): DatasmithSceneImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithSceneImportData;
	static GetDefaultObject(): DatasmithSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithSceneImportData;
	static C(Other: UObject | any): DatasmithSceneImportData;
}

declare class DatasmithOptionsBase extends UObject { 
	static Load(ResourceName: string): DatasmithOptionsBase;
	static Find(Outer: UObject, ResourceName: string): DatasmithOptionsBase;
	static GetDefaultObject(): DatasmithOptionsBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithOptionsBase;
	static C(Other: UObject | any): DatasmithOptionsBase;
}

declare class DatasmithTranslatedSceneImportData extends DatasmithSceneImportData { 
	AdditionalOptions: DatasmithOptionsBase[];
	static Load(ResourceName: string): DatasmithTranslatedSceneImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithTranslatedSceneImportData;
	static GetDefaultObject(): DatasmithTranslatedSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithTranslatedSceneImportData;
	static C(Other: UObject | any): DatasmithTranslatedSceneImportData;
}

declare class DatasmithCADImportSceneData extends DatasmithSceneImportData { 
	TessellationOptions: DatasmithTessellationOptions;
	static Load(ResourceName: string): DatasmithCADImportSceneData;
	static Find(Outer: UObject, ResourceName: string): DatasmithCADImportSceneData;
	static GetDefaultObject(): DatasmithCADImportSceneData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithCADImportSceneData;
	static C(Other: UObject | any): DatasmithCADImportSceneData;
}

declare class DatasmithMDLSceneImportData extends DatasmithSceneImportData { 
	static Load(ResourceName: string): DatasmithMDLSceneImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithMDLSceneImportData;
	static GetDefaultObject(): DatasmithMDLSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithMDLSceneImportData;
	static C(Other: UObject | any): DatasmithMDLSceneImportData;
}

declare class DatasmithGLTFSceneImportData extends DatasmithSceneImportData { 
	Generator: string;
	Version: number;
	Author: string;
	License: string;
	Source: string;
	static Load(ResourceName: string): DatasmithGLTFSceneImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithGLTFSceneImportData;
	static GetDefaultObject(): DatasmithGLTFSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithGLTFSceneImportData;
	static C(Other: UObject | any): DatasmithGLTFSceneImportData;
}

declare class DatasmithStaticMeshGLTFImportData extends DatasmithStaticMeshImportData { 
	SourceMeshName: string;
	static Load(ResourceName: string): DatasmithStaticMeshGLTFImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithStaticMeshGLTFImportData;
	static GetDefaultObject(): DatasmithStaticMeshGLTFImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithStaticMeshGLTFImportData;
	static C(Other: UObject | any): DatasmithStaticMeshGLTFImportData;
}

declare class DatasmithFBXSceneImportData extends DatasmithSceneImportData { 
	bGenerateLightmapUVs: boolean;
	TexturesDir: string;
	IntermediateSerialization: number;
	bColorizeMaterials: boolean;
	static Load(ResourceName: string): DatasmithFBXSceneImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithFBXSceneImportData;
	static GetDefaultObject(): DatasmithFBXSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithFBXSceneImportData;
	static C(Other: UObject | any): DatasmithFBXSceneImportData;
}

declare class DatasmithDeltaGenAssetImportData extends DatasmithAssetImportData { 
	static Load(ResourceName: string): DatasmithDeltaGenAssetImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithDeltaGenAssetImportData;
	static GetDefaultObject(): DatasmithDeltaGenAssetImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithDeltaGenAssetImportData;
	static C(Other: UObject | any): DatasmithDeltaGenAssetImportData;
}

declare class DatasmithDeltaGenSceneImportData extends DatasmithFBXSceneImportData { 
	bMergeNodes: boolean;
	bOptimizeDuplicatedNodes: boolean;
	bRemoveInvisibleNodes: boolean;
	bSimplifyNodeHierarchy: boolean;
	bImportVar: boolean;
	VarPath: string;
	bImportPos: boolean;
	PosPath: string;
	bImportTml: boolean;
	TmlPath: string;
	static Load(ResourceName: string): DatasmithDeltaGenSceneImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithDeltaGenSceneImportData;
	static GetDefaultObject(): DatasmithDeltaGenSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithDeltaGenSceneImportData;
	static C(Other: UObject | any): DatasmithDeltaGenSceneImportData;
}

declare class DatasmithVREDAssetImportData extends DatasmithAssetImportData { 
	static Load(ResourceName: string): DatasmithVREDAssetImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithVREDAssetImportData;
	static GetDefaultObject(): DatasmithVREDAssetImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithVREDAssetImportData;
	static C(Other: UObject | any): DatasmithVREDAssetImportData;
}

declare class DatasmithVREDSceneImportData extends DatasmithFBXSceneImportData { 
	bMergeNodes: boolean;
	bOptimizeDuplicatedNodes: boolean;
	bImportMats: boolean;
	MatsPath: string;
	bImportVar: boolean;
	bCleanVar: boolean;
	VarPath: string;
	bImportLightInfo: boolean;
	LightInfoPath: string;
	bImportClipInfo: boolean;
	ClipInfoPath: string;
	static Load(ResourceName: string): DatasmithVREDSceneImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithVREDSceneImportData;
	static GetDefaultObject(): DatasmithVREDSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithVREDSceneImportData;
	static C(Other: UObject | any): DatasmithVREDSceneImportData;
}

declare class DatasmithIFCSceneImportData extends DatasmithSceneImportData { 
	static Load(ResourceName: string): DatasmithIFCSceneImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithIFCSceneImportData;
	static GetDefaultObject(): DatasmithIFCSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithIFCSceneImportData;
	static C(Other: UObject | any): DatasmithIFCSceneImportData;
}

declare class DatasmithStaticMeshIFCImportData extends DatasmithStaticMeshImportData { 
	SourceGlobalId: string;
	static Load(ResourceName: string): DatasmithStaticMeshIFCImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithStaticMeshIFCImportData;
	static GetDefaultObject(): DatasmithStaticMeshIFCImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithStaticMeshIFCImportData;
	static C(Other: UObject | any): DatasmithStaticMeshIFCImportData;
}

declare class DatasmithCameraLookatTrackingSettingsTemplate { 
	bEnableLookAtTracking: boolean;
	bAllowRoll: boolean;
	ActorToTrack: Actor;
	clone() : DatasmithCameraLookatTrackingSettingsTemplate;
	static C(Other: UObject | any): DatasmithCameraLookatTrackingSettingsTemplate;
}

declare class DatasmithCineCameraActorTemplate extends DatasmithObjectTemplate { 
	LookatTrackingSettings: DatasmithCameraLookatTrackingSettingsTemplate;
	static Load(ResourceName: string): DatasmithCineCameraActorTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithCineCameraActorTemplate;
	static GetDefaultObject(): DatasmithCineCameraActorTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithCineCameraActorTemplate;
	static C(Other: UObject | any): DatasmithCineCameraActorTemplate;
}

declare class DatasmithCameraFilmbackSettingsTemplate { 
	SensorWidth: number;
	SensorHeight: number;
	clone() : DatasmithCameraFilmbackSettingsTemplate;
	static C(Other: UObject | any): DatasmithCameraFilmbackSettingsTemplate;
}

declare class DatasmithCameraLensSettingsTemplate { 
	MaxFStop: number;
	clone() : DatasmithCameraLensSettingsTemplate;
	static C(Other: UObject | any): DatasmithCameraLensSettingsTemplate;
}

declare class DatasmithCameraFocusSettingsTemplate { 
	FocusMethod: ECameraFocusMethod;
	ManualFocusDistance: number;
	clone() : DatasmithCameraFocusSettingsTemplate;
	static C(Other: UObject | any): DatasmithCameraFocusSettingsTemplate;
}

declare class DatasmithPostProcessSettingsTemplate { 
	bOverride_WhiteTemp: boolean;
	bOverride_ColorSaturation: boolean;
	bOverride_VignetteIntensity: boolean;
	bOverride_FilmWhitePoint: boolean;
	bOverride_AutoExposureMethod: boolean;
	bOverride_CameraISO: boolean;
	bOverride_CameraShutterSpeed: boolean;
	bOverride_DepthOfFieldFstop: boolean;
	WhiteTemp: number;
	VignetteIntensity: number;
	FilmWhitePoint: LinearColor;
	ColorSaturation: Vector4;
	AutoExposureMethod: EAutoExposureMethod;
	CameraISO: number;
	CameraShutterSpeed: number;
	DepthOfFieldFstop: number;
	clone() : DatasmithPostProcessSettingsTemplate;
	static C(Other: UObject | any): DatasmithPostProcessSettingsTemplate;
}

declare class DatasmithCineCameraComponentTemplate extends DatasmithObjectTemplate { 
	FilmbackSettings: DatasmithCameraFilmbackSettingsTemplate;
	LensSettings: DatasmithCameraLensSettingsTemplate;
	FocusSettings: DatasmithCameraFocusSettingsTemplate;
	CurrentFocalLength: number;
	CurrentAperture: number;
	PostProcessSettings: DatasmithPostProcessSettingsTemplate;
	static Load(ResourceName: string): DatasmithCineCameraComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithCineCameraComponentTemplate;
	static GetDefaultObject(): DatasmithCineCameraComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithCineCameraComponentTemplate;
	static C(Other: UObject | any): DatasmithCineCameraComponentTemplate;
}

declare class DatasmithContentBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): DatasmithContentBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): DatasmithContentBlueprintLibrary;
	static GetDefaultObject(): DatasmithContentBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithContentBlueprintLibrary;
	static GetDatasmithUserDataValueForKey(UObject: UObject,Key: string): string;
	static GetDatasmithUserDataKeysAndValuesForValue(UObject: UObject,StringToMatch: string,OutKeys?: string[],OutValues?: string[]): {OutKeys: string[], OutValues: string[]};
	static GetDatasmithUserData(UObject: UObject): DatasmithAssetUserData;
	static GetAllObjectsAndValuesForKey(Key: string,ObjectClass: UnrealEngineClass,OutObjects?: UObject[],OutValues?: string[]): {OutObjects: UObject[], OutValues: string[]};
	static GetAllDatasmithUserData(ObjectClass: UnrealEngineClass,OutUserData?: DatasmithAssetUserData[]): {OutUserData: DatasmithAssetUserData[]};
	static C(Other: UObject | any): DatasmithContentBlueprintLibrary;
}

declare class DatasmithCustomActionBase extends UObject { 
	static Load(ResourceName: string): DatasmithCustomActionBase;
	static Find(Outer: UObject, ResourceName: string): DatasmithCustomActionBase;
	static GetDefaultObject(): DatasmithCustomActionBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithCustomActionBase;
	static C(Other: UObject | any): DatasmithCustomActionBase;
}

declare class DatasmithDecalComponentTemplate extends DatasmithObjectTemplate { 
	SortOrder: number;
	DecalSize: Vector;
	Material: MaterialInterface;
	static Load(ResourceName: string): DatasmithDecalComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithDecalComponentTemplate;
	static GetDefaultObject(): DatasmithDecalComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithDecalComponentTemplate;
	static C(Other: UObject | any): DatasmithDecalComponentTemplate;
}

declare class DatasmithImportedSequencesActor extends Actor { 
	ImportedSequences: LevelSequence[];
	static GetDefaultObject(): DatasmithImportedSequencesActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithImportedSequencesActor;
	PlayLevelSequence(SequenceToPlay: LevelSequence): void;
	static C(Other: UObject | any): DatasmithImportedSequencesActor;
}

declare class DatasmithCommonTessellationOptions extends DatasmithOptionsBase { 
	Options: DatasmithTessellationOptions;
	static Load(ResourceName: string): DatasmithCommonTessellationOptions;
	static Find(Outer: UObject, ResourceName: string): DatasmithCommonTessellationOptions;
	static GetDefaultObject(): DatasmithCommonTessellationOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithCommonTessellationOptions;
	static C(Other: UObject | any): DatasmithCommonTessellationOptions;
}

declare type EDatasmithImportSearchPackagePolicy = 'Current' | 'All' | 'EDatasmithImportSearchPackagePolicy_MAX';
declare var EDatasmithImportSearchPackagePolicy : { Current:'Current',All:'All',EDatasmithImportSearchPackagePolicy_MAX:'EDatasmithImportSearchPackagePolicy_MAX', };
declare type EDatasmithImportAssetConflictPolicy = 'Replace' | 'Update' | 'Use' | 'Ignore' | 'EDatasmithImportAssetConflictPolicy_MAX';
declare var EDatasmithImportAssetConflictPolicy : { Replace:'Replace',Update:'Update',Use:'Use',Ignore:'Ignore',EDatasmithImportAssetConflictPolicy_MAX:'EDatasmithImportAssetConflictPolicy_MAX', };
declare type EDatasmithImportActorPolicy = 'Update' | 'Full' | 'Ignore' | 'EDatasmithImportActorPolicy_MAX';
declare var EDatasmithImportActorPolicy : { Update:'Update',Full:'Full',Ignore:'Ignore',EDatasmithImportActorPolicy_MAX:'EDatasmithImportActorPolicy_MAX', };
declare type EDatasmithImportMaterialQuality = 'UseNoFresnelCurves' | 'UseSimplifierFresnelCurves' | 'UseRealFresnelCurves' | 'EDatasmithImportMaterialQuality_MAX';
declare var EDatasmithImportMaterialQuality : { UseNoFresnelCurves:'UseNoFresnelCurves',UseSimplifierFresnelCurves:'UseSimplifierFresnelCurves',UseRealFresnelCurves:'UseRealFresnelCurves',EDatasmithImportMaterialQuality_MAX:'EDatasmithImportMaterialQuality_MAX', };
declare class DatasmithReimportOptions { 
	bUpdateActors: boolean;
	bRespawnDeletedActors: boolean;
	clone() : DatasmithReimportOptions;
	static C(Other: UObject | any): DatasmithReimportOptions;
}

declare class DatasmithImportOptions extends DatasmithOptionsBase { 
	SearchPackagePolicy: EDatasmithImportSearchPackagePolicy;
	MaterialConflictPolicy: EDatasmithImportAssetConflictPolicy;
	TextureConflictPolicy: EDatasmithImportAssetConflictPolicy;
	StaticMeshActorImportPolicy: EDatasmithImportActorPolicy;
	LightImportPolicy: EDatasmithImportActorPolicy;
	CameraImportPolicy: EDatasmithImportActorPolicy;
	OtherActorImportPolicy: EDatasmithImportActorPolicy;
	MaterialQuality: EDatasmithImportMaterialQuality;
	BaseOptions: DatasmithImportBaseOptions;
	ReimportOptions: DatasmithReimportOptions;
	Filename: string;
	FilePath: string;
	static Load(ResourceName: string): DatasmithImportOptions;
	static Find(Outer: UObject, ResourceName: string): DatasmithImportOptions;
	static GetDefaultObject(): DatasmithImportOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithImportOptions;
	static C(Other: UObject | any): DatasmithImportOptions;
}

declare class DatasmithLandscapeTemplate extends DatasmithObjectTemplate { 
	LandscapeMaterial: MaterialInterface;
	StaticLightingLOD: number;
	static Load(ResourceName: string): DatasmithLandscapeTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithLandscapeTemplate;
	static GetDefaultObject(): DatasmithLandscapeTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithLandscapeTemplate;
	static C(Other: UObject | any): DatasmithLandscapeTemplate;
}

declare class DatasmithLightComponentTemplate extends DatasmithObjectTemplate { 
	bVisible: boolean;
	CastShadows: boolean;
	bUseTemperature: boolean;
	bUseIESBrightness: boolean;
	Intensity: number;
	Temperature: number;
	IESBrightnessScale: number;
	LightColor: LinearColor;
	LightFunctionMaterial: MaterialInterface;
	IESTexture: TextureLightProfile;
	static Load(ResourceName: string): DatasmithLightComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithLightComponentTemplate;
	static GetDefaultObject(): DatasmithLightComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithLightComponentTemplate;
	static C(Other: UObject | any): DatasmithLightComponentTemplate;
}

declare class DatasmithStaticParameterSetTemplate { 
	StaticSwitchParameters: any;
	clone() : DatasmithStaticParameterSetTemplate;
	static C(Other: UObject | any): DatasmithStaticParameterSetTemplate;
}

declare class DatasmithMaterialInstanceTemplate extends DatasmithObjectTemplate { 
	ParentMaterial: MaterialInterface;
	ScalarParameterValues: any;
	VectorParameterValues: any;
	TextureParameterValues: any;
	StaticParameters: DatasmithStaticParameterSetTemplate;
	static Load(ResourceName: string): DatasmithMaterialInstanceTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithMaterialInstanceTemplate;
	static GetDefaultObject(): DatasmithMaterialInstanceTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithMaterialInstanceTemplate;
	static C(Other: UObject | any): DatasmithMaterialInstanceTemplate;
}

declare class DatasmithPointLightComponentTemplate extends DatasmithObjectTemplate { 
	IntensityUnits: ELightUnits;
	SourceRadius: number;
	SourceLength: number;
	AttenuationRadius: number;
	static Load(ResourceName: string): DatasmithPointLightComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithPointLightComponentTemplate;
	static GetDefaultObject(): DatasmithPointLightComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithPointLightComponentTemplate;
	static C(Other: UObject | any): DatasmithPointLightComponentTemplate;
}

declare class DatasmithPostProcessVolumeTemplate extends DatasmithObjectTemplate { 
	Settings: DatasmithPostProcessSettingsTemplate;
	bEnabled: boolean;
	bUnbound: boolean;
	static Load(ResourceName: string): DatasmithPostProcessVolumeTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithPostProcessVolumeTemplate;
	static GetDefaultObject(): DatasmithPostProcessVolumeTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithPostProcessVolumeTemplate;
	static C(Other: UObject | any): DatasmithPostProcessVolumeTemplate;
}

declare class DatasmithScene extends UObject { 
	AssetImportData: DatasmithSceneImportData;
	BulkDataVersion: number;
	StaticMeshes: any;
	Textures: any;
	MaterialFunctions: any;
	Materials: any;
	LevelSequences: any;
	LevelVariantSets: any;
	AssetUserData: AssetUserData[];
	static Load(ResourceName: string): DatasmithScene;
	static Find(Outer: UObject, ResourceName: string): DatasmithScene;
	static GetDefaultObject(): DatasmithScene;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithScene;
	static C(Other: UObject | any): DatasmithScene;
}

declare class DatasmithSceneActor extends Actor { 
	Scene: DatasmithScene;
	RelatedActors: any;
	static GetDefaultObject(): DatasmithSceneActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithSceneActor;
	static C(Other: UObject | any): DatasmithSceneActor;
}

declare class DatasmithSceneComponentTemplate extends DatasmithObjectTemplate { 
	RelativeTransform: Transform;
	Mobility: EComponentMobility;
	AttachParent: SceneComponent;
	bVisible: boolean;
	Tags: any;
	static Load(ResourceName: string): DatasmithSceneComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithSceneComponentTemplate;
	static GetDefaultObject(): DatasmithSceneComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithSceneComponentTemplate;
	static C(Other: UObject | any): DatasmithSceneComponentTemplate;
}

declare class DatasmithSkyLightComponentTemplate extends DatasmithObjectTemplate { 
	SourceType: ESkyLightSourceType;
	CubemapResolution: number;
	Cubemap: TextureCube;
	static Load(ResourceName: string): DatasmithSkyLightComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithSkyLightComponentTemplate;
	static GetDefaultObject(): DatasmithSkyLightComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithSkyLightComponentTemplate;
	static C(Other: UObject | any): DatasmithSkyLightComponentTemplate;
}

declare class DatasmithSpotLightComponentTemplate extends DatasmithObjectTemplate { 
	InnerConeAngle: number;
	OuterConeAngle: number;
	static Load(ResourceName: string): DatasmithSpotLightComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithSpotLightComponentTemplate;
	static GetDefaultObject(): DatasmithSpotLightComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithSpotLightComponentTemplate;
	static C(Other: UObject | any): DatasmithSpotLightComponentTemplate;
}

declare class DatasmithStaticMeshComponentTemplate extends DatasmithObjectTemplate { 
	StaticMesh: StaticMesh;
	OverrideMaterials: MaterialInterface[];
	static Load(ResourceName: string): DatasmithStaticMeshComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithStaticMeshComponentTemplate;
	static GetDefaultObject(): DatasmithStaticMeshComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithStaticMeshComponentTemplate;
	static C(Other: UObject | any): DatasmithStaticMeshComponentTemplate;
}

declare class DatasmithMeshSectionInfoMapTemplate { 
	Map: any;
	clone() : DatasmithMeshSectionInfoMapTemplate;
	static C(Other: UObject | any): DatasmithMeshSectionInfoMapTemplate;
}

declare class DatasmithMeshBuildSettingsTemplate { 
	bUseMikkTSpace: boolean;
	bRecomputeNormals: boolean;
	bRecomputeTangents: boolean;
	bRemoveDegenerates: boolean;
	bBuildAdjacencyBuffer: boolean;
	bUseHighPrecisionTangentBasis: boolean;
	bUseFullPrecisionUVs: boolean;
	bGenerateLightmapUVs: boolean;
	MinLightmapResolution: number;
	SrcLightmapIndex: number;
	DstLightmapIndex: number;
	clone() : DatasmithMeshBuildSettingsTemplate;
	static C(Other: UObject | any): DatasmithMeshBuildSettingsTemplate;
}

declare class DatasmithStaticMaterialTemplate { 
	MaterialSlotName: string;
	MaterialInterface: MaterialInterface;
	clone() : DatasmithStaticMaterialTemplate;
	static C(Other: UObject | any): DatasmithStaticMaterialTemplate;
}

declare class DatasmithStaticMeshTemplate extends DatasmithObjectTemplate { 
	SectionInfoMap: DatasmithMeshSectionInfoMapTemplate;
	LightMapCoordinateIndex: number;
	LightMapResolution: number;
	BuildSettings: DatasmithMeshBuildSettingsTemplate[];
	StaticMaterials: DatasmithStaticMaterialTemplate[];
	static Load(ResourceName: string): DatasmithStaticMeshTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithStaticMeshTemplate;
	static GetDefaultObject(): DatasmithStaticMeshTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithStaticMeshTemplate;
	static C(Other: UObject | any): DatasmithStaticMeshTemplate;
}

declare type EClothMassMode = 'UniformMass' | 'TotalMass' | 'Density' | 'MaxClothMassMode' | 'EClothMassMode_MAX';
declare var EClothMassMode : { UniformMass:'UniformMass',TotalMass:'TotalMass',Density:'Density',MaxClothMassMode:'MaxClothMassMode',EClothMassMode_MAX:'EClothMassMode_MAX', };
declare class ChaosClothWeightedValue { 
	Low: number;
	High: number;
	clone() : ChaosClothWeightedValue;
	static C(Other: UObject | any): ChaosClothWeightedValue;
}

declare type EChaosClothTetherMode = 'FastTetherFastLength' | 'AccurateTetherFastLength' | 'AccurateTetherAccurateLength' | 'MaxChaosClothTetherMode' | 'EChaosClothTetherMode_MAX';
declare var EChaosClothTetherMode : { FastTetherFastLength:'FastTetherFastLength',AccurateTetherFastLength:'AccurateTetherFastLength',AccurateTetherAccurateLength:'AccurateTetherAccurateLength',MaxChaosClothTetherMode:'MaxChaosClothTetherMode',EChaosClothTetherMode_MAX:'EChaosClothTetherMode_MAX', };
declare class ChaosClothConfig extends ClothConfigCommon { 
	MassMode: EClothMassMode;
	UniformMass: number;
	TotalMass: number;
	Density: number;
	MinPerParticleMass: number;
	EdgeStiffness: number;
	BendingStiffness: number;
	bUseBendingElements: boolean;
	AreaStiffness: number;
	VolumeStiffness: number;
	TetherStiffness: ChaosClothWeightedValue;
	LimitScale: number;
	bUseGeodesicDistance: boolean;
	ShapeTargetStiffness: number;
	CollisionThickness: number;
	FrictionCoefficient: number;
	bUseCCD: boolean;
	bUseSelfCollisions: boolean;
	SelfCollisionThickness: number;
	bUseLegacyBackstop: boolean;
	DampingCoefficient: number;
	bUsePointBasedWindModel: boolean;
	DragCoefficient: number;
	LiftCoefficient: number;
	bUseGravityOverride: boolean;
	GravityScale: number;
	Gravity: Vector;
	AnimDriveStiffness: ChaosClothWeightedValue;
	AnimDriveDamping: ChaosClothWeightedValue;
	LinearVelocityScale: Vector;
	AngularVelocityScale: number;
	FictitiousAngularScale: number;
	bUseTetrahedralConstraints: boolean;
	bUseThinShellVolumeConstraints: boolean;
	bUseContinuousCollisionDetection: boolean;
	TetherMode: EChaosClothTetherMode;
	AnimDriveSpringStiffness: number;
	StrainLimitingStiffness: number;
	static Load(ResourceName: string): ChaosClothConfig;
	static Find(Outer: UObject, ResourceName: string): ChaosClothConfig;
	static GetDefaultObject(): ChaosClothConfig;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosClothConfig;
	static C(Other: UObject | any): ChaosClothConfig;
}

declare class ChaosClothSharedSimConfig extends ClothSharedConfigCommon { 
	IterationCount: number;
	SubdivisionCount: number;
	SelfCollisionThickness: number;
	CollisionThickness: number;
	bUseDampingOverride: boolean;
	Damping: number;
	bUseGravityOverride: boolean;
	GravityScale: number;
	Gravity: Vector;
	bUseLocalSpaceSimulation: boolean;
	bUseXPBDConstraints: boolean;
	static Load(ResourceName: string): ChaosClothSharedSimConfig;
	static Find(Outer: UObject, ResourceName: string): ChaosClothSharedSimConfig;
	static GetDefaultObject(): ChaosClothSharedSimConfig;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosClothSharedSimConfig;
	static C(Other: UObject | any): ChaosClothSharedSimConfig;
}

declare class ChaosClothingSimulationFactory extends ClothingSimulationFactory { 
	static Load(ResourceName: string): ChaosClothingSimulationFactory;
	static Find(Outer: UObject, ResourceName: string): ChaosClothingSimulationFactory;
	static GetDefaultObject(): ChaosClothingSimulationFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosClothingSimulationFactory;
	static C(Other: UObject | any): ChaosClothingSimulationFactory;
}

declare class ChaosClothingInteractor extends ClothingInteractor { 
	static Load(ResourceName: string): ChaosClothingInteractor;
	static Find(Outer: UObject, ResourceName: string): ChaosClothingInteractor;
	static GetDefaultObject(): ChaosClothingInteractor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosClothingInteractor;
	SetVelocityScale(LinearVelocityScale: Vector,AngularVelocityScale: number,FictitiousAngularScale: number): void;
	SetMaterialLinear(EdgeStiffness: number,BendingStiffness: number,AreaStiffness: number): void;
	SetLongRangeAttachmentLinear(TetherStiffness: number): void;
	SetLongRangeAttachment(TetherStiffness: Vector2D): void;
	SetGravity(GravityScale: number,bIsGravityOverridden: boolean,GravityOverride: Vector): void;
	SetDamping(DampingCoefficient: number): void;
	SetCollision(CollisionThickness: number,FrictionCoefficient: number,bUseCCD: boolean,SelfCollisionThickness: number): void;
	SetAnimDriveLinear(AnimDriveStiffness: number): void;
	SetAnimDrive(AnimDriveStiffness: Vector2D,AnimDriveDamping: Vector2D): void;
	SetAerodynamics(DragCoefficient: number,LiftCoefficient: number,WindVelocity: Vector): void;
	ResetAndTeleport(bReset: boolean,bTeleport: boolean): void;
	static C(Other: UObject | any): ChaosClothingInteractor;
}

declare class ChaosClothingSimulationInteractor extends ClothingSimulationInteractor { 
	static Load(ResourceName: string): ChaosClothingSimulationInteractor;
	static Find(Outer: UObject, ResourceName: string): ChaosClothingSimulationInteractor;
	static GetDefaultObject(): ChaosClothingSimulationInteractor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosClothingSimulationInteractor;
	static C(Other: UObject | any): ChaosClothingSimulationInteractor;
}

declare type EMagicLeapPrivilege = 'Invalid' | 'BatteryInfo' | 'CameraCapture' | 'ComputerVision' | 'WorldReconstruction' | 'InAppPurchase' | 'AudioCaptureMic' | 'DrmCertificates' | 'Occlusion' | 'LowLatencyLightwear' | 'Internet' | 'IdentityRead' | 'BackgroundDownload' | 'BackgroundUpload' | 'MediaDrm' | 'Media' | 'MediaMetadata' | 'PowerInfo' | 'LocalAreaNetwork' | 'VoiceInput' | 'Documents' | 'ConnectBackgroundMusicService' | 'RegisterBackgroundMusicService' | 'PcfRead' | 'PwFoundObjRead' | 'NormalNotificationsUsage' | 'MusicService' | 'ControllerPose' | 'GesturesSubscribe' | 'GesturesConfig' | 'AddressBookRead' | 'AddressBookWrite' | 'AddressBookBasicAccess' | 'CoarseLocation' | 'FineLocation' | 'HandMesh' | 'WifiStatusRead' | 'SocialConnectionsInvitesAccess' | 'SecureBrowserWindow' | 'EMagicLeapPrivilege_MAX';
declare var EMagicLeapPrivilege : { Invalid:'Invalid',BatteryInfo:'BatteryInfo',CameraCapture:'CameraCapture',ComputerVision:'ComputerVision',WorldReconstruction:'WorldReconstruction',InAppPurchase:'InAppPurchase',AudioCaptureMic:'AudioCaptureMic',DrmCertificates:'DrmCertificates',Occlusion:'Occlusion',LowLatencyLightwear:'LowLatencyLightwear',Internet:'Internet',IdentityRead:'IdentityRead',BackgroundDownload:'BackgroundDownload',BackgroundUpload:'BackgroundUpload',MediaDrm:'MediaDrm',Media:'Media',MediaMetadata:'MediaMetadata',PowerInfo:'PowerInfo',LocalAreaNetwork:'LocalAreaNetwork',VoiceInput:'VoiceInput',Documents:'Documents',ConnectBackgroundMusicService:'ConnectBackgroundMusicService',RegisterBackgroundMusicService:'RegisterBackgroundMusicService',PcfRead:'PcfRead',PwFoundObjRead:'PwFoundObjRead',NormalNotificationsUsage:'NormalNotificationsUsage',MusicService:'MusicService',ControllerPose:'ControllerPose',GesturesSubscribe:'GesturesSubscribe',GesturesConfig:'GesturesConfig',AddressBookRead:'AddressBookRead',AddressBookWrite:'AddressBookWrite',AddressBookBasicAccess:'AddressBookBasicAccess',CoarseLocation:'CoarseLocation',FineLocation:'FineLocation',HandMesh:'HandMesh',WifiStatusRead:'WifiStatusRead',SocialConnectionsInvitesAccess:'SocialConnectionsInvitesAccess',SecureBrowserWindow:'SecureBrowserWindow',EMagicLeapPrivilege_MAX:'EMagicLeapPrivilege_MAX', };
declare class MagicLeapPrivilegesFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MagicLeapPrivilegesFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): MagicLeapPrivilegesFunctionLibrary;
	static GetDefaultObject(): MagicLeapPrivilegesFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapPrivilegesFunctionLibrary;
	static RequestPrivilege(Privilege: EMagicLeapPrivilege): boolean;
	static CheckPrivilege(Privilege: EMagicLeapPrivilege): boolean;
	static C(Other: UObject | any): MagicLeapPrivilegesFunctionLibrary;
}

declare type PurchaseType = 'Consumable' | 'Nonconsumable' | 'Undefined' | 'PurchaseType_MAX';
declare var PurchaseType : { Consumable:'Consumable',Nonconsumable:'Nonconsumable',Undefined:'Undefined',PurchaseType_MAX:'PurchaseType_MAX', };
declare class PurchaseItemDetails { 
	Price: string;
	Name: string;
	Type: PurchaseType;
	clone() : PurchaseItemDetails;
	static C(Other: UObject | any): PurchaseItemDetails;
}

declare class PurchaseConfirmation { 
	PackageName: string;
	Type: PurchaseType;
	clone() : PurchaseConfirmation;
	static C(Other: UObject | any): PurchaseConfirmation;
}

declare class InAppPurchaseComponent extends ActorComponent { 
	InAppPurchaseLogMessage: UnrealEngineMulticastDelegate<(LogMessage: string) => void>;
	GetItemsDetailsSuccess: UnrealEngineMulticastDelegate<(ItemsDetails: PurchaseItemDetails[]) => void>;
	GetItemsDetailsFailure: UnrealEngineMulticastDelegate<() => void>;
	PurchaseConfirmationSuccess: UnrealEngineMulticastDelegate<(PurchaseConfirmations: PurchaseConfirmation) => void>;
	PurchaseConfirmationFailure: UnrealEngineMulticastDelegate<() => void>;
	GetPurchaseHistorySuccess: UnrealEngineMulticastDelegate<(PurchaseHistory: PurchaseConfirmation[]) => void>;
	GetPurchaseHistoryFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): InAppPurchaseComponent;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseComponent;
	static GetDefaultObject(): InAppPurchaseComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseComponent;
	TryPurchaseItemAsync(ItemDetails: PurchaseItemDetails): boolean;
	TryGetPurchaseHistoryAsync(InNumPages: number): boolean;
	TryGetItemsDetailsAsync(ItemIDs: string[]): boolean;
	static C(Other: UObject | any): InAppPurchaseComponent;
}

declare type EFocusLostReason = 'EFocusLostReason_Invalid' | 'EFocusLostReason_System' | 'EFocusLostReason_MAX';
declare var EFocusLostReason : { EFocusLostReason_Invalid:'EFocusLostReason_Invalid',EFocusLostReason_System:'EFocusLostReason_System',EFocusLostReason_MAX:'EFocusLostReason_MAX', };
declare class LuminApplicationLifecycleComponent extends ApplicationLifecycleComponent { 
	DeviceHasReactivatedDelegate: UnrealEngineMulticastDelegate<() => void>;
	DeviceWillEnterRealityModeDelegate: UnrealEngineMulticastDelegate<() => void>;
	DeviceWillGoInStandbyDelegate: UnrealEngineMulticastDelegate<() => void>;
	FocusLostDelegate: UnrealEngineMulticastDelegate<(reason: EFocusLostReason) => void>;
	FocusGainedDelegate: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): LuminApplicationLifecycleComponent;
	static Find(Outer: UObject, ResourceName: string): LuminApplicationLifecycleComponent;
	static GetDefaultObject(): LuminApplicationLifecycleComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LuminApplicationLifecycleComponent;
	static C(Other: UObject | any): LuminApplicationLifecycleComponent;
}

declare class MagicLeapHeadTrackingNotificationsComponent extends VRNotificationsComponent { 
	OnHeadTrackingLost: UnrealEngineMulticastDelegate<() => void>;
	OnHeadTrackingRecovered: UnrealEngineMulticastDelegate<() => void>;
	OnHeadTrackingRecoveryFailed: UnrealEngineMulticastDelegate<() => void>;
	OnHeadTrackingNewSessionStarted: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): MagicLeapHeadTrackingNotificationsComponent;
	static Find(Outer: UObject, ResourceName: string): MagicLeapHeadTrackingNotificationsComponent;
	static GetDefaultObject(): MagicLeapHeadTrackingNotificationsComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapHeadTrackingNotificationsComponent;
	static C(Other: UObject | any): MagicLeapHeadTrackingNotificationsComponent;
}

declare type EMagicLeapHeadTrackingMode = 'PositionAndOrientation' | 'Unavailable' | 'Unknown' | 'EMagicLeapHeadTrackingMode_MAX';
declare var EMagicLeapHeadTrackingMode : { PositionAndOrientation:'PositionAndOrientation',Unavailable:'Unavailable',Unknown:'Unknown',EMagicLeapHeadTrackingMode_MAX:'EMagicLeapHeadTrackingMode_MAX', };
declare type EMagicLeapHeadTrackingError = 'None' | 'NotEnoughFeatures' | 'LowLight' | 'Unknown' | 'EMagicLeapHeadTrackingError_MAX';
declare var EMagicLeapHeadTrackingError : { None:'None',NotEnoughFeatures:'NotEnoughFeatures',LowLight:'LowLight',Unknown:'Unknown',EMagicLeapHeadTrackingError_MAX:'EMagicLeapHeadTrackingError_MAX', };
declare class MagicLeapHeadTrackingState { 
	Mode: EMagicLeapHeadTrackingMode;
	Error: EMagicLeapHeadTrackingError;
	Confidence: number;
	clone() : MagicLeapHeadTrackingState;
	static C(Other: UObject | any): MagicLeapHeadTrackingState;
	GetHeadTrackingState(): {State: MagicLeapHeadTrackingState, $: boolean};
	static GetHeadTrackingState(State?: MagicLeapHeadTrackingState): {State: MagicLeapHeadTrackingState, $: boolean};
}

declare class MagicLeapGraphicsClientPerformanceInfo { 
	FrameStartCPUCompAcquireCPUTimeMs: number;
	FrameStartCPUFrameEndGPUTimeMs: number;
	FrameStartCPUFrameStartCPUTimeMs: number;
	FrameDurationCPUTimeMs: number;
	FrameDurationGPUTimeMs: number;
	FrameInternalDurationCPUTimeMs: number;
	FrameInternalDurationGPUTimeMs: number;
	clone() : MagicLeapGraphicsClientPerformanceInfo;
	static C(Other: UObject | any): MagicLeapGraphicsClientPerformanceInfo;
	GetGraphicsClientPerformanceInfo(): {PerformanceInfo: MagicLeapGraphicsClientPerformanceInfo, $: boolean};
	static GetGraphicsClientPerformanceInfo(PerformanceInfo?: MagicLeapGraphicsClientPerformanceInfo): {PerformanceInfo: MagicLeapGraphicsClientPerformanceInfo, $: boolean};
}

declare class MagicLeapHMDFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MagicLeapHMDFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): MagicLeapHMDFunctionLibrary;
	static GetDefaultObject(): MagicLeapHMDFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapHMDFunctionLibrary;
	static SetStabilizationDepthActor(InStabilizationDepthActor: Actor,bSetFocusActor: boolean): void;
	static SetFocusActor(InFocusActor: Actor,bSetStabilizationActor: boolean): void;
	static SetBaseRotation(InBaseRotation: Rotator): void;
	static SetBasePosition(InBasePosition: Vector): void;
	static SetBaseOrientation(InBaseOrientation: Quat): void;
	static SetAppReady(): boolean;
	static IsRunningOnMagicLeapHMD(): boolean;
	static GetPlatformAPILevel(): number;
	static GetMLSDKVersionRevision(): number;
	static GetMLSDKVersionMinor(): number;
	static GetMLSDKVersionMajor(): number;
	static GetMLSDKVersion(): string;
	static GetMinimumAPILevel(): number;
	static GetHeadTrackingState(State?: MagicLeapHeadTrackingState): {State: MagicLeapHeadTrackingState, $: boolean};
	static GetHeadTrackingMapEvents(MapEvents?: any): {MapEvents: any, $: boolean};
	static GetGraphicsClientPerformanceInfo(PerformanceInfo?: MagicLeapGraphicsClientPerformanceInfo): {PerformanceInfo: MagicLeapGraphicsClientPerformanceInfo, $: boolean};
	static C(Other: UObject | any): MagicLeapHMDFunctionLibrary;
}

declare type EMagicLeapMeshType = 'Triangles' | 'PointCloud' | 'EMagicLeapMeshType_MAX';
declare var EMagicLeapMeshType : { Triangles:'Triangles',PointCloud:'PointCloud',EMagicLeapMeshType_MAX:'EMagicLeapMeshType_MAX', };
declare type EMagicLeapMeshLOD = 'Minimum' | 'Medium' | 'Maximum' | 'EMagicLeapMeshLOD_MAX';
declare var EMagicLeapMeshLOD : { Minimum:'Minimum',Medium:'Medium',Maximum:'Maximum',EMagicLeapMeshLOD_MAX:'EMagicLeapMeshLOD_MAX', };
declare type EMagicLeapMeshVertexColorMode = 'None' | 'Confidence' | 'Block' | 'LOD' | 'EMagicLeapMeshVertexColorMode_MAX';
declare var EMagicLeapMeshVertexColorMode : { None:'None',Confidence:'Confidence',Block:'Block',LOD:'LOD',EMagicLeapMeshVertexColorMode_MAX:'EMagicLeapMeshVertexColorMode_MAX', };
declare type EMagicLeapMeshState = 'New' | 'Updated' | 'Deleted' | 'Unchanged' | 'EMagicLeapMeshState_MAX';
declare var EMagicLeapMeshState : { New:'New',Updated:'Updated',Deleted:'Deleted',Unchanged:'Unchanged',EMagicLeapMeshState_MAX:'EMagicLeapMeshState_MAX', };
declare class MagicLeapMeshBlockInfo { 
	BlockID: Guid;
	BlockPosition: Vector;
	BlockOrientation: Rotator;
	BlockDimensions: Vector;
	Timestamp: Timespan;
	BlockState: EMagicLeapMeshState;
	clone() : MagicLeapMeshBlockInfo;
	static C(Other: UObject | any): MagicLeapMeshBlockInfo;
}

declare class MagicLeapTrackingMeshInfo { 
	Timestamp: Timespan;
	BlockData: MagicLeapMeshBlockInfo[];
	clone() : MagicLeapTrackingMeshInfo;
	static C(Other: UObject | any): MagicLeapTrackingMeshInfo;
}

declare class MagicLeapMeshBlockRequest { 
	BlockID: Guid;
	LevelOfDetail: EMagicLeapMeshLOD;
	clone() : MagicLeapMeshBlockRequest;
	static C(Other: UObject | any): MagicLeapMeshBlockRequest;
}

declare class MagicLeapMeshTrackerComponent extends SceneComponent { 
	OnMeshTrackerUpdated: UnrealEngineMulticastDelegate<(ID: Guid, Vertices: Vector[], Triangles: number[], Normals: Vector[], Confidence: number[]) => void>;
	ScanWorld: boolean;
	MeshType: EMagicLeapMeshType;
	BoundingVolume: BoxComponent;
	LevelOfDetail: EMagicLeapMeshLOD;
	PerimeterOfGapsToFill: number;
	Planarize: boolean;
	DisconnectedSectionArea: number;
	RequestNormals: boolean;
	RequestVertexConfidence: boolean;
	VertexColorMode: EMagicLeapMeshVertexColorMode;
	BlockVertexColors: Color[];
	VertexColorFromConfidenceZero: LinearColor;
	VertexColorFromConfidenceOne: LinearColor;
	RemoveOverlappingTriangles: boolean;
	MRMesh: MRMeshComponent;
	BricksPerFrame: number;
	static Load(ResourceName: string): MagicLeapMeshTrackerComponent;
	static Find(Outer: UObject, ResourceName: string): MagicLeapMeshTrackerComponent;
	static GetDefaultObject(): MagicLeapMeshTrackerComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapMeshTrackerComponent;
	SelectMeshBlocks(NewMeshInfo: MagicLeapTrackingMeshInfo,RequestedMesh?: MagicLeapMeshBlockRequest[]): {RequestedMesh: MagicLeapMeshBlockRequest[]};
	GetNumQueuedBlockUpdates(): number;
	DisconnectMRMesh(InMRMeshPtr: MRMeshComponent): void;
	DisconnectBlockSelector(): void;
	ConnectMRMesh(InMRMeshPtr: MRMeshComponent): void;
	static C(Other: UObject | any): MagicLeapMeshTrackerComponent;
}

declare class MagicLeapSettings extends UObject { 
	bEnableZI: boolean;
	bUseVulkanForZI: boolean;
	bUseMLAudioForZI: boolean;
	static Load(ResourceName: string): MagicLeapSettings;
	static Find(Outer: UObject, ResourceName: string): MagicLeapSettings;
	static GetDefaultObject(): MagicLeapSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapSettings;
	static C(Other: UObject | any): MagicLeapSettings;
}

declare class MagicLeapMeshBlockSelectorInterface extends Interface { 
	static Load(ResourceName: string): MagicLeapMeshBlockSelectorInterface;
	static Find(Outer: UObject, ResourceName: string): MagicLeapMeshBlockSelectorInterface;
	static GetDefaultObject(): MagicLeapMeshBlockSelectorInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapMeshBlockSelectorInterface;
	SelectMeshBlocks(NewMeshInfo: MagicLeapTrackingMeshInfo,RequestedMesh?: MagicLeapMeshBlockRequest[]): {RequestedMesh: MagicLeapMeshBlockRequest[]};
	static C(Other: UObject | any): MagicLeapMeshBlockSelectorInterface;
}

declare class MagicLeapRaycastComponent extends ActorComponent { 
	static Load(ResourceName: string): MagicLeapRaycastComponent;
	static Find(Outer: UObject, ResourceName: string): MagicLeapRaycastComponent;
	static GetDefaultObject(): MagicLeapRaycastComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapRaycastComponent;
	static C(Other: UObject | any): MagicLeapRaycastComponent;
}

declare class MagicLeapRaycastFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MagicLeapRaycastFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): MagicLeapRaycastFunctionLibrary;
	static GetDefaultObject(): MagicLeapRaycastFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapRaycastFunctionLibrary;
	static MakeRaycastQueryParams(Position: Vector,Direction: Vector,UpVector: Vector,Width: number,Height: number,HorizontalFovDegrees: number,CollideWithUnobserved: boolean,UserData: number): MagicLeapRaycastQueryParams;
	static C(Other: UObject | any): MagicLeapRaycastFunctionLibrary;
}

declare class WmfMediaSettings extends UObject { 
	AllowNonStandardCodecs: boolean;
	LowLatency: boolean;
	NativeAudioOut: boolean;
	HardwareAcceleratedVideoDecoding: boolean;
	static Load(ResourceName: string): WmfMediaSettings;
	static Find(Outer: UObject, ResourceName: string): WmfMediaSettings;
	static GetDefaultObject(): WmfMediaSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WmfMediaSettings;
	static C(Other: UObject | any): WmfMediaSettings;
}

declare class EyeTrackerStereoGazeData { 
	LeftEyeOrigin: Vector;
	LeftEyeDirection: Vector;
	RightEyeOrigin: Vector;
	RightEyeDirection: Vector;
	FixationPoint: Vector;
	ConfidenceValue: number;
	clone() : EyeTrackerStereoGazeData;
	static C(Other: UObject | any): EyeTrackerStereoGazeData;
	GetStereoGazeData(): {OutGazeData: EyeTrackerStereoGazeData, $: boolean};
	static GetStereoGazeData(OutGazeData?: EyeTrackerStereoGazeData): {OutGazeData: EyeTrackerStereoGazeData, $: boolean};
}

declare class EyeTrackerGazeData { 
	GazeOrigin: Vector;
	GazeDirection: Vector;
	FixationPoint: Vector;
	ConfidenceValue: number;
	clone() : EyeTrackerGazeData;
	static C(Other: UObject | any): EyeTrackerGazeData;
	GetGazeData(): {OutGazeData: EyeTrackerGazeData, $: boolean};
	static GetGazeData(OutGazeData?: EyeTrackerGazeData): {OutGazeData: EyeTrackerGazeData, $: boolean};
}

declare class EyeTrackerFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): EyeTrackerFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): EyeTrackerFunctionLibrary;
	static GetDefaultObject(): EyeTrackerFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EyeTrackerFunctionLibrary;
	static SetEyeTrackedPlayer(PlayerController: PlayerController): void;
	static IsStereoGazeDataAvailable(): boolean;
	static IsEyeTrackerConnected(): boolean;
	static GetStereoGazeData(OutGazeData?: EyeTrackerStereoGazeData): {OutGazeData: EyeTrackerStereoGazeData, $: boolean};
	static GetGazeData(OutGazeData?: EyeTrackerGazeData): {OutGazeData: EyeTrackerGazeData, $: boolean};
	static C(Other: UObject | any): EyeTrackerFunctionLibrary;
}

declare class LiveLinkBasicFrameInterpolationProcessor extends LiveLinkFrameInterpolationProcessor { 
	bInterpolatePropertyValues: boolean;
	static Load(ResourceName: string): LiveLinkBasicFrameInterpolationProcessor;
	static Find(Outer: UObject, ResourceName: string): LiveLinkBasicFrameInterpolationProcessor;
	static GetDefaultObject(): LiveLinkBasicFrameInterpolationProcessor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkBasicFrameInterpolationProcessor;
	static C(Other: UObject | any): LiveLinkBasicFrameInterpolationProcessor;
}

declare class LiveLinkAnimationFrameInterpolationProcessor extends LiveLinkBasicFrameInterpolationProcessor { 
	static Load(ResourceName: string): LiveLinkAnimationFrameInterpolationProcessor;
	static Find(Outer: UObject, ResourceName: string): LiveLinkAnimationFrameInterpolationProcessor;
	static GetDefaultObject(): LiveLinkAnimationFrameInterpolationProcessor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkAnimationFrameInterpolationProcessor;
	static C(Other: UObject | any): LiveLinkAnimationFrameInterpolationProcessor;
}

declare class LiveLinkAnimationRoleToTransform extends LiveLinkFrameTranslator { 
	BoneName: string;
	static Load(ResourceName: string): LiveLinkAnimationRoleToTransform;
	static Find(Outer: UObject, ResourceName: string): LiveLinkAnimationRoleToTransform;
	static GetDefaultObject(): LiveLinkAnimationRoleToTransform;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkAnimationRoleToTransform;
	static C(Other: UObject | any): LiveLinkAnimationRoleToTransform;
}

declare class LiveLinkAnimationVirtualSubject extends LiveLinkVirtualSubject { 
	bAppendSubjectNameToBones: boolean;
	static Load(ResourceName: string): LiveLinkAnimationVirtualSubject;
	static Find(Outer: UObject, ResourceName: string): LiveLinkAnimationVirtualSubject;
	static GetDefaultObject(): LiveLinkAnimationVirtualSubject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkAnimationVirtualSubject;
	static C(Other: UObject | any): LiveLinkAnimationVirtualSubject;
}

declare type ELiveLinkAxis = 'X' | 'Y' | 'Z' | 'XNeg' | 'YNeg' | 'ZNeg' | 'ELiveLinkAxis_MAX';
declare var ELiveLinkAxis : { X:'X',Y:'Y',Z:'Z',XNeg:'XNeg',YNeg:'YNeg',ZNeg:'ZNeg',ELiveLinkAxis_MAX:'ELiveLinkAxis_MAX', };
declare class LiveLinkTransformAxisSwitchPreProcessor extends LiveLinkFramePreProcessor { 
	OrientationAxisX: ELiveLinkAxis;
	OrientationAxisY: ELiveLinkAxis;
	OrientationAxisZ: ELiveLinkAxis;
	TranslationAxisX: ELiveLinkAxis;
	TranslationAxisY: ELiveLinkAxis;
	TranslationAxisZ: ELiveLinkAxis;
	FrontAxis: ELiveLinkAxis;
	RightAxis: ELiveLinkAxis;
	UpAxis: ELiveLinkAxis;
	bUseOffsetPosition: boolean;
	bUseOffsetOrientation: boolean;
	OffsetPosition: Vector;
	OffsetOrientation: Rotator;
	static Load(ResourceName: string): LiveLinkTransformAxisSwitchPreProcessor;
	static Find(Outer: UObject, ResourceName: string): LiveLinkTransformAxisSwitchPreProcessor;
	static GetDefaultObject(): LiveLinkTransformAxisSwitchPreProcessor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkTransformAxisSwitchPreProcessor;
	static C(Other: UObject | any): LiveLinkTransformAxisSwitchPreProcessor;
}

declare class LiveLinkAnimationAxisSwitchPreProcessor extends LiveLinkTransformAxisSwitchPreProcessor { 
	static Load(ResourceName: string): LiveLinkAnimationAxisSwitchPreProcessor;
	static Find(Outer: UObject, ResourceName: string): LiveLinkAnimationAxisSwitchPreProcessor;
	static GetDefaultObject(): LiveLinkAnimationAxisSwitchPreProcessor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkAnimationAxisSwitchPreProcessor;
	static C(Other: UObject | any): LiveLinkAnimationAxisSwitchPreProcessor;
}

declare class LiveLinkWorldTime { 
	Time: any;
	Offset: any;
	clone() : LiveLinkWorldTime;
	static C(Other: UObject | any): LiveLinkWorldTime;
}

declare class LiveLinkMetaData { 
	StringMetadata: any;
	SceneTime: QualifiedFrameTime;
	clone() : LiveLinkMetaData;
	static C(Other: UObject | any): LiveLinkMetaData;
}

declare class LiveLinkBaseFrameData { 
	WorldTime: LiveLinkWorldTime;
	MetaData: LiveLinkMetaData;
	PropertyValues: number[];
	clone() : LiveLinkBaseFrameData;
	static C(Other: UObject | any): LiveLinkBaseFrameData;
}

declare class LiveLinkAnimationFrameData extends LiveLinkBaseFrameData { 
	Transforms: Transform[];
	clone() : LiveLinkAnimationFrameData;
	static C(Other: UObject | any): LiveLinkAnimationFrameData;
}

declare class LiveLinkBaseStaticData { 
	PropertyNames: string[];
	clone() : LiveLinkBaseStaticData;
	static C(Other: UObject | any): LiveLinkBaseStaticData;
}

declare class LiveLinkSkeletonStaticData extends LiveLinkBaseStaticData { 
	BoneNames: string[];
	BoneParents: number[];
	clone() : LiveLinkSkeletonStaticData;
	static C(Other: UObject | any): LiveLinkSkeletonStaticData;
}

declare class LiveLinkBasicBlueprintData extends LiveLinkBaseBlueprintData { 
	StaticData: LiveLinkBaseStaticData;
	FrameData: LiveLinkBaseFrameData;
	clone() : LiveLinkBasicBlueprintData;
	static C(Other: UObject | any): LiveLinkBasicBlueprintData;
	GetPropertyValue(PropertyName?: string,Value?: number): {BasicData: LiveLinkBasicBlueprintData, Value: number, $: boolean};
	static GetPropertyValue(BasicData?: LiveLinkBasicBlueprintData,PropertyName?: string,Value?: number): {BasicData: LiveLinkBasicBlueprintData, Value: number, $: boolean};
}

declare class SubjectMetadata { 
	StringMetadata: any;
	SceneTimecode: Timecode;
	SceneFramerate: FrameRate;
	clone() : SubjectMetadata;
	static C(Other: UObject | any): SubjectMetadata;
}

declare class LiveLinkTransform { 
	clone() : LiveLinkTransform;
	static C(Other: UObject | any): LiveLinkTransform;
	ChildCount(): {LiveLinkTransform: LiveLinkTransform, $: number};
	ComponentSpaceTransform(Transform?: Transform): {LiveLinkTransform: LiveLinkTransform, Transform: Transform};
	GetChildren(Children?: LiveLinkTransform[]): {LiveLinkTransform: LiveLinkTransform, Children: LiveLinkTransform[]};
	GetParent(Parent?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, Parent: LiveLinkTransform};
	HasParent(): {LiveLinkTransform: LiveLinkTransform, $: boolean};
	ParentBoneSpaceTransform(Transform?: Transform): {LiveLinkTransform: LiveLinkTransform, Transform: Transform};
	TransformName(Name?: string): {LiveLinkTransform: LiveLinkTransform, Name: string};
	static ChildCount(LiveLinkTransform?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, $: number};
	static ComponentSpaceTransform(LiveLinkTransform?: LiveLinkTransform,Transform?: Transform): {LiveLinkTransform: LiveLinkTransform, Transform: Transform};
	static GetChildren(LiveLinkTransform?: LiveLinkTransform,Children?: LiveLinkTransform[]): {LiveLinkTransform: LiveLinkTransform, Children: LiveLinkTransform[]};
	static GetParent(LiveLinkTransform?: LiveLinkTransform,Parent?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, Parent: LiveLinkTransform};
	static HasParent(LiveLinkTransform?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, $: boolean};
	static ParentBoneSpaceTransform(LiveLinkTransform?: LiveLinkTransform,Transform?: Transform): {LiveLinkTransform: LiveLinkTransform, Transform: Transform};
	static TransformName(LiveLinkTransform?: LiveLinkTransform,Name?: string): {LiveLinkTransform: LiveLinkTransform, Name: string};
}

declare class SubjectFrameHandle extends LiveLinkBaseBlueprintData { 
	clone() : SubjectFrameHandle;
	static C(Other: UObject | any): SubjectFrameHandle;
	GetAnimationFrameData(AnimationFrameData?: LiveLinkAnimationFrameData): {SubjectFrameHandle: SubjectFrameHandle, AnimationFrameData: LiveLinkAnimationFrameData, $: boolean};
	GetAnimationStaticData(AnimationStaticData?: LiveLinkSkeletonStaticData): {SubjectFrameHandle: SubjectFrameHandle, AnimationStaticData: LiveLinkSkeletonStaticData, $: boolean};
	GetBasicData(BasicBlueprintData?: LiveLinkBasicBlueprintData): {SubjectFrameHandle: SubjectFrameHandle, BasicBlueprintData: LiveLinkBasicBlueprintData};
	GetCurves(Curves?: any): {SubjectFrameHandle: SubjectFrameHandle, Curves: any};
	GetMetadata(MetaData?: SubjectMetadata): {SubjectFrameHandle: SubjectFrameHandle, MetaData: SubjectMetadata};
	GetRootTransform(LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	GetTransformByIndex(TransformIndex?: number,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	GetTransformByName(TransformName?: string,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	NumberOfTransforms(): {SubjectFrameHandle: SubjectFrameHandle, $: number};
	TransformNames(TransformNames?: string[]): {SubjectFrameHandle: SubjectFrameHandle, TransformNames: string[]};
	static GetAnimationFrameData(SubjectFrameHandle?: SubjectFrameHandle,AnimationFrameData?: LiveLinkAnimationFrameData): {SubjectFrameHandle: SubjectFrameHandle, AnimationFrameData: LiveLinkAnimationFrameData, $: boolean};
	static GetAnimationStaticData(SubjectFrameHandle?: SubjectFrameHandle,AnimationStaticData?: LiveLinkSkeletonStaticData): {SubjectFrameHandle: SubjectFrameHandle, AnimationStaticData: LiveLinkSkeletonStaticData, $: boolean};
	static GetBasicData(SubjectFrameHandle?: SubjectFrameHandle,BasicBlueprintData?: LiveLinkBasicBlueprintData): {SubjectFrameHandle: SubjectFrameHandle, BasicBlueprintData: LiveLinkBasicBlueprintData};
	static GetCurves(SubjectFrameHandle?: SubjectFrameHandle,Curves?: any): {SubjectFrameHandle: SubjectFrameHandle, Curves: any};
	static GetMetadata(SubjectFrameHandle?: SubjectFrameHandle,MetaData?: SubjectMetadata): {SubjectFrameHandle: SubjectFrameHandle, MetaData: SubjectMetadata};
	static GetRootTransform(SubjectFrameHandle?: SubjectFrameHandle,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	static GetTransformByIndex(SubjectFrameHandle?: SubjectFrameHandle,TransformIndex?: number,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	static GetTransformByName(SubjectFrameHandle?: SubjectFrameHandle,TransformName?: string,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	static NumberOfTransforms(SubjectFrameHandle?: SubjectFrameHandle): {SubjectFrameHandle: SubjectFrameHandle, $: number};
	static TransformNames(SubjectFrameHandle?: SubjectFrameHandle,TransformNames?: string[]): {SubjectFrameHandle: SubjectFrameHandle, TransformNames: string[]};
}

declare class LiveLinkSubjectKey { 
	Source: Guid;
	SubjectName: LiveLinkSubjectName;
	clone() : LiveLinkSubjectKey;
	static C(Other: UObject | any): LiveLinkSubjectKey;
	GetSpecificLiveLinkSubjectRole(): UnrealEngineClass;
	IsSpecificLiveLinkSubjectEnabled(bForThisFrame: boolean): boolean;
	SetLiveLinkSubjectEnabled(bEnabled: boolean): void;
	static GetSpecificLiveLinkSubjectRole(SubjectKey: LiveLinkSubjectKey): UnrealEngineClass;
	static IsSpecificLiveLinkSubjectEnabled(SubjectKey: LiveLinkSubjectKey,bForThisFrame: boolean): boolean;
	static SetLiveLinkSubjectEnabled(SubjectKey: LiveLinkSubjectKey,bEnabled: boolean): void;
}

declare class LiveLinkSourceHandle { 
	clone() : LiveLinkSourceHandle;
	static C(Other: UObject | any): LiveLinkSourceHandle;
	GetMagicLeapHandTrackingLiveLinkSource(): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	GetSourceMachineName(): {SourceHandle: LiveLinkSourceHandle, $: string};
	GetSourceStatus(): {SourceHandle: LiveLinkSourceHandle, $: string};
	GetSourceType(): {SourceHandle: LiveLinkSourceHandle, $: string};
	IsSourceStillValid(): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	RemoveSource(): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	static GetMagicLeapHandTrackingLiveLinkSource(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	static GetSourceMachineName(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: string};
	static GetSourceStatus(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: string};
	static GetSourceType(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: string};
	static IsSourceStillValid(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	static RemoveSource(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
}

declare class LiveLinkSubjectRepresentation { 
	Subject: LiveLinkSubjectName;
	Role: UnrealEngineClass;
	clone() : LiveLinkSubjectRepresentation;
	static C(Other: UObject | any): LiveLinkSubjectRepresentation;
	EvaluateLiveLinkFrame(OutBlueprintData?: LiveLinkBaseBlueprintData): {OutBlueprintData: LiveLinkBaseBlueprintData, $: boolean};
	static EvaluateLiveLinkFrame(SubjectRepresentation: LiveLinkSubjectRepresentation,OutBlueprintData?: LiveLinkBaseBlueprintData): {OutBlueprintData: LiveLinkBaseBlueprintData, $: boolean};
}

declare class LiveLinkBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): LiveLinkBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): LiveLinkBlueprintLibrary;
	static GetDefaultObject(): LiveLinkBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkBlueprintLibrary;
	static TransformNames(SubjectFrameHandle?: SubjectFrameHandle,TransformNames?: string[]): {SubjectFrameHandle: SubjectFrameHandle, TransformNames: string[]};
	static TransformName(LiveLinkTransform?: LiveLinkTransform,Name?: string): {LiveLinkTransform: LiveLinkTransform, Name: string};
	static SetLiveLinkSubjectEnabled(SubjectKey: LiveLinkSubjectKey,bEnabled: boolean): void;
	static RemoveSource(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	static ParentBoneSpaceTransform(LiveLinkTransform?: LiveLinkTransform,Transform?: Transform): {LiveLinkTransform: LiveLinkTransform, Transform: Transform};
	static NumberOfTransforms(SubjectFrameHandle?: SubjectFrameHandle): {SubjectFrameHandle: SubjectFrameHandle, $: number};
	static IsSpecificLiveLinkSubjectEnabled(SubjectKey: LiveLinkSubjectKey,bForThisFrame: boolean): boolean;
	static IsSourceStillValid(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	static IsLiveLinkSubjectEnabled(SubjectName: LiveLinkSubjectName): boolean;
	static HasParent(LiveLinkTransform?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, $: boolean};
	static GetTransformByName(SubjectFrameHandle?: SubjectFrameHandle,TransformName?: string,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	static GetTransformByIndex(SubjectFrameHandle?: SubjectFrameHandle,TransformIndex?: number,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	static GetSpecificLiveLinkSubjectRole(SubjectKey: LiveLinkSubjectKey): UnrealEngineClass;
	static GetSourceType(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: string};
	static GetSourceStatus(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: string};
	static GetSourceMachineName(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: string};
	static GetRootTransform(SubjectFrameHandle?: SubjectFrameHandle,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	static GetPropertyValue(BasicData?: LiveLinkBasicBlueprintData,PropertyName?: string,Value?: number): {BasicData: LiveLinkBasicBlueprintData, Value: number, $: boolean};
	static GetParent(LiveLinkTransform?: LiveLinkTransform,Parent?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, Parent: LiveLinkTransform};
	static GetMetadata(SubjectFrameHandle?: SubjectFrameHandle,MetaData?: SubjectMetadata): {SubjectFrameHandle: SubjectFrameHandle, MetaData: SubjectMetadata};
	static GetLiveLinkSubjects(bIncludeDisabledSubject: boolean,bIncludeVirtualSubject: boolean): LiveLinkSubjectKey[];
	static GetLiveLinkSubjectRole(SubjectName: LiveLinkSubjectName): UnrealEngineClass;
	static GetLiveLinkEnabledSubjectNames(bIncludeVirtualSubject: boolean): LiveLinkSubjectName[];
	static GetCurves(SubjectFrameHandle?: SubjectFrameHandle,Curves?: any): {SubjectFrameHandle: SubjectFrameHandle, Curves: any};
	static GetChildren(LiveLinkTransform?: LiveLinkTransform,Children?: LiveLinkTransform[]): {LiveLinkTransform: LiveLinkTransform, Children: LiveLinkTransform[]};
	static GetBasicData(SubjectFrameHandle?: SubjectFrameHandle,BasicBlueprintData?: LiveLinkBasicBlueprintData): {SubjectFrameHandle: SubjectFrameHandle, BasicBlueprintData: LiveLinkBasicBlueprintData};
	static GetAnimationStaticData(SubjectFrameHandle?: SubjectFrameHandle,AnimationStaticData?: LiveLinkSkeletonStaticData): {SubjectFrameHandle: SubjectFrameHandle, AnimationStaticData: LiveLinkSkeletonStaticData, $: boolean};
	static GetAnimationFrameData(SubjectFrameHandle?: SubjectFrameHandle,AnimationFrameData?: LiveLinkAnimationFrameData): {SubjectFrameHandle: SubjectFrameHandle, AnimationFrameData: LiveLinkAnimationFrameData, $: boolean};
	static EvaluateLiveLinkFrameWithSpecificRole(SubjectName: LiveLinkSubjectName,Role: UnrealEngineClass,OutBlueprintData?: LiveLinkBaseBlueprintData): {OutBlueprintData: LiveLinkBaseBlueprintData, $: boolean};
	static EvaluateLiveLinkFrameAtWorldTimeOffset(SubjectName: LiveLinkSubjectName,Role: UnrealEngineClass,WorldTimeOffset: number,OutBlueprintData?: LiveLinkBaseBlueprintData): {OutBlueprintData: LiveLinkBaseBlueprintData, $: boolean};
	static EvaluateLiveLinkFrameAtSceneTime(SubjectName: LiveLinkSubjectName,Role: UnrealEngineClass,SceneTime: Timecode,OutBlueprintData?: LiveLinkBaseBlueprintData): {OutBlueprintData: LiveLinkBaseBlueprintData, $: boolean};
	static EvaluateLiveLinkFrame(SubjectRepresentation: LiveLinkSubjectRepresentation,OutBlueprintData?: LiveLinkBaseBlueprintData): {OutBlueprintData: LiveLinkBaseBlueprintData, $: boolean};
	static ComponentSpaceTransform(LiveLinkTransform?: LiveLinkTransform,Transform?: Transform): {LiveLinkTransform: LiveLinkTransform, Transform: Transform};
	static ChildCount(LiveLinkTransform?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, $: number};
	static C(Other: UObject | any): LiveLinkBlueprintLibrary;
}

declare class LiveLinkBlueprintVirtualSubject extends LiveLinkVirtualSubject { 
	static Load(ResourceName: string): LiveLinkBlueprintVirtualSubject;
	static Find(Outer: UObject, ResourceName: string): LiveLinkBlueprintVirtualSubject;
	static GetDefaultObject(): LiveLinkBlueprintVirtualSubject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkBlueprintVirtualSubject;
	UpdateVirtualSubjectStaticData_Internal(InStruct: LiveLinkBaseStaticData): boolean;
	UpdateVirtualSubjectFrameData_Internal(InStruct: LiveLinkBaseFrameData,bInShouldStampCurrentTime: boolean): boolean;
	OnUpdate(): void;
	OnInitialize(): void;
	static C(Other: UObject | any): LiveLinkBlueprintVirtualSubject;
}

declare class LiveLinkComponent extends ActorComponent { 
	OnLiveLinkUpdated: UnrealEngineMulticastDelegate<(DeltaTime: number) => void>;
	static Load(ResourceName: string): LiveLinkComponent;
	static Find(Outer: UObject, ResourceName: string): LiveLinkComponent;
	static GetDefaultObject(): LiveLinkComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkComponent;
	GetSubjectDataAtWorldTime(SubjectName: string,WorldTime: number,bSuccess?: boolean,SubjectFrameHandle?: SubjectFrameHandle): {bSuccess: boolean, SubjectFrameHandle: SubjectFrameHandle};
	GetSubjectDataAtSceneTime(SubjectName: string,SceneTime: Timecode,bSuccess?: boolean,SubjectFrameHandle?: SubjectFrameHandle): {bSuccess: boolean, SubjectFrameHandle: SubjectFrameHandle};
	GetSubjectData(SubjectName: string,bSuccess?: boolean,SubjectFrameHandle?: SubjectFrameHandle): {bSuccess: boolean, SubjectFrameHandle: SubjectFrameHandle};
	GetAvailableSubjectNames(SubjectNames?: string[]): {SubjectNames: string[]};
	static C(Other: UObject | any): LiveLinkComponent;
}

declare class LiveLinkDrivenComponent extends ActorComponent { 
	SubjectName: LiveLinkSubjectName;
	ActorTransformBone: string;
	bModifyActorTransform: boolean;
	bSetRelativeLocation: boolean;
	static Load(ResourceName: string): LiveLinkDrivenComponent;
	static Find(Outer: UObject, ResourceName: string): LiveLinkDrivenComponent;
	static GetDefaultObject(): LiveLinkDrivenComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkDrivenComponent;
	static C(Other: UObject | any): LiveLinkDrivenComponent;
}

declare class LiveLinkRetargetAsset extends UObject { 
	static Load(ResourceName: string): LiveLinkRetargetAsset;
	static Find(Outer: UObject, ResourceName: string): LiveLinkRetargetAsset;
	static GetDefaultObject(): LiveLinkRetargetAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkRetargetAsset;
	static C(Other: UObject | any): LiveLinkRetargetAsset;
}

declare class LiveLinkInstance extends AnimInstance { 
	CurrentRetargetAsset: LiveLinkRetargetAsset;
	static Load(ResourceName: string): LiveLinkInstance;
	static Find(Outer: UObject, ResourceName: string): LiveLinkInstance;
	static GetDefaultObject(): LiveLinkInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkInstance;
	SetSubject(SubjectName: LiveLinkSubjectName): void;
	SetRetargetAsset(RetargetAsset: UnrealEngineClass): void;
	static C(Other: UObject | any): LiveLinkInstance;
}

declare class ProviderPollResult { 
	Name: string;
	MachineName: string;
	MachineTimeOffset: any;
	clone() : ProviderPollResult;
	static C(Other: UObject | any): ProviderPollResult;
}

declare class LiveLinkMessageBusFinder extends UObject { 
	static Load(ResourceName: string): LiveLinkMessageBusFinder;
	static Find(Outer: UObject, ResourceName: string): LiveLinkMessageBusFinder;
	static GetDefaultObject(): LiveLinkMessageBusFinder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkMessageBusFinder;
	GetAvailableProviders(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Duration: number,AvailableProviders?: ProviderPollResult[]): {AvailableProviders: ProviderPollResult[]};
	static ConstructMessageBusFinder(): LiveLinkMessageBusFinder;
	static ConnectToProvider(Provider?: ProviderPollResult,SourceHandle?: LiveLinkSourceHandle): {Provider: ProviderPollResult, SourceHandle: LiveLinkSourceHandle};
	static C(Other: UObject | any): LiveLinkMessageBusFinder;
}

declare class LiveLinkMessageBusSourceFactory extends LiveLinkSourceFactory { 
	static Load(ResourceName: string): LiveLinkMessageBusSourceFactory;
	static Find(Outer: UObject, ResourceName: string): LiveLinkMessageBusSourceFactory;
	static GetDefaultObject(): LiveLinkMessageBusSourceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkMessageBusSourceFactory;
	static C(Other: UObject | any): LiveLinkMessageBusSourceFactory;
}

declare class LiveLinkMessageBusSourceSettings extends LiveLinkSourceSettings { 
	static Load(ResourceName: string): LiveLinkMessageBusSourceSettings;
	static Find(Outer: UObject, ResourceName: string): LiveLinkMessageBusSourceSettings;
	static GetDefaultObject(): LiveLinkMessageBusSourceSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkMessageBusSourceSettings;
	static C(Other: UObject | any): LiveLinkMessageBusSourceSettings;
}

declare class LiveLinkSourcePreset { 
	Guid: Guid;
	Settings: LiveLinkSourceSettings;
	SourceType: string;
	clone() : LiveLinkSourcePreset;
	static C(Other: UObject | any): LiveLinkSourcePreset;
}

declare class LiveLinkSubjectPreset { 
	Key: LiveLinkSubjectKey;
	Role: UnrealEngineClass;
	Settings: LiveLinkSubjectSettings;
	VirtualSubject: LiveLinkVirtualSubject;
	bEnabled: boolean;
	clone() : LiveLinkSubjectPreset;
	static C(Other: UObject | any): LiveLinkSubjectPreset;
}

declare class LiveLinkPreset extends UObject { 
	Sources: LiveLinkSourcePreset[];
	Subjects: LiveLinkSubjectPreset[];
	static Load(ResourceName: string): LiveLinkPreset;
	static Find(Outer: UObject, ResourceName: string): LiveLinkPreset;
	static GetDefaultObject(): LiveLinkPreset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkPreset;
	BuildFromClient(): void;
	ApplyToClient(): boolean;
	AddToClient(bRecreatePresets: boolean): boolean;
	static C(Other: UObject | any): LiveLinkPreset;
}

declare class LiveLinkRemapAsset extends LiveLinkRetargetAsset { 
	static Load(ResourceName: string): LiveLinkRemapAsset;
	static Find(Outer: UObject, ResourceName: string): LiveLinkRemapAsset;
	static GetDefaultObject(): LiveLinkRemapAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkRemapAsset;
	RemapCurveElements(CurveItems?: any): {CurveItems: any};
	GetRemappedCurveName(CurveName: string): string;
	GetRemappedBoneName(BoneName: string): string;
	static C(Other: UObject | any): LiveLinkRemapAsset;
}

declare class LiveLinkRoleProjectSetting { 
	Role: UnrealEngineClass;
	SettingClass: UnrealEngineClass;
	FrameInterpolationProcessor: UnrealEngineClass;
	FramePreProcessors: UnrealEngineClass[];
	clone() : LiveLinkRoleProjectSetting;
	static C(Other: UObject | any): LiveLinkRoleProjectSetting;
}

declare class LiveLinkSettings extends UObject { 
	DefaultRoleSettings: LiveLinkRoleProjectSetting[];
	FrameInterpolationProcessor: UnrealEngineClass;
	DefaultLiveLinkPreset: LiveLinkPreset;
	PresetSaveDir: DirectoryPath;
	ClockOffsetCorrectionStep: number;
	DefaultMessageBusSourceMode: ELiveLinkSourceMode;
	MessageBusPingRequestFrequency: any;
	MessageBusHeartbeatFrequency: any;
	MessageBusHeartbeatTimeout: any;
	MessageBusTimeBeforeRemovingInactiveSource: any;
	TimeWithoutFrameToBeConsiderAsInvalid: any;
	ValidColor: LinearColor;
	InvalidColor: LinearColor;
	TextSizeSource: number;
	TextSizeSubject: number;
	static Load(ResourceName: string): LiveLinkSettings;
	static Find(Outer: UObject, ResourceName: string): LiveLinkSettings;
	static GetDefaultObject(): LiveLinkSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkSettings;
	static C(Other: UObject | any): LiveLinkSettings;
}

declare type ELiveLinkTimecodeProviderEvaluationType = 'Lerp' | 'Nearest' | 'Latest' | 'ELiveLinkTimecodeProviderEvaluationType_MAX';
declare var ELiveLinkTimecodeProviderEvaluationType : { Lerp:'Lerp',Nearest:'Nearest',Latest:'Latest',ELiveLinkTimecodeProviderEvaluationType_MAX:'ELiveLinkTimecodeProviderEvaluationType_MAX', };
declare class LiveLinkTimecodeProvider extends TimecodeProvider { 
	SubjectKey: LiveLinkSubjectKey;
	Evaluation: ELiveLinkTimecodeProviderEvaluationType;
	bOverrideFrameRate: boolean;
	OverrideFrameRate: FrameRate;
	BufferSize: number;
	static Load(ResourceName: string): LiveLinkTimecodeProvider;
	static Find(Outer: UObject, ResourceName: string): LiveLinkTimecodeProvider;
	static GetDefaultObject(): LiveLinkTimecodeProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkTimecodeProvider;
	static C(Other: UObject | any): LiveLinkTimecodeProvider;
}

declare class LiveLinkTimeSynchronizationSource extends TimeSynchronizationSource { 
	SubjectName: LiveLinkSubjectName;
	static Load(ResourceName: string): LiveLinkTimeSynchronizationSource;
	static Find(Outer: UObject, ResourceName: string): LiveLinkTimeSynchronizationSource;
	static GetDefaultObject(): LiveLinkTimeSynchronizationSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkTimeSynchronizationSource;
	static C(Other: UObject | any): LiveLinkTimeSynchronizationSource;
}

declare class LiveLinkVirtualSubjectSourceSettings extends LiveLinkSourceSettings { 
	SourceName: string;
	static Load(ResourceName: string): LiveLinkVirtualSubjectSourceSettings;
	static Find(Outer: UObject, ResourceName: string): LiveLinkVirtualSubjectSourceSettings;
	static GetDefaultObject(): LiveLinkVirtualSubjectSourceSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkVirtualSubjectSourceSettings;
	static C(Other: UObject | any): LiveLinkVirtualSubjectSourceSettings;
}

declare class LiveLinkOpenXRHandTrackingSourceFactory extends LiveLinkSourceFactory { 
	static Load(ResourceName: string): LiveLinkOpenXRHandTrackingSourceFactory;
	static Find(Outer: UObject, ResourceName: string): LiveLinkOpenXRHandTrackingSourceFactory;
	static GetDefaultObject(): LiveLinkOpenXRHandTrackingSourceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkOpenXRHandTrackingSourceFactory;
	static C(Other: UObject | any): LiveLinkOpenXRHandTrackingSourceFactory;
}

declare type EQuatSwizzleAxisB = 'X' | 'Y' | 'Z' | 'W' | 'MinusX' | 'MinusY' | 'MinusZ' | 'MinusW' | 'EQuatSwizzleAxisB_MAX';
declare var EQuatSwizzleAxisB : { X:'X',Y:'Y',Z:'Z',W:'W',MinusX:'MinusX',MinusY:'MinusY',MinusZ:'MinusZ',MinusW:'MinusW',EQuatSwizzleAxisB_MAX:'EQuatSwizzleAxisB_MAX', };
declare class OpenXRHandTrackingLiveLinkRemapAsset extends LiveLinkRetargetAsset { 
	bHasMetacarpals: boolean;
	bRetargetRotationOnly: boolean;
	SwizzleX: EQuatSwizzleAxisB;
	SwizzleY: EQuatSwizzleAxisB;
	SwizzleZ: EQuatSwizzleAxisB;
	SwizzleW: EQuatSwizzleAxisB;
	HandTrackingBoneNameMap: any;
	static Load(ResourceName: string): OpenXRHandTrackingLiveLinkRemapAsset;
	static Find(Outer: UObject, ResourceName: string): OpenXRHandTrackingLiveLinkRemapAsset;
	static GetDefaultObject(): OpenXRHandTrackingLiveLinkRemapAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OpenXRHandTrackingLiveLinkRemapAsset;
	static C(Other: UObject | any): OpenXRHandTrackingLiveLinkRemapAsset;
}

declare class NamedInterface { 
	InterfaceName: string;
	InterfaceObject: UObject;
	clone() : NamedInterface;
	static C(Other: UObject | any): NamedInterface;
}

declare class NamedInterfaceDef { 
	InterfaceName: string;
	InterfaceClassName: string;
	clone() : NamedInterfaceDef;
	static C(Other: UObject | any): NamedInterfaceDef;
}

declare class NamedInterfaces extends UObject { 
	NamedInterfaces: NamedInterface[];
	NamedInterfaceDefs: NamedInterfaceDef[];
	static Load(ResourceName: string): NamedInterfaces;
	static Find(Outer: UObject, ResourceName: string): NamedInterfaces;
	static GetDefaultObject(): NamedInterfaces;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NamedInterfaces;
	static C(Other: UObject | any): NamedInterfaces;
}

declare class TurnBasedMatchInterface extends Interface { 
	static Load(ResourceName: string): TurnBasedMatchInterface;
	static Find(Outer: UObject, ResourceName: string): TurnBasedMatchInterface;
	static GetDefaultObject(): TurnBasedMatchInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TurnBasedMatchInterface;
	OnMatchReceivedTurn(Match: string,bDidBecomeActive: boolean): void;
	OnMatchEnded(Match: string): void;
	static C(Other: UObject | any): TurnBasedMatchInterface;
}

declare class AchievementBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AchievementBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): AchievementBlueprintLibrary;
	static GetDefaultObject(): AchievementBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AchievementBlueprintLibrary;
	static GetCachedAchievementProgress(WorldContextObject: UObject,PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Progress?: number): {bFoundID: boolean, Progress: number};
	static GetCachedAchievementDescription(WorldContextObject: UObject,PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Title?: string,LockedDescription?: string,UnlockedDescription?: string,bHidden?: boolean): {bFoundID: boolean, Title: string, LockedDescription: string, UnlockedDescription: string, bHidden: boolean};
	static C(Other: UObject | any): AchievementBlueprintLibrary;
}

declare class AchievementQueryCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): AchievementQueryCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): AchievementQueryCallbackProxy;
	static GetDefaultObject(): AchievementQueryCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AchievementQueryCallbackProxy;
	static CacheAchievements(WorldContextObject: UObject,PlayerController: PlayerController): AchievementQueryCallbackProxy;
	static CacheAchievementDescriptions(WorldContextObject: UObject,PlayerController: PlayerController): AchievementQueryCallbackProxy;
	static C(Other: UObject | any): AchievementQueryCallbackProxy;
}

declare class AchievementWriteCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(WrittenAchievementName: string, WrittenProgress: number, WrittenUserTag: number) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(WrittenAchievementName: string, WrittenProgress: number, WrittenUserTag: number) => void>;
	static Load(ResourceName: string): AchievementWriteCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): AchievementWriteCallbackProxy;
	static GetDefaultObject(): AchievementWriteCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AchievementWriteCallbackProxy;
	static WriteAchievementProgress(WorldContextObject: UObject,PlayerController: PlayerController,AchievementName: string,Progress: number,UserTag: number): AchievementWriteCallbackProxy;
	static C(Other: UObject | any): AchievementWriteCallbackProxy;
}

declare class ConnectionCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(ErrorCode: number) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(ErrorCode: number) => void>;
	static Load(ResourceName: string): ConnectionCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): ConnectionCallbackProxy;
	static GetDefaultObject(): ConnectionCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConnectionCallbackProxy;
	static ConnectToService(WorldContextObject: UObject,PlayerController: PlayerController): ConnectionCallbackProxy;
	static C(Other: UObject | any): ConnectionCallbackProxy;
}

declare class CreateSessionCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): CreateSessionCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): CreateSessionCallbackProxy;
	static GetDefaultObject(): CreateSessionCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CreateSessionCallbackProxy;
	static CreateSession(WorldContextObject: UObject,PlayerController: PlayerController,PublicConnections: number,bUseLAN: boolean): CreateSessionCallbackProxy;
	static C(Other: UObject | any): CreateSessionCallbackProxy;
}

declare class DestroySessionCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): DestroySessionCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): DestroySessionCallbackProxy;
	static GetDefaultObject(): DestroySessionCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestroySessionCallbackProxy;
	static DestroySession(WorldContextObject: UObject,PlayerController: PlayerController): DestroySessionCallbackProxy;
	static C(Other: UObject | any): DestroySessionCallbackProxy;
}

declare class EndMatchCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): EndMatchCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): EndMatchCallbackProxy;
	static GetDefaultObject(): EndMatchCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EndMatchCallbackProxy;
	static C(Other: UObject | any): EndMatchCallbackProxy;
}

declare class EndTurnCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): EndTurnCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): EndTurnCallbackProxy;
	static GetDefaultObject(): EndTurnCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EndTurnCallbackProxy;
	static C(Other: UObject | any): EndTurnCallbackProxy;
}

declare class BlueprintSessionResult { 
	clone() : BlueprintSessionResult;
	static C(Other: UObject | any): BlueprintSessionResult;
}

declare class FindSessionsCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(Results: BlueprintSessionResult[]) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(Results: BlueprintSessionResult[]) => void>;
	static Load(ResourceName: string): FindSessionsCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): FindSessionsCallbackProxy;
	static GetDefaultObject(): FindSessionsCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FindSessionsCallbackProxy;
	static GetServerName(Result: BlueprintSessionResult): string;
	static GetPingInMs(Result: BlueprintSessionResult): number;
	static GetMaxPlayers(Result: BlueprintSessionResult): number;
	static GetCurrentPlayers(Result: BlueprintSessionResult): number;
	static FindSessions(WorldContextObject: UObject,PlayerController: PlayerController,MaxResults: number,bUseLAN: boolean): FindSessionsCallbackProxy;
	static C(Other: UObject | any): FindSessionsCallbackProxy;
}

declare class FindTurnBasedMatchCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(MatchID: string) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(MatchID: string) => void>;
	static Load(ResourceName: string): FindTurnBasedMatchCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): FindTurnBasedMatchCallbackProxy;
	static GetDefaultObject(): FindTurnBasedMatchCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FindTurnBasedMatchCallbackProxy;
	static C(Other: UObject | any): FindTurnBasedMatchCallbackProxy;
}

declare type EInAppPurchaseState = 'Unknown' | 'Success' | 'Failed' | 'Cancelled' | 'Invalid' | 'NotAllowed' | 'Restored' | 'AlreadyOwned' | 'EInAppPurchaseState_MAX';
declare var EInAppPurchaseState : { Unknown:'Unknown',Success:'Success',Failed:'Failed',Cancelled:'Cancelled',Invalid:'Invalid',NotAllowed:'NotAllowed',Restored:'Restored',AlreadyOwned:'AlreadyOwned',EInAppPurchaseState_MAX:'EInAppPurchaseState_MAX', };
declare class InAppPurchaseProductInfo { 
	Identifier: string;
	TransactionIdentifier: string;
	DisplayName: string;
	DisplayDescription: string;
	DisplayPrice: string;
	RawPrice: number;
	CurrencyCode: string;
	CurrencySymbol: string;
	DecimalSeparator: string;
	GroupingSeparator: string;
	ReceiptData: string;
	clone() : InAppPurchaseProductInfo;
	static C(Other: UObject | any): InAppPurchaseProductInfo;
}

declare class InAppPurchaseProductRequest { 
	ProductIdentifier: string;
	bIsConsumable: boolean;
	clone() : InAppPurchaseProductRequest;
	static C(Other: UObject | any): InAppPurchaseProductRequest;
}

declare class InAppPurchaseCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(PurchaseStatus: EInAppPurchaseState, InAppPurchaseReceipts: InAppPurchaseProductInfo) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(PurchaseStatus: EInAppPurchaseState, InAppPurchaseReceipts: InAppPurchaseProductInfo) => void>;
	static Load(ResourceName: string): InAppPurchaseCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseCallbackProxy;
	static GetDefaultObject(): InAppPurchaseCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseCallbackProxy;
	static CreateProxyObjectForInAppPurchase(PlayerController: PlayerController,ProductRequest: InAppPurchaseProductRequest): InAppPurchaseCallbackProxy;
	static C(Other: UObject | any): InAppPurchaseCallbackProxy;
}

declare type EInAppPurchaseStatus = 'Invalid' | 'Failed' | 'Deferred' | 'Canceled' | 'Purchased' | 'Restored' | 'EInAppPurchaseStatus_MAX';
declare var EInAppPurchaseStatus : { Invalid:'Invalid',Failed:'Failed',Deferred:'Deferred',Canceled:'Canceled',Purchased:'Purchased',Restored:'Restored',EInAppPurchaseStatus_MAX:'EInAppPurchaseStatus_MAX', };
declare class InAppPurchaseReceiptInfo2 { 
	ItemName: string;
	ItemId: string;
	ValidationInfo: string;
	clone() : InAppPurchaseReceiptInfo2;
	static C(Other: UObject | any): InAppPurchaseReceiptInfo2;
}

declare class InAppPurchaseProductRequest2 { 
	ProductIdentifier: string;
	bIsConsumable: boolean;
	clone() : InAppPurchaseProductRequest2;
	static C(Other: UObject | any): InAppPurchaseProductRequest2;
}

declare class InAppPurchaseCallbackProxy2 extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(PurchaseStatus: EInAppPurchaseStatus, InAppPurchaseReceipts: InAppPurchaseReceiptInfo2[]) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(PurchaseStatus: EInAppPurchaseStatus, InAppPurchaseReceipts: InAppPurchaseReceiptInfo2[]) => void>;
	static Load(ResourceName: string): InAppPurchaseCallbackProxy2;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseCallbackProxy2;
	static GetDefaultObject(): InAppPurchaseCallbackProxy2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseCallbackProxy2;
	static CreateProxyObjectForInAppPurchaseUnprocessedPurchases(PlayerController: PlayerController): InAppPurchaseCallbackProxy2;
	static CreateProxyObjectForInAppPurchaseQueryOwned(PlayerController: PlayerController): InAppPurchaseCallbackProxy2;
	static CreateProxyObjectForInAppPurchase(PlayerController: PlayerController,ProductRequest: InAppPurchaseProductRequest2): InAppPurchaseCallbackProxy2;
	static C(Other: UObject | any): InAppPurchaseCallbackProxy2;
}

declare class InAppPurchaseQueryCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(InAppPurchaseInformation: InAppPurchaseProductInfo[]) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(InAppPurchaseInformation: InAppPurchaseProductInfo[]) => void>;
	static Load(ResourceName: string): InAppPurchaseQueryCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseQueryCallbackProxy;
	static GetDefaultObject(): InAppPurchaseQueryCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseQueryCallbackProxy;
	static CreateProxyObjectForInAppPurchaseQuery(PlayerController: PlayerController,ProductIdentifiers: string[]): InAppPurchaseQueryCallbackProxy;
	static C(Other: UObject | any): InAppPurchaseQueryCallbackProxy;
}

declare type EOnlineProxyStoreOfferDiscountType = 'NotOnSale' | 'Percentage' | 'DiscountAmount' | 'PayAmount' | 'EOnlineProxyStoreOfferDiscountType_MAX';
declare var EOnlineProxyStoreOfferDiscountType : { NotOnSale:'NotOnSale',Percentage:'Percentage',DiscountAmount:'DiscountAmount',PayAmount:'PayAmount',EOnlineProxyStoreOfferDiscountType_MAX:'EOnlineProxyStoreOfferDiscountType_MAX', };
declare class OnlineProxyStoreOffer { 
	OfferId: string;
	Title: string;
	Description: string;
	LongDescription: string;
	RegularPriceText: string;
	RegularPrice: number;
	PriceText: string;
	NumericPrice: number;
	CurrencyCode: string;
	ReleaseDate: DateTime;
	ExpirationDate: DateTime;
	DiscountType: EOnlineProxyStoreOfferDiscountType;
	DynamicFields: any;
	clone() : OnlineProxyStoreOffer;
	static C(Other: UObject | any): OnlineProxyStoreOffer;
}

declare class InAppPurchaseQueryCallbackProxy2 extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(InAppOfferInformation: OnlineProxyStoreOffer[]) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(InAppOfferInformation: OnlineProxyStoreOffer[]) => void>;
	static Load(ResourceName: string): InAppPurchaseQueryCallbackProxy2;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseQueryCallbackProxy2;
	static GetDefaultObject(): InAppPurchaseQueryCallbackProxy2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseQueryCallbackProxy2;
	static CreateProxyObjectForInAppPurchaseQuery(PlayerController: PlayerController,ProductIdentifiers: string[]): InAppPurchaseQueryCallbackProxy2;
	static C(Other: UObject | any): InAppPurchaseQueryCallbackProxy2;
}

declare class InAppPurchaseRestoreInfo { 
	Identifier: string;
	ReceiptData: string;
	TransactionIdentifier: string;
	clone() : InAppPurchaseRestoreInfo;
	static C(Other: UObject | any): InAppPurchaseRestoreInfo;
}

declare class InAppPurchaseRestoreCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(CompletionStatus: EInAppPurchaseState, InAppRestorePurchaseInformation: InAppPurchaseRestoreInfo[]) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(CompletionStatus: EInAppPurchaseState, InAppRestorePurchaseInformation: InAppPurchaseRestoreInfo[]) => void>;
	static Load(ResourceName: string): InAppPurchaseRestoreCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseRestoreCallbackProxy;
	static GetDefaultObject(): InAppPurchaseRestoreCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseRestoreCallbackProxy;
	static CreateProxyObjectForInAppPurchaseRestore(ConsumableProductFlags: InAppPurchaseProductRequest[],PlayerController: PlayerController): InAppPurchaseRestoreCallbackProxy;
	static C(Other: UObject | any): InAppPurchaseRestoreCallbackProxy;
}

declare class InAppPurchaseRestoreInfo2 { 
	ItemName: string;
	ItemId: string;
	ValidationInfo: string;
	clone() : InAppPurchaseRestoreInfo2;
	static C(Other: UObject | any): InAppPurchaseRestoreInfo2;
}

declare class InAppPurchaseRestoreCallbackProxy2 extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(PurchaseStatus: EInAppPurchaseStatus, InAppPurchaseRestoreInfo: InAppPurchaseRestoreInfo2[]) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(PurchaseStatus: EInAppPurchaseStatus, InAppPurchaseRestoreInfo: InAppPurchaseRestoreInfo2[]) => void>;
	static Load(ResourceName: string): InAppPurchaseRestoreCallbackProxy2;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseRestoreCallbackProxy2;
	static GetDefaultObject(): InAppPurchaseRestoreCallbackProxy2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseRestoreCallbackProxy2;
	static CreateProxyObjectForInAppPurchaseRestore(ConsumableProductFlags: InAppPurchaseProductRequest2[],PlayerController: PlayerController): InAppPurchaseRestoreCallbackProxy2;
	static C(Other: UObject | any): InAppPurchaseRestoreCallbackProxy2;
}

declare class IpConnection extends NetConnection { 
	SocketErrorDisconnectDelay: number;
	static Load(ResourceName: string): IpConnection;
	static Find(Outer: UObject, ResourceName: string): IpConnection;
	static GetDefaultObject(): IpConnection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IpConnection;
	static C(Other: UObject | any): IpConnection;
}

declare class IpNetDriver extends NetDriver { 
	LogPortUnreach: boolean;
	AllowPlayerPortUnreach: boolean;
	MaxPortCountToTry: any;
	ServerDesiredSocketReceiveBufferBytes: any;
	ServerDesiredSocketSendBufferBytes: any;
	ClientDesiredSocketReceiveBufferBytes: any;
	ClientDesiredSocketSendBufferBytes: any;
	MaxSecondsInReceive: any;
	NbPacketsBetweenReceiveTimeTest: number;
	ResolutionConnectionTimeout: number;
	static Load(ResourceName: string): IpNetDriver;
	static Find(Outer: UObject, ResourceName: string): IpNetDriver;
	static GetDefaultObject(): IpNetDriver;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IpNetDriver;
	static C(Other: UObject | any): IpNetDriver;
}

declare class JoinSessionCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): JoinSessionCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): JoinSessionCallbackProxy;
	static GetDefaultObject(): JoinSessionCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JoinSessionCallbackProxy;
	static JoinSession(WorldContextObject: UObject,PlayerController: PlayerController,SearchResult: BlueprintSessionResult): JoinSessionCallbackProxy;
	static C(Other: UObject | any): JoinSessionCallbackProxy;
}

declare class LeaderboardBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): LeaderboardBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): LeaderboardBlueprintLibrary;
	static GetDefaultObject(): LeaderboardBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LeaderboardBlueprintLibrary;
	static WriteLeaderboardInteger(PlayerController: PlayerController,StatName: string,StatValue: number): boolean;
	static C(Other: UObject | any): LeaderboardBlueprintLibrary;
}

declare class LeaderboardFlushCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(SessionName: string) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(SessionName: string) => void>;
	static Load(ResourceName: string): LeaderboardFlushCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): LeaderboardFlushCallbackProxy;
	static GetDefaultObject(): LeaderboardFlushCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LeaderboardFlushCallbackProxy;
	static CreateProxyObjectForFlush(PlayerController: PlayerController,SessionName: string): LeaderboardFlushCallbackProxy;
	static C(Other: UObject | any): LeaderboardFlushCallbackProxy;
}

declare class LeaderboardQueryCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(LeaderboardValue: number) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(LeaderboardValue: number) => void>;
	static Load(ResourceName: string): LeaderboardQueryCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): LeaderboardQueryCallbackProxy;
	static GetDefaultObject(): LeaderboardQueryCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LeaderboardQueryCallbackProxy;
	static CreateProxyObjectForIntQuery(PlayerController: PlayerController,StatName: string): LeaderboardQueryCallbackProxy;
	static C(Other: UObject | any): LeaderboardQueryCallbackProxy;
}

declare class LogoutCallbackProxy extends BlueprintAsyncActionBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(PlayerController: PlayerController) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(PlayerController: PlayerController) => void>;
	static Load(ResourceName: string): LogoutCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): LogoutCallbackProxy;
	static GetDefaultObject(): LogoutCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LogoutCallbackProxy;
	static Logout(WorldContextObject: UObject,PlayerController: PlayerController): LogoutCallbackProxy;
	static C(Other: UObject | any): LogoutCallbackProxy;
}

declare class OnlineBeacon extends Actor { 
	BeaconConnectionInitialTimeout: number;
	BeaconConnectionTimeout: number;
	NetDriver: NetDriver;
	static GetDefaultObject(): OnlineBeacon;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBeacon;
	static C(Other: UObject | any): OnlineBeacon;
}

declare class OnlineBeaconHostObject extends Actor { 
	BeaconTypeName: string;
	ClientBeaconActorClass: UnrealEngineClass;
	ClientActors: OnlineBeaconClient[];
	static GetDefaultObject(): OnlineBeaconHostObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBeaconHostObject;
	static C(Other: UObject | any): OnlineBeaconHostObject;
}

declare type EBeaconConnectionState = 'Invalid' | 'Closed' | 'Pending' | 'Open' | 'EBeaconConnectionState_MAX';
declare var EBeaconConnectionState : { Invalid:'Invalid',Closed:'Closed',Pending:'Pending',Open:'Open',EBeaconConnectionState_MAX:'EBeaconConnectionState_MAX', };
declare class OnlineBeaconClient extends OnlineBeacon { 
	BeaconOwner: OnlineBeaconHostObject;
	BeaconConnection: NetConnection;
	ConnectionState: EBeaconConnectionState;
	static GetDefaultObject(): OnlineBeaconClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBeaconClient;
	ClientOnConnected(): void;
	static C(Other: UObject | any): OnlineBeaconClient;
}

declare class OnlineBeaconHost extends OnlineBeacon { 
	ListenPort: number;
	ClientActors: OnlineBeaconClient[];
	static GetDefaultObject(): OnlineBeaconHost;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBeaconHost;
	static C(Other: UObject | any): OnlineBeaconHost;
}

declare class OnlineEngineInterfaceImpl extends OnlineEngineInterface { 
	MappedUniqueNetIdTypes: any;
	CompatibleUniqueNetIdTypes: string[];
	VoiceSubsystemNameOverride: string;
	static Load(ResourceName: string): OnlineEngineInterfaceImpl;
	static Find(Outer: UObject, ResourceName: string): OnlineEngineInterfaceImpl;
	static GetDefaultObject(): OnlineEngineInterfaceImpl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineEngineInterfaceImpl;
	static C(Other: UObject | any): OnlineEngineInterfaceImpl;
}

declare class PIELoginSettingsInternal { 
	ID: string;
	Token: string;
	Type: string;
	TokenBytes: number[];
	clone() : PIELoginSettingsInternal;
	static C(Other: UObject | any): PIELoginSettingsInternal;
}

declare class OnlinePIESettings extends DeveloperSettings { 
	bOnlinePIEEnabled: boolean;
	Logins: PIELoginSettingsInternal[];
	static Load(ResourceName: string): OnlinePIESettings;
	static Find(Outer: UObject, ResourceName: string): OnlinePIESettings;
	static GetDefaultObject(): OnlinePIESettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlinePIESettings;
	static C(Other: UObject | any): OnlinePIESettings;
}

declare class OnlineSessionClient extends OnlineSession { 
	bIsFromInvite: boolean;
	bHandlingDisconnect: boolean;
	static Load(ResourceName: string): OnlineSessionClient;
	static Find(Outer: UObject, ResourceName: string): OnlineSessionClient;
	static GetDefaultObject(): OnlineSessionClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineSessionClient;
	static C(Other: UObject | any): OnlineSessionClient;
}

declare class PlayerReservation { 
	UniqueId: UniqueNetIdRepl;
	ValidationStr: string;
	Platform: string;
	bAllowCrossplay: boolean;
	ElapsedTime: number;
	clone() : PlayerReservation;
	static C(Other: UObject | any): PlayerReservation;
}

declare class PartyReservation { 
	TeamNum: number;
	PartyLeader: UniqueNetIdRepl;
	PartyMembers: PlayerReservation[];
	RemovedPartyMembers: PlayerReservation[];
	clone() : PartyReservation;
	static C(Other: UObject | any): PartyReservation;
}

declare type EClientRequestType = 'NonePending' | 'ExistingSessionReservation' | 'ReservationUpdate' | 'EmptyServerReservation' | 'Reconnect' | 'Abandon' | 'ReservationRemoveMembers' | 'AddOrUpdateReservation' | 'EClientRequestType_MAX';
declare var EClientRequestType : { NonePending:'NonePending',ExistingSessionReservation:'ExistingSessionReservation',ReservationUpdate:'ReservationUpdate',EmptyServerReservation:'EmptyServerReservation',Reconnect:'Reconnect',Abandon:'Abandon',ReservationRemoveMembers:'ReservationRemoveMembers',AddOrUpdateReservation:'AddOrUpdateReservation',EClientRequestType_MAX:'EClientRequestType_MAX', };
declare type EPartyReservationResult = 'NoResult' | 'RequestPending' | 'GeneralError' | 'PartyLimitReached' | 'IncorrectPlayerCount' | 'RequestTimedOut' | 'ReservationDuplicate' | 'ReservationNotFound' | 'ReservationAccepted' | 'ReservationDenied' | 'ReservationDenied_CrossPlayRestriction' | 'ReservationDenied_Banned' | 'ReservationRequestCanceled' | 'ReservationInvalid' | 'BadSessionId' | 'ReservationDenied_ContainsExistingPlayers' | 'EPartyReservationResult_MAX';
declare var EPartyReservationResult : { NoResult:'NoResult',RequestPending:'RequestPending',GeneralError:'GeneralError',PartyLimitReached:'PartyLimitReached',IncorrectPlayerCount:'IncorrectPlayerCount',RequestTimedOut:'RequestTimedOut',ReservationDuplicate:'ReservationDuplicate',ReservationNotFound:'ReservationNotFound',ReservationAccepted:'ReservationAccepted',ReservationDenied:'ReservationDenied',ReservationDenied_CrossPlayRestriction:'ReservationDenied_CrossPlayRestriction',ReservationDenied_Banned:'ReservationDenied_Banned',ReservationRequestCanceled:'ReservationRequestCanceled',ReservationInvalid:'ReservationInvalid',BadSessionId:'BadSessionId',ReservationDenied_ContainsExistingPlayers:'ReservationDenied_ContainsExistingPlayers',EPartyReservationResult_MAX:'EPartyReservationResult_MAX', };
declare class PartyBeaconClient extends OnlineBeaconClient { 
	DestSessionId: string;
	PendingReservation: PartyReservation;
	RequestType: EClientRequestType;
	bPendingReservationSent: boolean;
	bCancelReservation: boolean;
	static GetDefaultObject(): PartyBeaconClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PartyBeaconClient;
	ServerUpdateReservationRequest(SessionId: string,ReservationUpdate: PartyReservation): void;
	ServerReservationRequest(SessionId: string,Reservation: PartyReservation): void;
	ServerRemoveMemberFromReservationRequest(SessionId: string,ReservationUpdate: PartyReservation): void;
	ServerCancelReservationRequest(PartyLeader: UniqueNetIdRepl): void;
	ServerAddOrUpdateReservationRequest(SessionId: string,Reservation: PartyReservation): void;
	ClientSendReservationUpdates(NumRemainingReservations: number): void;
	ClientSendReservationFull(): void;
	ClientReservationResponse(ReservationResponse: EPartyReservationResult): void;
	ClientCancelReservationResponse(ReservationResponse: EPartyReservationResult): void;
	static C(Other: UObject | any): PartyBeaconClient;
}

declare class PartyBeaconCrossplayPlatformMapping { 
	PlatformName: string;
	PlatformType: string;
	clone() : PartyBeaconCrossplayPlatformMapping;
	static C(Other: UObject | any): PartyBeaconCrossplayPlatformMapping;
}

declare class PartyBeaconState extends UObject { 
	SessionName: string;
	NumConsumedReservations: number;
	MaxReservations: number;
	NumTeams: number;
	NumPlayersPerTeam: number;
	TeamAssignmentMethod: string;
	ReservedHostTeamNum: number;
	ForceTeamNum: number;
	bRestrictCrossConsole: boolean;
	PlatformCrossplayRestrictions: string[];
	PlatformTypeMapping: PartyBeaconCrossplayPlatformMapping[];
	bEnableRemovalRequests: boolean;
	Reservations: PartyReservation[];
	static Load(ResourceName: string): PartyBeaconState;
	static Find(Outer: UObject, ResourceName: string): PartyBeaconState;
	static GetDefaultObject(): PartyBeaconState;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PartyBeaconState;
	static C(Other: UObject | any): PartyBeaconState;
}

declare class PartyBeaconHost extends OnlineBeaconHostObject { 
	State: PartyBeaconState;
	bLogoutOnSessionTimeout: boolean;
	SessionTimeoutSecs: number;
	TravelSessionTimeoutSecs: number;
	static GetDefaultObject(): PartyBeaconHost;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PartyBeaconHost;
	static C(Other: UObject | any): PartyBeaconHost;
}

declare type EMPMatchOutcome = 'None' | 'Quit' | 'Won' | 'Lost' | 'Tied' | 'TimeExpired' | 'First' | 'Second' | 'Third' | 'Fourth' | 'EMPMatchOutcome_MAX';
declare var EMPMatchOutcome : { None:'None',Quit:'Quit',Won:'Won',Lost:'Lost',Tied:'Tied',TimeExpired:'TimeExpired',First:'First',Second:'Second',Third:'Third',Fourth:'Fourth',EMPMatchOutcome_MAX:'EMPMatchOutcome_MAX', };
declare class QuitMatchCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): QuitMatchCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): QuitMatchCallbackProxy;
	static GetDefaultObject(): QuitMatchCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): QuitMatchCallbackProxy;
	static QuitMatch(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,Outcome: EMPMatchOutcome,TurnTimeoutInSeconds: number): QuitMatchCallbackProxy;
	static C(Other: UObject | any): QuitMatchCallbackProxy;
}

declare class ShowLoginUICallbackProxy extends BlueprintAsyncActionBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(PlayerController: PlayerController) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(PlayerController: PlayerController) => void>;
	static Load(ResourceName: string): ShowLoginUICallbackProxy;
	static Find(Outer: UObject, ResourceName: string): ShowLoginUICallbackProxy;
	static GetDefaultObject(): ShowLoginUICallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShowLoginUICallbackProxy;
	static ShowExternalLoginUI(WorldContextObject: UObject,InPlayerController: PlayerController): ShowLoginUICallbackProxy;
	static C(Other: UObject | any): ShowLoginUICallbackProxy;
}

declare class SpectatorReservation { 
	SpectatorId: UniqueNetIdRepl;
	Spectator: PlayerReservation;
	clone() : SpectatorReservation;
	static C(Other: UObject | any): SpectatorReservation;
}

declare type ESpectatorClientRequestType = 'NonePending' | 'ExistingSessionReservation' | 'ReservationUpdate' | 'EmptyServerReservation' | 'Reconnect' | 'Abandon' | 'ESpectatorClientRequestType_MAX';
declare var ESpectatorClientRequestType : { NonePending:'NonePending',ExistingSessionReservation:'ExistingSessionReservation',ReservationUpdate:'ReservationUpdate',EmptyServerReservation:'EmptyServerReservation',Reconnect:'Reconnect',Abandon:'Abandon',ESpectatorClientRequestType_MAX:'ESpectatorClientRequestType_MAX', };
declare type ESpectatorReservationResult = 'NoResult' | 'RequestPending' | 'GeneralError' | 'SpectatorLimitReached' | 'IncorrectPlayerCount' | 'RequestTimedOut' | 'ReservationDuplicate' | 'ReservationNotFound' | 'ReservationAccepted' | 'ReservationDenied' | 'ReservationDenied_CrossPlayRestriction' | 'ReservationDenied_Banned' | 'ReservationRequestCanceled' | 'ReservationInvalid' | 'BadSessionId' | 'ReservationDenied_ContainsExistingPlayers' | 'ESpectatorReservationResult_MAX';
declare var ESpectatorReservationResult : { NoResult:'NoResult',RequestPending:'RequestPending',GeneralError:'GeneralError',SpectatorLimitReached:'SpectatorLimitReached',IncorrectPlayerCount:'IncorrectPlayerCount',RequestTimedOut:'RequestTimedOut',ReservationDuplicate:'ReservationDuplicate',ReservationNotFound:'ReservationNotFound',ReservationAccepted:'ReservationAccepted',ReservationDenied:'ReservationDenied',ReservationDenied_CrossPlayRestriction:'ReservationDenied_CrossPlayRestriction',ReservationDenied_Banned:'ReservationDenied_Banned',ReservationRequestCanceled:'ReservationRequestCanceled',ReservationInvalid:'ReservationInvalid',BadSessionId:'BadSessionId',ReservationDenied_ContainsExistingPlayers:'ReservationDenied_ContainsExistingPlayers',ESpectatorReservationResult_MAX:'ESpectatorReservationResult_MAX', };
declare class SpectatorBeaconClient extends OnlineBeaconClient { 
	DestSessionId: string;
	PendingReservation: SpectatorReservation;
	RequestType: ESpectatorClientRequestType;
	bPendingReservationSent: boolean;
	bCancelReservation: boolean;
	static GetDefaultObject(): SpectatorBeaconClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpectatorBeaconClient;
	ServerReservationRequest(SessionId: string,Reservation: SpectatorReservation): void;
	ServerCancelReservationRequest(Spectator: UniqueNetIdRepl): void;
	ClientSendReservationUpdates(NumRemainingReservations: number): void;
	ClientSendReservationFull(): void;
	ClientReservationResponse(ReservationResponse: ESpectatorReservationResult): void;
	ClientCancelReservationResponse(ReservationResponse: ESpectatorReservationResult): void;
	static C(Other: UObject | any): SpectatorBeaconClient;
}

declare class SpectatorBeaconState extends UObject { 
	SessionName: string;
	NumConsumedReservations: number;
	MaxReservations: number;
	bRestrictCrossConsole: boolean;
	Reservations: SpectatorReservation[];
	static Load(ResourceName: string): SpectatorBeaconState;
	static Find(Outer: UObject, ResourceName: string): SpectatorBeaconState;
	static GetDefaultObject(): SpectatorBeaconState;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpectatorBeaconState;
	static C(Other: UObject | any): SpectatorBeaconState;
}

declare class SpectatorBeaconHost extends OnlineBeaconHostObject { 
	State: SpectatorBeaconState;
	bLogoutOnSessionTimeout: boolean;
	SessionTimeoutSecs: number;
	TravelSessionTimeoutSecs: number;
	static GetDefaultObject(): SpectatorBeaconHost;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpectatorBeaconHost;
	static C(Other: UObject | any): SpectatorBeaconHost;
}

declare class TestBeaconClient extends OnlineBeaconClient { 
	static GetDefaultObject(): TestBeaconClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBeaconClient;
	ServerPong(): void;
	ClientPing(): void;
	static C(Other: UObject | any): TestBeaconClient;
}

declare class TestBeaconHost extends OnlineBeaconHostObject { 
	static GetDefaultObject(): TestBeaconHost;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBeaconHost;
	static C(Other: UObject | any): TestBeaconHost;
}

declare class TurnBasedBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): TurnBasedBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): TurnBasedBlueprintLibrary;
	static GetDefaultObject(): TurnBasedBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TurnBasedBlueprintLibrary;
	static RegisterTurnBasedMatchInterfaceObject(WorldContextObject: UObject,PlayerController: PlayerController,UObject: UObject): void;
	static GetPlayerDisplayName(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,PlayerIndex: number,PlayerDisplayName?: string): {PlayerDisplayName: string};
	static GetMyPlayerIndex(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,PlayerIndex?: number): {PlayerIndex: number};
	static GetIsMyTurn(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,bIsMyTurn?: boolean): {bIsMyTurn: boolean};
	static C(Other: UObject | any): TurnBasedBlueprintLibrary;
}

declare class VoipListenerSynthComponent extends SynthComponent { 
	static Load(ResourceName: string): VoipListenerSynthComponent;
	static Find(Outer: UObject, ResourceName: string): VoipListenerSynthComponent;
	static GetDefaultObject(): VoipListenerSynthComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VoipListenerSynthComponent;
	IsIdling(): boolean;
	static C(Other: UObject | any): VoipListenerSynthComponent;
}

declare class K2Node_InAppPurchase extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchase;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchase;
	static GetDefaultObject(): K2Node_InAppPurchase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchase;
	static C(Other: UObject | any): K2Node_InAppPurchase;
}

declare class K2Node_InAppPurchase2 extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchase2;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchase2;
	static GetDefaultObject(): K2Node_InAppPurchase2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchase2;
	static C(Other: UObject | any): K2Node_InAppPurchase2;
}

declare class K2Node_InAppPurchaseQuery extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchaseQuery;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchaseQuery;
	static GetDefaultObject(): K2Node_InAppPurchaseQuery;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchaseQuery;
	static C(Other: UObject | any): K2Node_InAppPurchaseQuery;
}

declare class K2Node_InAppPurchaseQuery2 extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchaseQuery2;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchaseQuery2;
	static GetDefaultObject(): K2Node_InAppPurchaseQuery2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchaseQuery2;
	static C(Other: UObject | any): K2Node_InAppPurchaseQuery2;
}

declare class K2Node_InAppPurchaseQueryOwned2 extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchaseQueryOwned2;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchaseQueryOwned2;
	static GetDefaultObject(): K2Node_InAppPurchaseQueryOwned2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchaseQueryOwned2;
	static C(Other: UObject | any): K2Node_InAppPurchaseQueryOwned2;
}

declare class K2Node_InAppPurchaseRestore extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchaseRestore;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchaseRestore;
	static GetDefaultObject(): K2Node_InAppPurchaseRestore;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchaseRestore;
	static C(Other: UObject | any): K2Node_InAppPurchaseRestore;
}

declare class K2Node_InAppPurchaseRestore2 extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchaseRestore2;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchaseRestore2;
	static GetDefaultObject(): K2Node_InAppPurchaseRestore2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchaseRestore2;
	static C(Other: UObject | any): K2Node_InAppPurchaseRestore2;
}

declare class K2Node_InAppPurchaseUnprocessed2 extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchaseUnprocessed2;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchaseUnprocessed2;
	static GetDefaultObject(): K2Node_InAppPurchaseUnprocessed2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchaseUnprocessed2;
	static C(Other: UObject | any): K2Node_InAppPurchaseUnprocessed2;
}

declare class K2Node_LeaderboardFlush extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_LeaderboardFlush;
	static Find(Outer: UObject, ResourceName: string): K2Node_LeaderboardFlush;
	static GetDefaultObject(): K2Node_LeaderboardFlush;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_LeaderboardFlush;
	static C(Other: UObject | any): K2Node_LeaderboardFlush;
}

declare class K2Node_LeaderboardQuery extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_LeaderboardQuery;
	static Find(Outer: UObject, ResourceName: string): K2Node_LeaderboardQuery;
	static GetDefaultObject(): K2Node_LeaderboardQuery;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_LeaderboardQuery;
	static C(Other: UObject | any): K2Node_LeaderboardQuery;
}

declare type EFixedFoveatedRenderingLevel = 'FFR_Off' | 'FFR_Low' | 'FFR_Medium' | 'FFR_High' | 'FFR_HighTop' | 'FFR_MAX';
declare var EFixedFoveatedRenderingLevel : { FFR_Off:'FFR_Off',FFR_Low:'FFR_Low',FFR_Medium:'FFR_Medium',FFR_High:'FFR_High',FFR_HighTop:'FFR_HighTop',FFR_MAX:'FFR_MAX', };
declare type EColorSpace = 'Unknown' | 'Unmanaged' | 'Rec_2020' | 'Rec_709' | 'Rift_CV1' | 'Rift_S' | 'Quest' | 'P3' | 'Adobe_RGB' | 'EColorSpace_MAX';
declare var EColorSpace : { Unknown:'Unknown',Unmanaged:'Unmanaged',Rec_2020:'Rec_2020',Rec_709:'Rec_709',Rift_CV1:'Rift_CV1',Rift_S:'Rift_S',Quest:'Quest',P3:'P3',Adobe_RGB:'Adobe_RGB',EColorSpace_MAX:'EColorSpace_MAX', };
declare class HmdUserProfileField { 
	FieldName: string;
	FieldValue: string;
	clone() : HmdUserProfileField;
	static C(Other: UObject | any): HmdUserProfileField;
}

declare class HmdUserProfile { 
	Name: string;
	Gender: string;
	PlayerHeight: number;
	EyeHeight: number;
	IPD: number;
	NeckToEyeDistance: Vector2D;
	ExtraFields: HmdUserProfileField[];
	clone() : HmdUserProfile;
	static C(Other: UObject | any): HmdUserProfile;
	GetUserProfile(): {Profile: HmdUserProfile, $: boolean};
	static GetUserProfile(Profile?: HmdUserProfile): {Profile: HmdUserProfile, $: boolean};
}

declare type EOculusDeviceType = 'OculusMobile_Deprecated0' | 'OculusQuest' | 'OculusQuest2' | 'Rift' | 'Rift_S' | 'Quest_Link' | 'Quest2_Link' | 'OculusUnknown' | 'EOculusDeviceType_MAX';
declare var EOculusDeviceType : { OculusMobile_Deprecated0:'OculusMobile_Deprecated0',OculusQuest:'OculusQuest',OculusQuest2:'OculusQuest2',Rift:'Rift',Rift_S:'Rift_S',Quest_Link:'Quest_Link',Quest2_Link:'Quest2_Link',OculusUnknown:'OculusUnknown',EOculusDeviceType_MAX:'EOculusDeviceType_MAX', };
declare class OculusFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): OculusFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): OculusFunctionLibrary;
	static GetDefaultObject(): OculusFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OculusFunctionLibrary;
	static SetReorientHMDOnControllerRecenter(recenterMode: boolean): void;
	static SetPositionScale3D(PosScale3D: Vector): void;
	static SetGuardianVisibility(GuardianVisible: boolean): void;
	static SetFixedFoveatedRenderingLevel(Level: EFixedFoveatedRenderingLevel,isDynamic: boolean): void;
	static SetDisplayFrequency(RequestedFrequency: number): void;
	static SetCPUAndGPULevels(CPULevel: number,GPULevel: number): void;
	static SetColorScaleAndOffset(ColorScale: LinearColor,ColorOffset: LinearColor,bApplyToAllLayers: boolean): void;
	static SetClientColorDesc(ColorSpace: EColorSpace): void;
	static SetBaseRotationAndPositionOffset(BaseRot: Rotator,PosOffset: Vector,Options: EOrientPositionSelector): void;
	static SetBaseRotationAndBaseOffsetInMeters(Rotation: Rotator,BaseOffsetInMeters: Vector,Options: EOrientPositionSelector): void;
	static IsGuardianDisplayed(): boolean;
	static IsGuardianConfigured(): boolean;
	static IsDeviceTracked(DeviceType: ETrackedDeviceType): boolean;
	static HasSystemOverlayPresent(): boolean;
	static HasInputFocus(): boolean;
	static GetUserProfile(Profile?: HmdUserProfile): {Profile: HmdUserProfile, $: boolean};
	static GetSystemHmd3DofModeEnabled(): boolean;
	static GetRawSensorData(AngularAcceleration?: Vector,LinearAcceleration?: Vector,AngularVelocity?: Vector,LinearVelocity?: Vector,TimeInSeconds?: number,DeviceType?: ETrackedDeviceType): {AngularAcceleration: Vector, LinearAcceleration: Vector, AngularVelocity: Vector, LinearVelocity: Vector, TimeInSeconds: number};
	static GetPose(DeviceRotation?: Rotator,DevicePosition?: Vector,NeckPosition?: Vector,bUseOrienationForPlayerCamera?: boolean,bUsePositionForPlayerCamera?: boolean,PositionScale?: Vector): {DeviceRotation: Rotator, DevicePosition: Vector, NeckPosition: Vector};
	static GetPointGuardianIntersection(Point: Vector,BoundaryType: EBoundaryType): GuardianTestResult;
	static GetPlayAreaTransform(): Transform;
	static GetNodeGuardianIntersection(DeviceType: ETrackedDeviceType,BoundaryType: EBoundaryType): GuardianTestResult;
	static GetHmdColorDesc(): EColorSpace;
	static GetGuardianPoints(BoundaryType: EBoundaryType,UsePawnSpace: boolean): Vector[];
	static GetGuardianDimensions(BoundaryType: EBoundaryType): Vector;
	static GetGPUUtilization(IsGPUAvailable?: boolean,GPUUtilization?: number): {IsGPUAvailable: boolean, GPUUtilization: number};
	static GetGPUFrameTime(): number;
	static GetFixedFoveatedRenderingLevel(): EFixedFoveatedRenderingLevel;
	static GetDeviceType(): EOculusDeviceType;
	static GetDeviceName(): string;
	static GetCurrentDisplayFrequency(): number;
	static GetBaseRotationAndPositionOffset(OutRot?: Rotator,OutPosOffset?: Vector): {OutRot: Rotator, OutPosOffset: Vector};
	static GetBaseRotationAndBaseOffsetInMeters(OutRotation?: Rotator,OutBaseOffsetInMeters?: Vector): {OutRotation: Rotator, OutBaseOffsetInMeters: Vector};
	static GetAvailableDisplayFrequencies(): number[];
	static EnablePositionTracking(bPositionTracking: boolean): void;
	static EnableOrientationTracking(bOrientationTracking: boolean): void;
	static ClearLoadingSplashScreens(): void;
	static AddLoadingSplashScreen(Texture: Texture2D,TranslationInMeters: Vector,Rotation: Rotator,SizeInMeters: Vector2D,DeltaRotation: Rotator,bClearBeforeAdd: boolean): void;
	static C(Other: UObject | any): OculusFunctionLibrary;
}

declare class OculusSplashDesc { 
	TexturePath: SoftObjectPath;
	TransformInMeters: Transform;
	QuadSizeInMeters: Vector2D;
	DeltaRotation: Quat;
	TextureOffset: Vector2D;
	TextureScale: Vector2D;
	bNoAlphaChannel: boolean;
	clone() : OculusSplashDesc;
	static C(Other: UObject | any): OculusSplashDesc;
}

declare type EHandTrackingSupport = 'ControllersOnly' | 'ControllersAndHands' | 'HandsOnly' | 'EHandTrackingSupport_MAX';
declare var EHandTrackingSupport : { ControllersOnly:'ControllersOnly',ControllersAndHands:'ControllersAndHands',HandsOnly:'HandsOnly',EHandTrackingSupport_MAX:'EHandTrackingSupport_MAX', };
declare class OculusHMDRuntimeSettings extends UObject { 
	bAutoEnabled: boolean;
	SplashDescs: OculusSplashDesc[];
	bEnableSpecificColorGamut: boolean;
	ColorSpace: EColorSpace;
	bSupportsDash: boolean;
	bCompositesDepth: boolean;
	bHQDistortion: boolean;
	PixelDensityMin: number;
	PixelDensityMax: number;
	CPULevel: number;
	GPULevel: number;
	FFRLevel: EFixedFoveatedRenderingLevel;
	FFRDynamic: boolean;
	bChromaCorrection: boolean;
	bRecenterHMDWithController: boolean;
	bFocusAware: boolean;
	bLateLatching: boolean;
	bRequiresSystemKeyboard: boolean;
	HandTrackingSupport: EHandTrackingSupport;
	bPhaseSync: boolean;
	static Load(ResourceName: string): OculusHMDRuntimeSettings;
	static Find(Outer: UObject, ResourceName: string): OculusHMDRuntimeSettings;
	static GetDefaultObject(): OculusHMDRuntimeSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OculusHMDRuntimeSettings;
	static C(Other: UObject | any): OculusHMDRuntimeSettings;
}

declare class OculusResourceHolder extends UObject { 
	PokeAHoleMaterial: Material;
	static Load(ResourceName: string): OculusResourceHolder;
	static Find(Outer: UObject, ResourceName: string): OculusResourceHolder;
	static GetDefaultObject(): OculusResourceHolder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OculusResourceHolder;
	static C(Other: UObject | any): OculusResourceHolder;
}

declare class OculusSceneCaptureCubemap extends UObject { 
	CaptureComponents: SceneCaptureComponent2D[];
	static Load(ResourceName: string): OculusSceneCaptureCubemap;
	static Find(Outer: UObject, ResourceName: string): OculusSceneCaptureCubemap;
	static GetDefaultObject(): OculusSceneCaptureCubemap;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OculusSceneCaptureCubemap;
	static C(Other: UObject | any): OculusSceneCaptureCubemap;
}

declare class KismetProceduralMeshLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetProceduralMeshLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetProceduralMeshLibrary;
	static GetDefaultObject(): KismetProceduralMeshLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetProceduralMeshLibrary;
	static SliceProceduralMesh(InProcMesh: ProceduralMeshComponent,PlanePosition: Vector,PlaneNormal: Vector,bCreateOtherHalf: boolean,OutOtherHalfProcMesh?: ProceduralMeshComponent,CapOption?: EProcMeshSliceCapOption,CapMaterial?: MaterialInterface): {OutOtherHalfProcMesh: ProceduralMeshComponent};
	static GetSectionFromStaticMesh(InMesh: StaticMesh,LODIndex: number,SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
	static GetSectionFromProceduralMesh(InProcMesh: ProceduralMeshComponent,SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
	static GenerateBoxMesh(BoxRadius: Vector,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
	static CreateGridMeshWelded(NumX: number,NumY: number,Triangles?: number[],Vertices?: Vector[],UVs?: Vector2D[],GridSpacing?: number): {Triangles: number[], Vertices: Vector[], UVs: Vector2D[]};
	static CreateGridMeshTriangles(NumX: number,NumY: number,bWinding: boolean,Triangles?: number[]): {Triangles: number[]};
	static CreateGridMeshSplit(NumX: number,NumY: number,Triangles?: number[],Vertices?: Vector[],UVs?: Vector2D[],UV1s?: Vector2D[],GridSpacing?: number): {Triangles: number[], Vertices: Vector[], UVs: Vector2D[], UV1s: Vector2D[]};
	static CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent: StaticMeshComponent,LODIndex: number,ProcMeshComponent: ProceduralMeshComponent,bCreateCollision: boolean): void;
	static ConvertQuadToTriangles(Triangles?: number[],Vert0?: number,Vert1?: number,Vert2?: number,Vert3?: number): {Triangles: number[]};
	static CalculateTangentsForMesh(Vertices: Vector[],Triangles: number[],UVs: Vector2D[],Normals?: Vector[],Tangents?: ProcMeshTangent[]): {Normals: Vector[], Tangents: ProcMeshTangent[]};
	static C(Other: UObject | any): KismetProceduralMeshLibrary;
}

declare class SteamVRChaperoneComponent extends ActorComponent { 
	OnLeaveBounds: UnrealEngineMulticastDelegate<() => void>;
	OnReturnToBounds: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): SteamVRChaperoneComponent;
	static Find(Outer: UObject, ResourceName: string): SteamVRChaperoneComponent;
	static GetDefaultObject(): SteamVRChaperoneComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SteamVRChaperoneComponent;
	GetBounds(): Vector[];
	static C(Other: UObject | any): SteamVRChaperoneComponent;
}

declare type ESteamVRTrackedDeviceType = 'Controller' | 'TrackingReference' | 'Other' | 'Invalid' | 'ESteamVRTrackedDeviceType_MAX';
declare var ESteamVRTrackedDeviceType : { Controller:'Controller',TrackingReference:'TrackingReference',Other:'Other',Invalid:'Invalid',ESteamVRTrackedDeviceType_MAX:'ESteamVRTrackedDeviceType_MAX', };
declare class SteamVRFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): SteamVRFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): SteamVRFunctionLibrary;
	static GetDefaultObject(): SteamVRFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SteamVRFunctionLibrary;
	static GetValidTrackedDeviceIds(DeviceType: ESteamVRTrackedDeviceType,OutTrackedDeviceIds?: number[]): {OutTrackedDeviceIds: number[]};
	static GetTrackedDevicePositionAndOrientation(DeviceID: number,OutPosition?: Vector,OutOrientation?: Rotator): {OutPosition: Vector, OutOrientation: Rotator, $: boolean};
	static GetHandPositionAndOrientation(ControllerIndex: number,hand: EControllerHand,OutPosition?: Vector,OutOrientation?: Rotator): {OutPosition: Vector, OutOrientation: Rotator, $: boolean};
	static C(Other: UObject | any): SteamVRFunctionLibrary;
}

declare class SteamVRHQStereoLayerShape extends StereoLayerShapeQuad { 
	bCurved: boolean;
	bAntiAlias: boolean;
	AutoCurveMinDistance: number;
	AutoCurveMaxDistance: number;
	static Load(ResourceName: string): SteamVRHQStereoLayerShape;
	static Find(Outer: UObject, ResourceName: string): SteamVRHQStereoLayerShape;
	static GetDefaultObject(): SteamVRHQStereoLayerShape;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SteamVRHQStereoLayerShape;
	SetCurved(InCurved: boolean): void;
	SetAutoCurveMinDistance(InDistance: number): void;
	SetAutoCurveMaxDistance(InDistance: number): void;
	SetAntiAlias(InAntiAlias: boolean): void;
	static C(Other: UObject | any): SteamVRHQStereoLayerShape;
}

declare class SteamVRInputBindingInfo { 
	DevicePathName: string;
	InputPathName: string;
	ModeName: string;
	SlotName: string;
	clone() : SteamVRInputBindingInfo;
	static C(Other: UObject | any): SteamVRInputBindingInfo;
}

declare type ESteamVRInputStringBits = 'VR_InputString_Hand' | 'VR_InputString_ControllerType' | 'VR_InputString_InputSource' | 'VR_InputString_All' | 'VR_InputString_MAX';
declare var ESteamVRInputStringBits : { VR_InputString_Hand:'VR_InputString_Hand',VR_InputString_ControllerType:'VR_InputString_ControllerType',VR_InputString_InputSource:'VR_InputString_InputSource',VR_InputString_All:'VR_InputString_All',VR_InputString_MAX:'VR_InputString_MAX', };
declare class SteamVRInputOriginInfo { 
	TrackedDeviceIndex: number;
	RenderModelComponentName: string;
	TrackedDeviceModel: string;
	clone() : SteamVRInputOriginInfo;
	static C(Other: UObject | any): SteamVRInputOriginInfo;
}

declare class SteamVRActionSet { 
	Path: string;
	clone() : SteamVRActionSet;
	static C(Other: UObject | any): SteamVRActionSet;
}

declare class SteamVRAction { 
	Name: string;
	Path: string;
	clone() : SteamVRAction;
	static C(Other: UObject | any): SteamVRAction;
	GetSteamVR_InputBindingInfo(): SteamVRInputBindingInfo[];
	GetSteamVR_OriginLocalizedName(LocalizedParts: ESteamVRInputStringBits[],OriginLocalizedName?: string): {OriginLocalizedName: string};
	GetSteamVR_OriginTrackedDeviceInfo(InputOriginInfo?: SteamVRInputOriginInfo): {InputOriginInfo: SteamVRInputOriginInfo, $: boolean};
	ShowSteamVR_ActionOrigin(SteamVRActionSet: SteamVRActionSet): void;
	static GetSteamVR_InputBindingInfo(SteamVRActionHandle: SteamVRAction): SteamVRInputBindingInfo[];
	static GetSteamVR_OriginLocalizedName(SteamVRAction: SteamVRAction,LocalizedParts: ESteamVRInputStringBits[],OriginLocalizedName?: string): {OriginLocalizedName: string};
	static GetSteamVR_OriginTrackedDeviceInfo(SteamVRAction: SteamVRAction,InputOriginInfo?: SteamVRInputOriginInfo): {InputOriginInfo: SteamVRInputOriginInfo, $: boolean};
	static ShowSteamVR_ActionOrigin(SteamVRAction: SteamVRAction,SteamVRActionSet: SteamVRActionSet): void;
}

declare class SteamVRSkeletonTransform { 
	Root: Transform;
	wrist: Transform;
	Thumb_0: Transform;
	Thumb_1: Transform;
	Thumb_2: Transform;
	Thumb_3: Transform;
	index_0: Transform;
	index_1: Transform;
	index_2: Transform;
	index_3: Transform;
	index_4: Transform;
	Middle_0: Transform;
	Middle_1: Transform;
	Middle_2: Transform;
	Middle_3: Transform;
	Middle_4: Transform;
	Ring_0: Transform;
	Ring_1: Transform;
	Ring_2: Transform;
	Ring_3: Transform;
	Ring_4: Transform;
	Pinky_0: Transform;
	Pinky_1: Transform;
	Pinky_2: Transform;
	Pinky_3: Transform;
	Pinky_4: Transform;
	Aux_Thumb: Transform;
	Aux_Index: Transform;
	Aux_Middle: Transform;
	Aux_Ring: Transform;
	Aux_Pinky: Transform;
	clone() : SteamVRSkeletonTransform;
	static C(Other: UObject | any): SteamVRSkeletonTransform;
	GetSkeletalTransform(RightHand?: SteamVRSkeletonTransform,bWithController?: boolean): {LeftHand: SteamVRSkeletonTransform, RightHand: SteamVRSkeletonTransform};
	static GetSkeletalTransform(LeftHand?: SteamVRSkeletonTransform,RightHand?: SteamVRSkeletonTransform,bWithController?: boolean): {LeftHand: SteamVRSkeletonTransform, RightHand: SteamVRSkeletonTransform};
}

declare type EHand = 'VR_LeftHand' | 'VR_RightHand' | 'VR_MAX';
declare var EHand : { VR_LeftHand:'VR_LeftHand',VR_RightHand:'VR_RightHand',VR_MAX:'VR_MAX', };
declare class SteamVRFingerCurls { 
	Thumb: number;
	index: number;
	Middle: number;
	Ring: number;
	Pinky: number;
	clone() : SteamVRFingerCurls;
	static C(Other: UObject | any): SteamVRFingerCurls;
}

declare class SteamVRFingerSplays { 
	Thumb_Index: number;
	Index_Middle: number;
	Middle_Ring: number;
	Ring_Pinky: number;
	clone() : SteamVRFingerSplays;
	static C(Other: UObject | any): SteamVRFingerSplays;
}

declare type ESkeletalSummaryDataType = 'VR_SummaryType_FromAnimation' | 'VR_SummaryType_FromDevice' | 'VR_SummaryType_MAX';
declare var ESkeletalSummaryDataType : { VR_SummaryType_FromAnimation:'VR_SummaryType_FromAnimation',VR_SummaryType_FromDevice:'VR_SummaryType_FromDevice',VR_SummaryType_MAX:'VR_SummaryType_MAX', };
declare type EControllerFidelity = 'VR_ControllerFidelity_Estimated' | 'VR_ControllerFidelity_Full' | 'VR_ControllerFidelity_Partial' | 'VR_ControllerFidelity_MAX';
declare var EControllerFidelity : { VR_ControllerFidelity_Estimated:'VR_ControllerFidelity_Estimated',VR_ControllerFidelity_Full:'VR_ControllerFidelity_Full',VR_ControllerFidelity_Partial:'VR_ControllerFidelity_Partial',VR_ControllerFidelity_MAX:'VR_ControllerFidelity_MAX', };
declare class SteamVRInputDeviceFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): SteamVRInputDeviceFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): SteamVRInputDeviceFunctionLibrary;
	static GetDefaultObject(): SteamVRInputDeviceFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SteamVRInputDeviceFunctionLibrary;
	static ShowSteamVR_ActionOrigin(SteamVRAction: SteamVRAction,SteamVRActionSet: SteamVRActionSet): void;
	static ShowAllSteamVR_ActionOrigins(): void;
	static SetSteamVR_GlobalPredictedSecondsFromNow(NewValue: number): number;
	static SetPoseSource(bUseSkeletonPose: boolean): void;
	static SetCurlsAndSplaysState(NewLeftHandState: boolean,NewRightHandState: boolean): void;
	static ResetSeatedPosition(): boolean;
	static PlaySteamVR_HapticFeedback(hand: ESteamVRHand,StartSecondsFromNow: number,DurationSeconds: number,Frequency: number,Amplitude: number): void;
	static GetUserIPD(): number;
	static GetSteamVR_OriginTrackedDeviceInfo(SteamVRAction: SteamVRAction,InputOriginInfo?: SteamVRInputOriginInfo): {InputOriginInfo: SteamVRInputOriginInfo, $: boolean};
	static GetSteamVR_OriginLocalizedName(SteamVRAction: SteamVRAction,LocalizedParts: ESteamVRInputStringBits[],OriginLocalizedName?: string): {OriginLocalizedName: string};
	static GetSteamVR_InputBindingInfo(SteamVRActionHandle: SteamVRAction): SteamVRInputBindingInfo[];
	static GetSteamVR_HandPoseRelativeToNow(Position?: Vector,Orientation?: Rotator,hand?: ESteamVRHand,PredictedSecondsFromNow?: number): {Position: Vector, Orientation: Rotator, $: boolean};
	static GetSteamVR_GlobalPredictedSecondsFromNow(): number;
	static GetSteamVR_ActionSetArray(SteamVRActionSets?: SteamVRActionSet[]): {SteamVRActionSets: SteamVRActionSet[]};
	static GetSteamVR_ActionArray(SteamVRActions?: SteamVRAction[]): {SteamVRActions: SteamVRAction[]};
	static GetSkeletalTransform(LeftHand?: SteamVRSkeletonTransform,RightHand?: SteamVRSkeletonTransform,bWithController?: boolean): {LeftHand: SteamVRSkeletonTransform, RightHand: SteamVRSkeletonTransform};
	static GetSkeletalState(LeftHandState?: boolean,RightHandState?: boolean): {LeftHandState: boolean, RightHandState: boolean};
	static GetRightHandPoseData(Position?: Vector,Orientation?: Rotator,AngularVelocity?: Vector,Velocity?: Vector): {Position: Vector, Orientation: Rotator, AngularVelocity: Vector, Velocity: Vector};
	static GetPoseSource(bUsingSkeletonPose?: boolean): {bUsingSkeletonPose: boolean};
	static GetLeftHandPoseData(Position?: Vector,Orientation?: Rotator,AngularVelocity?: Vector,Velocity?: Vector): {Position: Vector, Orientation: Rotator, AngularVelocity: Vector, Velocity: Vector};
	static GetFingerCurlsAndSplays(hand: EHand,FingerCurls?: SteamVRFingerCurls,FingerSplays?: SteamVRFingerSplays,SummaryDataType?: ESkeletalSummaryDataType): {FingerCurls: SteamVRFingerCurls, FingerSplays: SteamVRFingerSplays};
	static GetCurlsAndSplaysState(LeftHandState?: boolean,RightHandState?: boolean): {LeftHandState: boolean, RightHandState: boolean};
	static GetControllerFidelity(LeftControllerFidelity?: EControllerFidelity,RightControllerFidelity?: EControllerFidelity): {LeftControllerFidelity: EControllerFidelity, RightControllerFidelity: EControllerFidelity};
	static FindSteamVR_OriginTrackedDeviceInfo(ActionName: string,bResult?: boolean,InputOriginInfo?: SteamVRInputOriginInfo,ActionSet?: string): {bResult: boolean, InputOriginInfo: SteamVRInputOriginInfo};
	static FindSteamVR_InputBindingInfo(ActionName: string,ActionSet: string): SteamVRInputBindingInfo[];
	static FindSteamVR_ActionOrigin(ActionName: string,ActionSet: string): boolean;
	static FindSteamVR_Action(ActionName: string,bResult?: boolean,FoundAction?: SteamVRAction,FoundActionSet?: SteamVRActionSet,ActionSet?: string): {bResult: boolean, FoundAction: SteamVRAction, FoundActionSet: SteamVRActionSet};
	static C(Other: UObject | any): SteamVRInputDeviceFunctionLibrary;
}

declare class SteamVRTrackingReferences extends ActorComponent { 
	OnTrackedDeviceActivated: UnrealEngineMulticastDelegate<(DeviceID: number, DeviceClass: string, DeviceModel: string) => void>;
	OnTrackedDeviceDeactivated: UnrealEngineMulticastDelegate<(DeviceID: number, DeviceClass: string, DeviceModel: string) => void>;
	ActiveDevicePollFrequency: number;
	TrackingReferenceScale: Vector;
	TrackingReferences: StaticMeshComponent[];
	static Load(ResourceName: string): SteamVRTrackingReferences;
	static Find(Outer: UObject, ResourceName: string): SteamVRTrackingReferences;
	static GetDefaultObject(): SteamVRTrackingReferences;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SteamVRTrackingReferences;
	ShowTrackingReferences(TrackingReferenceMesh: StaticMesh): boolean;
	HideTrackingReferences(): void;
	static C(Other: UObject | any): SteamVRTrackingReferences;
}

declare type ECompilerVersion = 'Default' | 'VisualStudio2015' | 'VisualStudio2017' | 'VisualStudio2019' | 'VisualStudio2022' | 'ECompilerVersion_MAX';
declare var ECompilerVersion : { Default:'Default',VisualStudio2015:'VisualStudio2015',VisualStudio2017:'VisualStudio2017',VisualStudio2019:'VisualStudio2019',VisualStudio2022:'VisualStudio2022',ECompilerVersion_MAX:'ECompilerVersion_MAX', };
declare type EDefaultGraphicsRHI = 'DefaultGraphicsRHI_Default' | 'DefaultGraphicsRHI_DX11' | 'DefaultGraphicsRHI_DX12' | 'DefaultGraphicsRHI_Vulkan' | 'DefaultGraphicsRHI_MAX';
declare var EDefaultGraphicsRHI : { DefaultGraphicsRHI_Default:'DefaultGraphicsRHI_Default',DefaultGraphicsRHI_DX11:'DefaultGraphicsRHI_DX11',DefaultGraphicsRHI_DX12:'DefaultGraphicsRHI_DX12',DefaultGraphicsRHI_Vulkan:'DefaultGraphicsRHI_Vulkan',DefaultGraphicsRHI_MAX:'DefaultGraphicsRHI_MAX', };
declare type EMinimumSupportedOS = 'MSOS_Vista' | 'MSOS_MAX';
declare var EMinimumSupportedOS : { MSOS_Vista:'MSOS_Vista',MSOS_MAX:'MSOS_MAX', };
declare class PlatformRuntimeAudioCompressionOverrides { 
	bOverrideCompressionTimes: boolean;
	DurationThreshold: number;
	MaxNumRandomBranches: number;
	SoundCueQualityIndex: number;
	clone() : PlatformRuntimeAudioCompressionOverrides;
	static C(Other: UObject | any): PlatformRuntimeAudioCompressionOverrides;
}

declare class WindowsTargetSettings extends UObject { 
	Compiler: ECompilerVersion;
	TargetedRHIs: string[];
	DefaultGraphicsRHI: EDefaultGraphicsRHI;
	MinimumOSVersion: EMinimumSupportedOS;
	AudioSampleRate: number;
	AudioCallbackBufferFrameSize: number;
	AudioNumBuffersToEnqueue: number;
	AudioMaxChannels: number;
	AudioNumSourceWorkers: number;
	SpatializationPlugin: string;
	ReverbPlugin: string;
	OcclusionPlugin: string;
	CompressionOverrides: PlatformRuntimeAudioCompressionOverrides;
	bUseAudioStreamCaching: boolean;
	CacheSizeKB: number;
	MaxChunkSizeOverrideKB: number;
	bResampleForDevice: boolean;
	MaxSampleRate: number;
	HighSampleRate: number;
	MedSampleRate: number;
	LowSampleRate: number;
	MinSampleRate: number;
	CompressionQualityModifier: number;
	AutoStreamingThreshold: number;
	SoundCueCookQualityIndex: number;
	static Load(ResourceName: string): WindowsTargetSettings;
	static Find(Outer: UObject, ResourceName: string): WindowsTargetSettings;
	static GetDefaultObject(): WindowsTargetSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WindowsTargetSettings;
	static C(Other: UObject | any): WindowsTargetSettings;
}

declare class SourceCodeAccessSettings extends UObject { 
	PreferredAccessor: string;
	static Load(ResourceName: string): SourceCodeAccessSettings;
	static Find(Outer: UObject, ResourceName: string): SourceCodeAccessSettings;
	static GetDefaultObject(): SourceCodeAccessSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SourceCodeAccessSettings;
	static C(Other: UObject | any): SourceCodeAccessSettings;
}

declare class LandscapeBlueprintBrush extends LandscapeBlueprintBrushBase { 
	static GetDefaultObject(): LandscapeBlueprintBrush;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeBlueprintBrush;
	static C(Other: UObject | any): LandscapeBlueprintBrush;
}

declare type ETimezoneSetting = 'InternationalDateLineWest' | 'CoordinatedUniversalTimeNeg11' | 'Samoa' | 'Hawaii' | 'Alaska' | 'PacificTime_USCAN' | 'BajaCalifornia' | 'MountainTime_USCAN' | 'Chihuahua_LaPaz_Mazatlan' | 'Arizona' | 'Saskatchewan' | 'CentralAmerica' | 'CentralTime_USCAN' | 'Guadalajara_MexicoCity_Monterrey' | 'EasternTime_USCAN' | 'Bogota_Lima_Quito' | 'Indiana_US' | 'Caracas' | 'AtlanticTime_Canada' | 'Cuiaba' | 'Santiago' | 'Georgetown_LaPaz_Manaus_SanJuan' | 'Asuncion' | 'Newfoundland' | 'Brasilia' | 'Greenland' | 'Montevideo' | 'Cayenne_Fortaleza' | 'BuenosAires' | 'MidAtlantic' | 'CoordinatedUniversalTimeNeg02' | 'Azores' | 'CaboVerdeIs' | 'Dublin_Edinburgh_Lisbon_London' | 'Monrovia_Reykjavik' | 'Casablanca' | 'UTC' | 'Belgrade_Bratislava_Budapest_Ljubljana_Prague' | 'Sarajevo_Skopje_Warsaw_Zagreb' | 'Brussels_Copenhagen_Madrid_Paris' | 'WestCentralAfrica' | 'Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna' | 'Windhoek' | 'Minsk' | 'Cairo' | 'Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius' | 'Athens_Bucharest' | 'Jerusalem' | 'Amman' | 'Beirut' | 'Harare_Pretoria' | 'Damascus' | 'Istanbul' | 'Kuwait_Riyadh' | 'Baghdad' | 'Nairobi' | 'Kaliningrad' | 'Tehran' | 'Moscow_StPetersburg_Volgograd' | 'AbuDhabi_Muscat' | 'Baku' | 'Yerevan' | 'Tbilisi' | 'PortLouis' | 'Kabul' | 'Tashkent' | 'Islamabad_Karachi' | 'Chennai_Kolkata_Mumbai_NewDelhi' | 'SriJayawardenepura' | 'Kathmandu' | 'Ekaterinburg' | 'Astana' | 'Dhaka' | 'Yangon_Rangoon' | 'Novosibirsk' | 'Bangkok_Hanoi_Jakarta' | 'Krasnoyarsk' | 'Beijing_Chongqing_HongKong_Urumqi' | 'KualaLumpur_Singapore' | 'Taipei' | 'Perth' | 'Ulaanbaatar' | 'Irkutsk' | 'Seoul' | 'Osaka_Sapporo_Tokyo' | 'Darwin' | 'Adelaide' | 'Yakutsk' | 'Canberra_Melbourne_Sydney' | 'Brisbane' | 'Hobart' | 'Guam_PortMoresby' | 'Vladivostok' | 'SolomonIs_NewCaledonia' | 'Magadan' | 'Fiji' | 'Auckland_Wellington' | 'CoordinatedUniversalTime12' | 'Nukualofa' | 'LocalTime' | 'ETimezoneSetting_MAX';
declare var ETimezoneSetting : { InternationalDateLineWest:'InternationalDateLineWest',CoordinatedUniversalTimeNeg11:'CoordinatedUniversalTimeNeg11',Samoa:'Samoa',Hawaii:'Hawaii',Alaska:'Alaska',PacificTime_USCAN:'PacificTime_USCAN',BajaCalifornia:'BajaCalifornia',MountainTime_USCAN:'MountainTime_USCAN',Chihuahua_LaPaz_Mazatlan:'Chihuahua_LaPaz_Mazatlan',Arizona:'Arizona',Saskatchewan:'Saskatchewan',CentralAmerica:'CentralAmerica',CentralTime_USCAN:'CentralTime_USCAN',Guadalajara_MexicoCity_Monterrey:'Guadalajara_MexicoCity_Monterrey',EasternTime_USCAN:'EasternTime_USCAN',Bogota_Lima_Quito:'Bogota_Lima_Quito',Indiana_US:'Indiana_US',Caracas:'Caracas',AtlanticTime_Canada:'AtlanticTime_Canada',Cuiaba:'Cuiaba',Santiago:'Santiago',Georgetown_LaPaz_Manaus_SanJuan:'Georgetown_LaPaz_Manaus_SanJuan',Asuncion:'Asuncion',Newfoundland:'Newfoundland',Brasilia:'Brasilia',Greenland:'Greenland',Montevideo:'Montevideo',Cayenne_Fortaleza:'Cayenne_Fortaleza',BuenosAires:'BuenosAires',MidAtlantic:'MidAtlantic',CoordinatedUniversalTimeNeg02:'CoordinatedUniversalTimeNeg02',Azores:'Azores',CaboVerdeIs:'CaboVerdeIs',Dublin_Edinburgh_Lisbon_London:'Dublin_Edinburgh_Lisbon_London',Monrovia_Reykjavik:'Monrovia_Reykjavik',Casablanca:'Casablanca',UTC:'UTC',Belgrade_Bratislava_Budapest_Ljubljana_Prague:'Belgrade_Bratislava_Budapest_Ljubljana_Prague',Sarajevo_Skopje_Warsaw_Zagreb:'Sarajevo_Skopje_Warsaw_Zagreb',Brussels_Copenhagen_Madrid_Paris:'Brussels_Copenhagen_Madrid_Paris',WestCentralAfrica:'WestCentralAfrica',Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna:'Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna',Windhoek:'Windhoek',Minsk:'Minsk',Cairo:'Cairo',Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius:'Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius',Athens_Bucharest:'Athens_Bucharest',Jerusalem:'Jerusalem',Amman:'Amman',Beirut:'Beirut',Harare_Pretoria:'Harare_Pretoria',Damascus:'Damascus',Istanbul:'Istanbul',Kuwait_Riyadh:'Kuwait_Riyadh',Baghdad:'Baghdad',Nairobi:'Nairobi',Kaliningrad:'Kaliningrad',Tehran:'Tehran',Moscow_StPetersburg_Volgograd:'Moscow_StPetersburg_Volgograd',AbuDhabi_Muscat:'AbuDhabi_Muscat',Baku:'Baku',Yerevan:'Yerevan',Tbilisi:'Tbilisi',PortLouis:'PortLouis',Kabul:'Kabul',Tashkent:'Tashkent',Islamabad_Karachi:'Islamabad_Karachi',Chennai_Kolkata_Mumbai_NewDelhi:'Chennai_Kolkata_Mumbai_NewDelhi',SriJayawardenepura:'SriJayawardenepura',Kathmandu:'Kathmandu',Ekaterinburg:'Ekaterinburg',Astana:'Astana',Dhaka:'Dhaka',Yangon_Rangoon:'Yangon_Rangoon',Novosibirsk:'Novosibirsk',Bangkok_Hanoi_Jakarta:'Bangkok_Hanoi_Jakarta',Krasnoyarsk:'Krasnoyarsk',Beijing_Chongqing_HongKong_Urumqi:'Beijing_Chongqing_HongKong_Urumqi',KualaLumpur_Singapore:'KualaLumpur_Singapore',Taipei:'Taipei',Perth:'Perth',Ulaanbaatar:'Ulaanbaatar',Irkutsk:'Irkutsk',Seoul:'Seoul',Osaka_Sapporo_Tokyo:'Osaka_Sapporo_Tokyo',Darwin:'Darwin',Adelaide:'Adelaide',Yakutsk:'Yakutsk',Canberra_Melbourne_Sydney:'Canberra_Melbourne_Sydney',Brisbane:'Brisbane',Hobart:'Hobart',Guam_PortMoresby:'Guam_PortMoresby',Vladivostok:'Vladivostok',SolomonIs_NewCaledonia:'SolomonIs_NewCaledonia',Magadan:'Magadan',Fiji:'Fiji',Auckland_Wellington:'Auckland_Wellington',CoordinatedUniversalTime12:'CoordinatedUniversalTime12',Nukualofa:'Nukualofa',LocalTime:'LocalTime',ETimezoneSetting_MAX:'ETimezoneSetting_MAX', };
declare class InternationalizationSettingsModel extends UObject { 
	DisplayTimezone: ETimezoneSetting;
	static Load(ResourceName: string): InternationalizationSettingsModel;
	static Find(Outer: UObject, ResourceName: string): InternationalizationSettingsModel;
	static GetDefaultObject(): InternationalizationSettingsModel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationSettingsModel;
	static C(Other: UObject | any): InternationalizationSettingsModel;
}

declare class PropertyConfigFileDisplayRow extends UObject { 
	ConfigFileName: string;
	ExternalProperty: any;
	bIsFileWritable: boolean;
	static Load(ResourceName: string): PropertyConfigFileDisplayRow;
	static Find(Outer: UObject, ResourceName: string): PropertyConfigFileDisplayRow;
	static GetDefaultObject(): PropertyConfigFileDisplayRow;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyConfigFileDisplayRow;
	static C(Other: UObject | any): PropertyConfigFileDisplayRow;
}

declare class ConfigHierarchyPropertyView extends UObject { 
	EditProperty: any;
	ConfigFilePropertyObjects: PropertyConfigFileDisplayRow[];
	static Load(ResourceName: string): ConfigHierarchyPropertyView;
	static Find(Outer: UObject, ResourceName: string): ConfigHierarchyPropertyView;
	static GetDefaultObject(): ConfigHierarchyPropertyView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConfigHierarchyPropertyView;
	static C(Other: UObject | any): ConfigHierarchyPropertyView;
}

declare class Manipulator extends Actor { 
	AssociatedComponent: SceneComponent;
	StaticMeshComponent: StaticMeshComponent;
	static GetDefaultObject(): Manipulator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Manipulator;
	static C(Other: UObject | any): Manipulator;
}

declare class PropertyNameAndIndex { 
	Name: string;
	index: number;
	clone() : PropertyNameAndIndex;
	static C(Other: UObject | any): PropertyNameAndIndex;
}

declare class ComponentPropertyPath { 
	ParentOwningActor: any;
	LastResortComponentPtr: any;
	PropertyChain: PropertyNameAndIndex[];
	clone() : ComponentPropertyPath;
	static C(Other: UObject | any): ComponentPropertyPath;
}

declare type ESelectedTangentHandle = 'None' | 'Leave' | 'Arrive' | 'ESelectedTangentHandle_MAX';
declare var ESelectedTangentHandle : { None:'None',Leave:'Leave',Arrive:'Arrive',ESelectedTangentHandle_MAX:'ESelectedTangentHandle_MAX', };
declare class SplineComponentVisualizerSelectionState extends UObject { 
	SplinePropertyPath: ComponentPropertyPath;
	SelectedKeys: any;
	LastKeyIndexSelected: number;
	SelectedSegmentIndex: number;
	SelectedTangentHandle: number;
	SelectedTangentHandleType: ESelectedTangentHandle;
	SelectedSplinePosition: Vector;
	CachedRotation: Quat;
	static Load(ResourceName: string): SplineComponentVisualizerSelectionState;
	static Find(Outer: UObject, ResourceName: string): SplineComponentVisualizerSelectionState;
	static GetDefaultObject(): SplineComponentVisualizerSelectionState;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineComponentVisualizerSelectionState;
	static C(Other: UObject | any): SplineComponentVisualizerSelectionState;
}

declare type EShapeAddMode = 'AppendAfter' | 'AppendBefore' | 'InsertAfter' | 'InsertBefore' | 'EShapeAddMode_MAX';
declare var EShapeAddMode : { AppendAfter:'AppendAfter',AppendBefore:'AppendBefore',InsertAfter:'InsertAfter',InsertBefore:'InsertBefore',EShapeAddMode_MAX:'EShapeAddMode_MAX', };
declare class SplineGeneratorBase extends UObject { 
	ShapeAddMode: EShapeAddMode;
	static Load(ResourceName: string): SplineGeneratorBase;
	static Find(Outer: UObject, ResourceName: string): SplineGeneratorBase;
	static GetDefaultObject(): SplineGeneratorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineGeneratorBase;
	static C(Other: UObject | any): SplineGeneratorBase;
}

declare class CircleSplineGenerator extends SplineGeneratorBase { 
	NumberOfPoints: number;
	Radius: number;
	bReverseDir: boolean;
	bKeepFirstKeyTangent: boolean;
	bBranchRight: boolean;
	static Load(ResourceName: string): CircleSplineGenerator;
	static Find(Outer: UObject, ResourceName: string): CircleSplineGenerator;
	static GetDefaultObject(): CircleSplineGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CircleSplineGenerator;
	static C(Other: UObject | any): CircleSplineGenerator;
}

declare class ArcSplineGenerator extends SplineGeneratorBase { 
	NumberOfPoints: number;
	Radius: number;
	Degrees: number;
	bReverseDir: boolean;
	bKeepFirstKeyTangent: boolean;
	bBranchRight: boolean;
	static Load(ResourceName: string): ArcSplineGenerator;
	static Find(Outer: UObject, ResourceName: string): ArcSplineGenerator;
	static GetDefaultObject(): ArcSplineGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ArcSplineGenerator;
	static C(Other: UObject | any): ArcSplineGenerator;
}

declare class SquareSplineGenerator extends SplineGeneratorBase { 
	Length: number;
	bBranchRight: boolean;
	static Load(ResourceName: string): SquareSplineGenerator;
	static Find(Outer: UObject, ResourceName: string): SquareSplineGenerator;
	static GetDefaultObject(): SquareSplineGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SquareSplineGenerator;
	static C(Other: UObject | any): SquareSplineGenerator;
}

declare class EllipseSplineGenerator extends SplineGeneratorBase { 
	NumberOfPoints: number;
	Length: number;
	Width: number;
	bReverseDir: boolean;
	bKeepFirstKeyTangent: boolean;
	bBranchRight: boolean;
	static Load(ResourceName: string): EllipseSplineGenerator;
	static Find(Outer: UObject, ResourceName: string): EllipseSplineGenerator;
	static GetDefaultObject(): EllipseSplineGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EllipseSplineGenerator;
	static C(Other: UObject | any): EllipseSplineGenerator;
}

declare class RectangleSplineGenerator extends SplineGeneratorBase { 
	Length: number;
	Width: number;
	bBranchRight: boolean;
	static Load(ResourceName: string): RectangleSplineGenerator;
	static Find(Outer: UObject, ResourceName: string): RectangleSplineGenerator;
	static GetDefaultObject(): RectangleSplineGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RectangleSplineGenerator;
	static C(Other: UObject | any): RectangleSplineGenerator;
}

declare class LineSplineGenerator extends SplineGeneratorBase { 
	NumberOfPoints: number;
	Length: number;
	bEnableUpToNextPoint: boolean;
	bUpToNextPoint: boolean;
	static Load(ResourceName: string): LineSplineGenerator;
	static Find(Outer: UObject, ResourceName: string): LineSplineGenerator;
	static GetDefaultObject(): LineSplineGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LineSplineGenerator;
	static C(Other: UObject | any): LineSplineGenerator;
}

declare class SplineMetadataDetailsFactoryBase extends UObject { 
	static Load(ResourceName: string): SplineMetadataDetailsFactoryBase;
	static Find(Outer: UObject, ResourceName: string): SplineMetadataDetailsFactoryBase;
	static GetDefaultObject(): SplineMetadataDetailsFactoryBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineMetadataDetailsFactoryBase;
	static C(Other: UObject | any): SplineMetadataDetailsFactoryBase;
}

declare class PropertyViewBase extends Widget { 
	LazyObject: any;
	SoftObjectPath: SoftObjectPath;
	bAutoLoadAsset: boolean;
	OnPropertyChanged: UnrealEngineMulticastDelegate<(PropertyName: string) => void>;
	static Load(ResourceName: string): PropertyViewBase;
	static Find(Outer: UObject, ResourceName: string): PropertyViewBase;
	static GetDefaultObject(): PropertyViewBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyViewBase;
	SetObject(NewObject: UObject): void;
	GetObject(): UObject;
	static C(Other: UObject | any): PropertyViewBase;
}

declare class DetailsView extends PropertyViewBase { 
	bAllowFiltering: boolean;
	bAllowFavoriteSystem: boolean;
	bShowModifiedPropertiesOption: boolean;
	bShowKeyablePropertiesOption: boolean;
	bShowAnimatedPropertiesOption: boolean;
	ColumnWidth: number;
	bShowScrollBar: boolean;
	bForceHiddenPropertyVisibility: boolean;
	ViewIdentifier: string;
	CategoriesToShow: string[];
	PropertiesToShow: string[];
	bShowOnlyWhitelisted: boolean;
	static Load(ResourceName: string): DetailsView;
	static Find(Outer: UObject, ResourceName: string): DetailsView;
	static GetDefaultObject(): DetailsView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DetailsView;
	static C(Other: UObject | any): DetailsView;
}

declare class K2Node_CreateDragDropOperation extends K2Node_ConstructObjectFromClass { 
	static Load(ResourceName: string): K2Node_CreateDragDropOperation;
	static Find(Outer: UObject, ResourceName: string): K2Node_CreateDragDropOperation;
	static GetDefaultObject(): K2Node_CreateDragDropOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CreateDragDropOperation;
	static C(Other: UObject | any): K2Node_CreateDragDropOperation;
}

declare class K2Node_CreateWidget extends K2Node_ConstructObjectFromClass { 
	static Load(ResourceName: string): K2Node_CreateWidget;
	static Find(Outer: UObject, ResourceName: string): K2Node_CreateWidget;
	static GetDefaultObject(): K2Node_CreateWidget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CreateWidget;
	static C(Other: UObject | any): K2Node_CreateWidget;
}

declare class K2Node_PlayAnimation extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_PlayAnimation;
	static Find(Outer: UObject, ResourceName: string): K2Node_PlayAnimation;
	static GetDefaultObject(): K2Node_PlayAnimation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_PlayAnimation;
	static C(Other: UObject | any): K2Node_PlayAnimation;
}

declare class K2Node_PlayAnimationTimeRange extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_PlayAnimationTimeRange;
	static Find(Outer: UObject, ResourceName: string): K2Node_PlayAnimationTimeRange;
	static GetDefaultObject(): K2Node_PlayAnimationTimeRange;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_PlayAnimationTimeRange;
	static C(Other: UObject | any): K2Node_PlayAnimationTimeRange;
}

declare class EditorPropertyPathSegment { 
	struct: Struct;
	MemberName: string;
	MemberGuid: Guid;
	IsProperty: boolean;
	clone() : EditorPropertyPathSegment;
	static C(Other: UObject | any): EditorPropertyPathSegment;
}

declare class EditorPropertyPath { 
	Segments: EditorPropertyPathSegment[];
	clone() : EditorPropertyPath;
	static C(Other: UObject | any): EditorPropertyPath;
}

declare class DelegateEditorBinding { 
	ObjectName: string;
	PropertyName: string;
	FunctionName: string;
	SourceProperty: string;
	SourcePath: EditorPropertyPath;
	MemberGuid: Guid;
	Kind: EBindingKind;
	clone() : DelegateEditorBinding;
	static C(Other: UObject | any): DelegateEditorBinding;
}

declare class WidgetAnimation_DEPRECATED { 
	MovieScene: MovieScene;
	AnimationBindings: WidgetAnimationBinding[];
	clone() : WidgetAnimation_DEPRECATED;
	static C(Other: UObject | any): WidgetAnimation_DEPRECATED;
}

declare type EWidgetCompileTimeTickPrediction = 'WontTick' | 'OnDemand' | 'WillTick' | 'EWidgetCompileTimeTickPrediction_MAX';
declare var EWidgetCompileTimeTickPrediction : { WontTick:'WontTick',OnDemand:'OnDemand',WillTick:'WillTick',EWidgetCompileTimeTickPrediction_MAX:'EWidgetCompileTimeTickPrediction_MAX', };
declare class WidgetBlueprint extends BaseWidgetBlueprint { 
	Bindings: DelegateEditorBinding[];
	AnimationData: WidgetAnimation_DEPRECATED[];
	Animations: WidgetAnimation[];
	PaletteCategory: string;
	TickFrequency: EWidgetTickFrequency;
	TickPrediction: EWidgetCompileTimeTickPrediction;
	TickPredictionReason: string;
	PropertyBindings: number;
	static Load(ResourceName: string): WidgetBlueprint;
	static Find(Outer: UObject, ResourceName: string): WidgetBlueprint;
	static GetDefaultObject(): WidgetBlueprint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBlueprint;
	static C(Other: UObject | any): WidgetBlueprint;
}

declare class K2Node_WidgetAnimationEvent extends K2Node_Event { 
	Action: EWidgetAnimationEvent;
	AnimationPropertyName: string;
	UserTag: string;
	SourceWidgetBlueprint: WidgetBlueprint;
	static Load(ResourceName: string): K2Node_WidgetAnimationEvent;
	static Find(Outer: UObject, ResourceName: string): K2Node_WidgetAnimationEvent;
	static GetDefaultObject(): K2Node_WidgetAnimationEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_WidgetAnimationEvent;
	static C(Other: UObject | any): K2Node_WidgetAnimationEvent;
}

declare class SinglePropertyView extends PropertyViewBase { 
	PropertyName: string;
	NameOverride: string;
	static Load(ResourceName: string): SinglePropertyView;
	static Find(Outer: UObject, ResourceName: string): SinglePropertyView;
	static GetDefaultObject(): SinglePropertyView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SinglePropertyView;
	SetPropertyName(NewPropertyName: string): void;
	GetPropertyName(): string;
	static C(Other: UObject | any): SinglePropertyView;
}

declare class SlateVectorArtDataFactory extends Factory { 
	static Load(ResourceName: string): SlateVectorArtDataFactory;
	static Find(Outer: UObject, ResourceName: string): SlateVectorArtDataFactory;
	static GetDefaultObject(): SlateVectorArtDataFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateVectorArtDataFactory;
	static C(Other: UObject | any): SlateVectorArtDataFactory;
}

declare type EPropertyBindingPermissionLevel = 'Allow' | 'Prevent' | 'PreventAndWarn' | 'PreventAndError' | 'EPropertyBindingPermissionLevel_MAX';
declare var EPropertyBindingPermissionLevel : { Allow:'Allow',Prevent:'Prevent',PreventAndWarn:'PreventAndWarn',PreventAndError:'PreventAndError',EPropertyBindingPermissionLevel_MAX:'EPropertyBindingPermissionLevel_MAX', };
declare class WidgetCompilerOptions { 
	bAllowBlueprintTick: boolean;
	bAllowBlueprintPaint: boolean;
	PropertyBindingRule: EPropertyBindingPermissionLevel;
	Rules: Class[];
	clone() : WidgetCompilerOptions;
	static C(Other: UObject | any): WidgetCompilerOptions;
}

declare class DirectoryWidgetCompilerOptions { 
	Directory: DirectoryPath;
	IgnoredWidgets: WidgetBlueprint[];
	Options: WidgetCompilerOptions;
	clone() : DirectoryWidgetCompilerOptions;
	static C(Other: UObject | any): DirectoryWidgetCompilerOptions;
}

declare class DebugResolution { 
	Width: number;
	Height: number;
	Description: string;
	Color: LinearColor;
	clone() : DebugResolution;
	static C(Other: UObject | any): DebugResolution;
}

declare class UMGEditorProjectSettings extends DeveloperSettings { 
	DefaultCompilerOptions: WidgetCompilerOptions;
	DirectoryCompilerOptions: DirectoryWidgetCompilerOptions[];
	bShowWidgetsFromEngineContent: boolean;
	bShowWidgetsFromDeveloperContent: boolean;
	CategoriesToHide: string[];
	WidgetClassesToHide: SoftClassPath[];
	bUseWidgetTemplateSelector: boolean;
	DefaultRootWidget: UnrealEngineClass;
	DefaultWidgetParentClass: Class;
	DebugResolutions: DebugResolution[];
	Version: number;
	static Load(ResourceName: string): UMGEditorProjectSettings;
	static Find(Outer: UObject, ResourceName: string): UMGEditorProjectSettings;
	static GetDefaultObject(): UMGEditorProjectSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UMGEditorProjectSettings;
	static C(Other: UObject | any): UMGEditorProjectSettings;
}

declare class WidgetBlueprintFactory extends Factory { 
	BlueprintType: EBlueprintType;
	ParentClass: UnrealEngineClass;
	RootWidgetClass: UnrealEngineClass;
	static Load(ResourceName: string): WidgetBlueprintFactory;
	static Find(Outer: UObject, ResourceName: string): WidgetBlueprintFactory;
	static GetDefaultObject(): WidgetBlueprintFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBlueprintFactory;
	static C(Other: UObject | any): WidgetBlueprintFactory;
}

declare class WidgetCompilerRule extends UObject { 
	static Load(ResourceName: string): WidgetCompilerRule;
	static Find(Outer: UObject, ResourceName: string): WidgetCompilerRule;
	static GetDefaultObject(): WidgetCompilerRule;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetCompilerRule;
	static C(Other: UObject | any): WidgetCompilerRule;
}

declare class WidgetPaletteFavorites extends UObject { 
	Favorites: string[];
	static Load(ResourceName: string): WidgetPaletteFavorites;
	static Find(Outer: UObject, ResourceName: string): WidgetPaletteFavorites;
	static GetDefaultObject(): WidgetPaletteFavorites;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetPaletteFavorites;
	static C(Other: UObject | any): WidgetPaletteFavorites;
}

declare class WidgetDesignerSettings extends DeveloperSettings { 
	GridSnapEnabled: boolean;
	GridSnapSize: number;
	bLockToPanelOnDragByDefault: boolean;
	bShowOutlines: boolean;
	bExecutePreConstructEvent: boolean;
	bRespectLocks: boolean;
	Favorites: WidgetPaletteFavorites;
	static Load(ResourceName: string): WidgetDesignerSettings;
	static Find(Outer: UObject, ResourceName: string): WidgetDesignerSettings;
	static GetDefaultObject(): WidgetDesignerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetDesignerSettings;
	static C(Other: UObject | any): WidgetDesignerSettings;
}

declare class WidgetGraphSchema extends EdGraphSchema_K2 { 
	static Load(ResourceName: string): WidgetGraphSchema;
	static Find(Outer: UObject, ResourceName: string): WidgetGraphSchema;
	static GetDefaultObject(): WidgetGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetGraphSchema;
	static C(Other: UObject | any): WidgetGraphSchema;
}

declare class WidgetSlotPair extends UObject { 
	WidgetName: string;
	SlotPropertyNames: string[];
	SlotPropertyValues: string[];
	static Load(ResourceName: string): WidgetSlotPair;
	static Find(Outer: UObject, ResourceName: string): WidgetSlotPair;
	static GetDefaultObject(): WidgetSlotPair;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetSlotPair;
	static C(Other: UObject | any): WidgetSlotPair;
}

declare class AutomatedTestFilter { 
	Contains: string;
	MatchFromStart: boolean;
	clone() : AutomatedTestFilter;
	static C(Other: UObject | any): AutomatedTestFilter;
}

declare class AutomatedTestGroup { 
	Name: string;
	Filters: AutomatedTestFilter[];
	clone() : AutomatedTestGroup;
	static C(Other: UObject | any): AutomatedTestGroup;
}

declare class AutomationControllerSettings extends UObject { 
	Groups: AutomatedTestGroup[];
	bSuppressLogErrors: boolean;
	bSuppressLogWarnings: boolean;
	bTreatLogWarningsAsTestErrors: boolean;
	CheckTestIntervalSeconds: number;
	GameInstanceLostTimerSeconds: number;
	static Load(ResourceName: string): AutomationControllerSettings;
	static Find(Outer: UObject, ResourceName: string): AutomationControllerSettings;
	static GetDefaultObject(): AutomationControllerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationControllerSettings;
	static C(Other: UObject | any): AutomationControllerSettings;
}

declare class AutomationEditorTask extends UObject { 
	static Load(ResourceName: string): AutomationEditorTask;
	static Find(Outer: UObject, ResourceName: string): AutomationEditorTask;
	static GetDefaultObject(): AutomationEditorTask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationEditorTask;
	IsValidTask(): boolean;
	IsTaskDone(): boolean;
	static C(Other: UObject | any): AutomationEditorTask;
}

declare class AutomationBlueprintFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AutomationBlueprintFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): AutomationBlueprintFunctionLibrary;
	static GetDefaultObject(): AutomationBlueprintFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationBlueprintFunctionLibrary;
	static TakeHighResScreenshot(ResX: number,ResY: number,Filename: string,Camera: CameraActor,bMaskEnabled: boolean,bCaptureHDR: boolean,ComparisonTolerance: EComparisonTolerance,ComparisonNotes: string,Delay: number): AutomationEditorTask;
	static TakeAutomationScreenshotOfUI(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Options: AutomationScreenshotOptions): void;
	static TakeAutomationScreenshotAtCamera(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Camera: CameraActor,NameOverride: string,Notes: string,Options: AutomationScreenshotOptions): void;
	static TakeAutomationScreenshot(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Notes: string,Options: AutomationScreenshotOptions): void;
	static SetScalabilityQualityToLow(WorldContextObject: UObject): void;
	static SetScalabilityQualityToEpic(WorldContextObject: UObject): void;
	static SetScalabilityQualityLevelRelativeToMax(WorldContextObject: UObject,Value: number): void;
	static GetStatIncMax(StatName: string): number;
	static GetStatIncAverage(StatName: string): number;
	static GetStatExcMax(StatName: string): number;
	static GetStatExcAverage(StatName: string): number;
	static GetStatCallCount(StatName: string): number;
	static GetDefaultScreenshotOptionsForRendering(Tolerance: EComparisonTolerance,Delay: number): AutomationScreenshotOptions;
	static GetDefaultScreenshotOptionsForGameplay(Tolerance: EComparisonTolerance,Delay: number): AutomationScreenshotOptions;
	static EnableStatGroup(WorldContextObject: UObject,GroupName: string): void;
	static DisableStatGroup(WorldContextObject: UObject,GroupName: string): void;
	static AutomationWaitForLoading(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Options: AutomationWaitForLoadingOptions): void;
	static AreAutomatedTestsRunning(): boolean;
	static AddExpectedLogError(ExpectedPatternString: string,Occurrences: number,ExactMatch: boolean): void;
	static C(Other: UObject | any): AutomationBlueprintFunctionLibrary;
}

declare class FuncTestRenderingComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): FuncTestRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): FuncTestRenderingComponent;
	static GetDefaultObject(): FuncTestRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FuncTestRenderingComponent;
	static C(Other: UObject | any): FuncTestRenderingComponent;
}

declare type EFunctionalTestLogHandling = 'ProjectDefault' | 'OutputIsError' | 'OutputIgnored' | 'EFunctionalTestLogHandling_MAX';
declare var EFunctionalTestLogHandling : { ProjectDefault:'ProjectDefault',OutputIsError:'OutputIsError',OutputIgnored:'OutputIgnored',EFunctionalTestLogHandling_MAX:'EFunctionalTestLogHandling_MAX', };
declare type EFunctionalTestResult = 'Default' | 'Invalid' | 'Error' | 'Running' | 'Failed' | 'Succeeded' | 'EFunctionalTestResult_MAX';
declare var EFunctionalTestResult : { Default:'Default',Invalid:'Invalid',Error:'Error',Running:'Running',Failed:'Failed',Succeeded:'Succeeded',EFunctionalTestResult_MAX:'EFunctionalTestResult_MAX', };
declare type EComparisonMethod = 'Equal_To' | 'Not_Equal_To' | 'Greater_Than_Or_Equal_To' | 'Less_Than_Or_Equal_To' | 'Greater_Than' | 'Less_Than' | 'EComparisonMethod_MAX';
declare var EComparisonMethod : { Equal_To:'Equal_To',Not_Equal_To:'Not_Equal_To',Greater_Than_Or_Equal_To:'Greater_Than_Or_Equal_To',Less_Than_Or_Equal_To:'Less_Than_Or_Equal_To',Greater_Than:'Greater_Than',Less_Than:'Less_Than',EComparisonMethod_MAX:'EComparisonMethod_MAX', };
declare class FunctionalTest extends Actor { 
	SpriteComponent: BillboardComponent;
	bIsEnabled: boolean;
	LogErrorHandling: EFunctionalTestLogHandling;
	LogWarningHandling: EFunctionalTestLogHandling;
	Author: string;
	Description: string;
	ObservationPoint: Actor;
	RandomNumbersStream: RandomStream;
	Result: EFunctionalTestResult;
	PreparationTimeLimit: number;
	TimeLimit: number;
	TimesUpMessage: string;
	TimesUpResult: EFunctionalTestResult;
	OnTestPrepare: UnrealEngineMulticastDelegate<() => void>;
	OnTestStart: UnrealEngineMulticastDelegate<() => void>;
	OnTestFinished: UnrealEngineMulticastDelegate<() => void>;
	AutoDestroyActors: Actor[];
	RenderComp: FuncTestRenderingComponent;
	TestName: TextRenderComponent;
	bIsRunning: boolean;
	TotalTime: number;
	static GetDefaultObject(): FunctionalTest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTest;
	SetTimeLimit(NewTimeLimit: number,ResultWhenTimeRunsOut: EFunctionalTestResult): void;
	RegisterAutoDestroyActor(ActorToAutoDestroy: Actor): void;
	ReceiveStartTest(): void;
	ReceivePrepareTest(): void;
	OnWantsReRunCheck(): boolean;
	OnAdditionalTestFinishedMessageRequest(TestResult: EFunctionalTestResult): string;
	LogMessage(Message: string): void;
	IsRunning(): boolean;
	IsReady(): boolean;
	IsEnabled(): boolean;
	GetCurrentRerunReason(): string;
	FinishTest(TestResult: EFunctionalTestResult,Message: string): void;
	DebugGatherRelevantActors(): Actor[];
	AssertValue_Int(Actual: number,ShouldBe: EComparisonMethod,Expected: number,What: string,ContextObject: UObject): boolean;
	AssertValue_Float(Actual: number,ShouldBe: EComparisonMethod,Expected: number,What: string,ContextObject: UObject): boolean;
	AssertValue_DateTime(Actual: DateTime,ShouldBe: EComparisonMethod,Expected: DateTime,What: string,ContextObject: UObject): boolean;
	AssertTrue(Condition: boolean,Message: string,ContextObject: UObject): boolean;
	AssertNotEqual_Vector(Actual: Vector,NotExpected: Vector,What: string,ContextObject: UObject): boolean;
	AssertNotEqual_Transform(Actual: Transform,NotExpected: Transform,What: string,ContextObject: UObject): boolean;
	AssertNotEqual_String(Actual: string,NotExpected: string,What: string,ContextObject: UObject): boolean;
	AssertNotEqual_Rotator(Actual: Rotator,NotExpected: Rotator,What: string,ContextObject: UObject): boolean;
	AssertIsValid(UObject: UObject,Message: string,ContextObject: UObject): boolean;
	AssertFalse(Condition: boolean,Message: string,ContextObject: UObject): boolean;
	AssertEqual_Vector(Actual: Vector,Expected: Vector,What: string,Tolerance: number,ContextObject: UObject): boolean;
	AssertEqual_Transform(Actual: Transform,Expected: Transform,What: string,Tolerance: number,ContextObject: UObject): boolean;
	AssertEqual_TraceQueryResults(Actual: TraceQueryTestResults,Expected: TraceQueryTestResults,What: string,ContextObject: UObject): boolean;
	AssertEqual_String(Actual: string,Expected: string,What: string,ContextObject: UObject): boolean;
	AssertEqual_Rotator(Actual: Rotator,Expected: Rotator,What: string,Tolerance: number,ContextObject: UObject): boolean;
	AssertEqual_Object(Actual: UObject,Expected: UObject,What: string,ContextObject: UObject): boolean;
	AssertEqual_Name(Actual: string,Expected: string,What: string,ContextObject: UObject): boolean;
	AssertEqual_Int(Actual: number,Expected: number,What: string,ContextObject: UObject): boolean;
	AssertEqual_Float(Actual: number,Expected: number,What: string,Tolerance: number,ContextObject: UObject): boolean;
	AssertEqual_Bool(Actual: boolean,Expected: boolean,What: string,ContextObject: UObject): boolean;
	AddWarning(Message: string): void;
	AddRerun(reason: string): void;
	AddError(Message: string): void;
	static C(Other: UObject | any): FunctionalTest;
}

declare class PendingDelayedSpawn { 
	clone() : PendingDelayedSpawn;
	static C(Other: UObject | any): PendingDelayedSpawn;
}

declare class FunctionalAITestBase extends FunctionalTest { 
	SpawnLocationRandomizationRange: number;
	SpawnedPawns: Pawn[];
	PendingDelayedSpawns: PendingDelayedSpawn[];
	CurrentSpawnSetIndex: number;
	CurrentSpawnSetName: string;
	OnAISpawned: UnrealEngineMulticastDelegate<(Controller: AIController, Pawn: Pawn) => void>;
	OnAllAISPawned: UnrealEngineMulticastDelegate<() => void>;
	NavMeshDebugOrigin: Vector;
	NavMeshDebugExtent: Vector;
	bWaitForNavMesh: boolean;
	bDebugNavMeshOnTimeout: boolean;
	static GetDefaultObject(): FunctionalAITestBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalAITestBase;
	IsOneOfSpawnedPawns(Actor: Actor): boolean;
	static C(Other: UObject | any): FunctionalAITestBase;
}

declare class AITestSpawnSetBase { 
	Name: string;
	bEnabled: boolean;
	FallbackSpawnLocation: Actor;
	clone() : AITestSpawnSetBase;
	static C(Other: UObject | any): AITestSpawnSetBase;
}

declare class AITestSpawnInfoBase { 
	SpawnLocation: Actor;
	NumberToSpawn: number;
	SpawnDelay: number;
	PreSpawnDelay: number;
	clone() : AITestSpawnInfoBase;
	static C(Other: UObject | any): AITestSpawnInfoBase;
}

declare class GenericTeamId { 
	TeamID: number;
	clone() : GenericTeamId;
	static C(Other: UObject | any): GenericTeamId;
}

declare class AITestSpawnInfo extends AITestSpawnInfoBase { 
	PawnClass: UnrealEngineClass;
	ControllerClass: UnrealEngineClass;
	TeamID: GenericTeamId;
	BehaviorTree: BehaviorTree;
	clone() : AITestSpawnInfo;
	static C(Other: UObject | any): AITestSpawnInfo;
}

declare class AITestSpawnSet extends AITestSpawnSetBase { 
	SpawnInfoContainer: AITestSpawnInfo[];
	clone() : AITestSpawnSet;
	static C(Other: UObject | any): AITestSpawnSet;
}

declare class FunctionalAITest extends FunctionalAITestBase { 
	SpawnSets: AITestSpawnSet[];
	static GetDefaultObject(): FunctionalAITest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalAITest;
	static C(Other: UObject | any): FunctionalAITest;
}

declare class AutomationPerformaceHelper extends UObject { 
	static Load(ResourceName: string): AutomationPerformaceHelper;
	static Find(Outer: UObject, ResourceName: string): AutomationPerformaceHelper;
	static GetDefaultObject(): AutomationPerformaceHelper;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationPerformaceHelper;
	WriteLogFile(CaptureDir: string,CaptureExtension: string): void;
	TriggerGPUTraceIfRecordFallsBelowBudget(): void;
	Tick(DeltaSeconds: number): void;
	StopCPUProfiling(): void;
	StartCPUProfiling(): void;
	Sample(DeltaSeconds: number): void;
	OnBeginTests(): void;
	OnAllTestsComplete(): void;
	IsRecording(): boolean;
	IsCurrentRecordWithinRenderThreadBudget(): boolean;
	IsCurrentRecordWithinGPUBudget(): boolean;
	IsCurrentRecordWithinGameThreadBudget(): boolean;
	EndStatsFile(): void;
	EndRecordingBaseline(): void;
	EndRecording(): void;
	BeginStatsFile(RecordName: string): void;
	BeginRecordingBaseline(RecordName: string): void;
	BeginRecording(RecordName: string,InGPUBudget: number,InRenderThreadBudget: number,InGameThreadBudget: number): void;
	static C(Other: UObject | any): AutomationPerformaceHelper;
}

declare class FunctionalTestGameMode extends GameModeBase { 
	static GetDefaultObject(): FunctionalTestGameMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestGameMode;
	static C(Other: UObject | any): FunctionalTestGameMode;
}

declare class FunctionalTestingManager extends BlueprintFunctionLibrary { 
	TestsLeft: FunctionalTest[];
	AllTests: FunctionalTest[];
	OnSetupTests: UnrealEngineMulticastDelegate<() => void>;
	OnTestsComplete: UnrealEngineMulticastDelegate<() => void>;
	OnTestsBegin: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): FunctionalTestingManager;
	static Find(Outer: UObject, ResourceName: string): FunctionalTestingManager;
	static GetDefaultObject(): FunctionalTestingManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestingManager;
	static RunAllFunctionalTests(WorldContextObject: UObject,bNewLog: boolean,bRunLooped: boolean,FailedTestsReproString: string): boolean;
	static C(Other: UObject | any): FunctionalTestingManager;
}

declare class PhasedAutomationActorBase extends Actor { 
	static GetDefaultObject(): PhasedAutomationActorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhasedAutomationActorBase;
	OnFunctionalTestingComplete(): void;
	OnFunctionalTestingBegin(): void;
	static C(Other: UObject | any): PhasedAutomationActorBase;
}

declare class FunctionalTestLevelScript extends LevelScriptActor { 
	static GetDefaultObject(): FunctionalTestLevelScript;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestLevelScript;
	static C(Other: UObject | any): FunctionalTestLevelScript;
}

declare class FunctionalTestUtilityLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): FunctionalTestUtilityLibrary;
	static Find(Outer: UObject, ResourceName: string): FunctionalTestUtilityLibrary;
	static GetDefaultObject(): FunctionalTestUtilityLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestUtilityLibrary;
	static TraceChannelTestUtil(WorldContextObject: UObject,BatchOptions: TraceChannelTestBatchOptions,Start: Vector,End: Vector,SphereCapsuleRadius: number,CapsuleHalfHeight: number,BoxHalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,ObjectTypes: EObjectTypeQuery[],ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],bIgnoreSelf: boolean,DrawDebugType: EDrawDebugTrace,TraceColor: LinearColor,TraceHitColor: LinearColor,DrawTime: number): TraceQueryTestResults;
	static C(Other: UObject | any): FunctionalTestUtilityLibrary;
}

declare class ScreenshotFunctionalTestBase extends FunctionalTest { 
	Notes: string;
	ScreenshotCamera: CameraComponent;
	ScreenshotOptions: AutomationScreenshotOptions;
	static GetDefaultObject(): ScreenshotFunctionalTestBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScreenshotFunctionalTestBase;
	static C(Other: UObject | any): ScreenshotFunctionalTestBase;
}

